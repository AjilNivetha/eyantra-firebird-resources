
hexapod_locomotion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00004126  000041ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004126  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800208  00800208  000041c2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000041c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008b2  00000000  00000000  000041e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015ea  00000000  00000000  00004a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000141  00000000  00000000  0000607e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b91  00000000  00000000  000061bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000550  00000000  00000000  00007d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000725  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_17>
      48:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_18>
      4c:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_19>
      50:	0c 94 0a 04 	jmp	0x814	; 0x814 <__vector_20>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f1 e4       	ldi	r31, 0x41	; 65
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 33       	cpi	r26, 0x31	; 49
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 55 18 	call	0x30aa	; 0x30aa <main>
     122:	0c 94 91 20 	jmp	0x4122	; 0x4122 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <servo_pin_config>:

//--------------------------------------------------------------------------------
//port initialisation for Servos i/p's												
//--------------------------------------------------------------------------------																			
void servo_pin_config (void)
{ 
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 PORTB = 0x00;
     132:	e5 e2       	ldi	r30, 0x25	; 37
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	10 82       	st	Z, r1
 DDRB  = 0x01;
     138:	e4 e2       	ldi	r30, 0x24	; 36
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	80 83       	st	Z, r24
 DDRD  = 0xF1;    //PD 4,5,6,7 as output
     140:	ea e2       	ldi	r30, 0x2A	; 42
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	81 ef       	ldi	r24, 0xF1	; 241
     146:	80 83       	st	Z, r24
 PORTD = 0x00;
     148:	eb e2       	ldi	r30, 0x2B	; 43
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	10 82       	st	Z, r1
 DDRG  = 0x03;    //PG 0,1 as output
     14e:	e3 e3       	ldi	r30, 0x33	; 51
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	80 83       	st	Z, r24
 PORTG = 0x00;
     156:	e4 e3       	ldi	r30, 0x34	; 52
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	10 82       	st	Z, r1
 DDRH  = 0x70;    //PH 4,5,6 as output
     15c:	e1 e0       	ldi	r30, 0x01	; 1
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	80 e7       	ldi	r24, 0x70	; 112
     162:	80 83       	st	Z, r24
 PORTH = 0x00;
     164:	e2 e0       	ldi	r30, 0x02	; 2
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	10 82       	st	Z, r1
 DDRJ  = 0xFE;    //PJ 1,2,3,4,5,6,7 as output
     16a:	e4 e0       	ldi	r30, 0x04	; 4
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	8e ef       	ldi	r24, 0xFE	; 254
     170:	80 83       	st	Z, r24
 PORTJ = 0x00;
     172:	e5 e0       	ldi	r30, 0x05	; 5
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	10 82       	st	Z, r1
 DDRL  = 0xC7;    //PL 1,2,3,6,7 as output
     178:	ea e0       	ldi	r30, 0x0A	; 10
     17a:	f1 e0       	ldi	r31, 0x01	; 1
     17c:	87 ec       	ldi	r24, 0xC7	; 199
     17e:	80 83       	st	Z, r24
 PORTL = 0x00;
     180:	eb e0       	ldi	r30, 0x0B	; 11
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	10 82       	st	Z, r1
}
     186:	cf 91       	pop	r28
     188:	df 91       	pop	r29
     18a:	08 95       	ret

0000018c <servo_on>:

//--------------------------------------------------------------------------------
// funcion for all servos on and servos off (relay on/off)
//--------------------------------------------------------------------------------
void servo_on (void)                    
{ PORTD = PORTD | 0x01; }
     18c:	df 93       	push	r29
     18e:	cf 93       	push	r28
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	ab e2       	ldi	r26, 0x2B	; 43
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	eb e2       	ldi	r30, 0x2B	; 43
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	81 60       	ori	r24, 0x01	; 1
     1a0:	8c 93       	st	X, r24
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <servo_off>:

void servo_off (void)                    
{ PORTD = PORTD & 0xFE; }
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
     1b0:	ab e2       	ldi	r26, 0x2B	; 43
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	eb e2       	ldi	r30, 0x2B	; 43
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	8e 7f       	andi	r24, 0xFE	; 254
     1bc:	8c 93       	st	X, r24
     1be:	cf 91       	pop	r28
     1c0:	df 91       	pop	r29
     1c2:	08 95       	ret

000001c4 <reset_1A>:

//--------------------------------------------------------------------------------
// reset & set function of joint 1A,1B..............6C 
//--------------------------------------------------------------------------------
void reset_1A (void)
{ PORTD = PORTD & 0xDF; }
     1c4:	df 93       	push	r29
     1c6:	cf 93       	push	r28
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	ab e2       	ldi	r26, 0x2B	; 43
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	eb e2       	ldi	r30, 0x2B	; 43
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	8f 7d       	andi	r24, 0xDF	; 223
     1d8:	8c 93       	st	X, r24
     1da:	cf 91       	pop	r28
     1dc:	df 91       	pop	r29
     1de:	08 95       	ret

000001e0 <set_1A>:

void set_1A (void)
{ PORTD = PORTD | 0x20; }
     1e0:	df 93       	push	r29
     1e2:	cf 93       	push	r28
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	ab e2       	ldi	r26, 0x2B	; 43
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	eb e2       	ldi	r30, 0x2B	; 43
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	80 62       	ori	r24, 0x20	; 32
     1f4:	8c 93       	st	X, r24
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <reset_1B>:

void reset_1B (void)
{ PORTL = PORTL & 0xFB; }
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	ab e0       	ldi	r26, 0x0B	; 11
     206:	b1 e0       	ldi	r27, 0x01	; 1
     208:	eb e0       	ldi	r30, 0x0B	; 11
     20a:	f1 e0       	ldi	r31, 0x01	; 1
     20c:	80 81       	ld	r24, Z
     20e:	8b 7f       	andi	r24, 0xFB	; 251
     210:	8c 93       	st	X, r24
     212:	cf 91       	pop	r28
     214:	df 91       	pop	r29
     216:	08 95       	ret

00000218 <set_1B>:

void set_1B (void)
{ PORTL = PORTL | 0x04; }
     218:	df 93       	push	r29
     21a:	cf 93       	push	r28
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	ab e0       	ldi	r26, 0x0B	; 11
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	eb e0       	ldi	r30, 0x0B	; 11
     226:	f1 e0       	ldi	r31, 0x01	; 1
     228:	80 81       	ld	r24, Z
     22a:	84 60       	ori	r24, 0x04	; 4
     22c:	8c 93       	st	X, r24
     22e:	cf 91       	pop	r28
     230:	df 91       	pop	r29
     232:	08 95       	ret

00000234 <reset_1C>:

void reset_1C (void)
{ PORTG = PORTG & 0xFD; }
     234:	df 93       	push	r29
     236:	cf 93       	push	r28
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	a4 e3       	ldi	r26, 0x34	; 52
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	e4 e3       	ldi	r30, 0x34	; 52
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	8d 7f       	andi	r24, 0xFD	; 253
     248:	8c 93       	st	X, r24
     24a:	cf 91       	pop	r28
     24c:	df 91       	pop	r29
     24e:	08 95       	ret

00000250 <set_1C>:

void set_1C (void)
{ PORTG = PORTG | 0x02; }
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	a4 e3       	ldi	r26, 0x34	; 52
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	e4 e3       	ldi	r30, 0x34	; 52
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	82 60       	ori	r24, 0x02	; 2
     264:	8c 93       	st	X, r24
     266:	cf 91       	pop	r28
     268:	df 91       	pop	r29
     26a:	08 95       	ret

0000026c <reset_2A>:

void reset_2A (void)
{ PORTL = PORTL & 0xBF; }
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	ab e0       	ldi	r26, 0x0B	; 11
     276:	b1 e0       	ldi	r27, 0x01	; 1
     278:	eb e0       	ldi	r30, 0x0B	; 11
     27a:	f1 e0       	ldi	r31, 0x01	; 1
     27c:	80 81       	ld	r24, Z
     27e:	8f 7b       	andi	r24, 0xBF	; 191
     280:	8c 93       	st	X, r24
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	08 95       	ret

00000288 <set_2A>:

void set_2A (void)
{ PORTL = PORTL | 0x40; }
     288:	df 93       	push	r29
     28a:	cf 93       	push	r28
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	ab e0       	ldi	r26, 0x0B	; 11
     292:	b1 e0       	ldi	r27, 0x01	; 1
     294:	eb e0       	ldi	r30, 0x0B	; 11
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	80 81       	ld	r24, Z
     29a:	80 64       	ori	r24, 0x40	; 64
     29c:	8c 93       	st	X, r24
     29e:	cf 91       	pop	r28
     2a0:	df 91       	pop	r29
     2a2:	08 95       	ret

000002a4 <reset_2B>:

void reset_2B (void)
{ PORTD = PORTD & 0xEF; }
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	ab e2       	ldi	r26, 0x2B	; 43
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	eb e2       	ldi	r30, 0x2B	; 43
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	8f 7e       	andi	r24, 0xEF	; 239
     2b8:	8c 93       	st	X, r24
     2ba:	cf 91       	pop	r28
     2bc:	df 91       	pop	r29
     2be:	08 95       	ret

000002c0 <set_2B>:

void set_2B (void)
{ PORTD = PORTD | 0x10; }
     2c0:	df 93       	push	r29
     2c2:	cf 93       	push	r28
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	ab e2       	ldi	r26, 0x2B	; 43
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	eb e2       	ldi	r30, 0x2B	; 43
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	80 61       	ori	r24, 0x10	; 16
     2d4:	8c 93       	st	X, r24
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	08 95       	ret

000002dc <reset_2C>:

void reset_2C (void)
{ PORTL = PORTL & 0x7F; }
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	ab e0       	ldi	r26, 0x0B	; 11
     2e6:	b1 e0       	ldi	r27, 0x01	; 1
     2e8:	eb e0       	ldi	r30, 0x0B	; 11
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
     2ec:	80 81       	ld	r24, Z
     2ee:	8f 77       	andi	r24, 0x7F	; 127
     2f0:	8c 93       	st	X, r24
     2f2:	cf 91       	pop	r28
     2f4:	df 91       	pop	r29
     2f6:	08 95       	ret

000002f8 <set_2C>:

void set_2C (void)
{ PORTL = PORTL | 0x80; }
     2f8:	df 93       	push	r29
     2fa:	cf 93       	push	r28
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	ab e0       	ldi	r26, 0x0B	; 11
     302:	b1 e0       	ldi	r27, 0x01	; 1
     304:	eb e0       	ldi	r30, 0x0B	; 11
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	80 81       	ld	r24, Z
     30a:	80 68       	ori	r24, 0x80	; 128
     30c:	8c 93       	st	X, r24
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	08 95       	ret

00000314 <reset_3A>:

void reset_3A (void)
{ PORTH = PORTH & 0xBF; }
     314:	df 93       	push	r29
     316:	cf 93       	push	r28
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	a2 e0       	ldi	r26, 0x02	; 2
     31e:	b1 e0       	ldi	r27, 0x01	; 1
     320:	e2 e0       	ldi	r30, 0x02	; 2
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	80 81       	ld	r24, Z
     326:	8f 7b       	andi	r24, 0xBF	; 191
     328:	8c 93       	st	X, r24
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <set_3A>:

void set_3A (void)
{ PORTH = PORTH | 0x40; }
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	a2 e0       	ldi	r26, 0x02	; 2
     33a:	b1 e0       	ldi	r27, 0x01	; 1
     33c:	e2 e0       	ldi	r30, 0x02	; 2
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	80 81       	ld	r24, Z
     342:	80 64       	ori	r24, 0x40	; 64
     344:	8c 93       	st	X, r24
     346:	cf 91       	pop	r28
     348:	df 91       	pop	r29
     34a:	08 95       	ret

0000034c <reset_3B>:

void reset_3B (void)
{ PORTH = PORTH & 0xEF; }
     34c:	df 93       	push	r29
     34e:	cf 93       	push	r28
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	a2 e0       	ldi	r26, 0x02	; 2
     356:	b1 e0       	ldi	r27, 0x01	; 1
     358:	e2 e0       	ldi	r30, 0x02	; 2
     35a:	f1 e0       	ldi	r31, 0x01	; 1
     35c:	80 81       	ld	r24, Z
     35e:	8f 7e       	andi	r24, 0xEF	; 239
     360:	8c 93       	st	X, r24
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <set_3B>:

void set_3B (void)
{ PORTH = PORTH | 0x10; }
     368:	df 93       	push	r29
     36a:	cf 93       	push	r28
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	a2 e0       	ldi	r26, 0x02	; 2
     372:	b1 e0       	ldi	r27, 0x01	; 1
     374:	e2 e0       	ldi	r30, 0x02	; 2
     376:	f1 e0       	ldi	r31, 0x01	; 1
     378:	80 81       	ld	r24, Z
     37a:	80 61       	ori	r24, 0x10	; 16
     37c:	8c 93       	st	X, r24
     37e:	cf 91       	pop	r28
     380:	df 91       	pop	r29
     382:	08 95       	ret

00000384 <reset_3C>:

void reset_3C (void)
{ PORTH = PORTH & 0xDF; }
     384:	df 93       	push	r29
     386:	cf 93       	push	r28
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	a2 e0       	ldi	r26, 0x02	; 2
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	e2 e0       	ldi	r30, 0x02	; 2
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	80 81       	ld	r24, Z
     396:	8f 7d       	andi	r24, 0xDF	; 223
     398:	8c 93       	st	X, r24
     39a:	cf 91       	pop	r28
     39c:	df 91       	pop	r29
     39e:	08 95       	ret

000003a0 <set_3C>:

void set_3C (void)
{ PORTH = PORTH | 0x20; }
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	a2 e0       	ldi	r26, 0x02	; 2
     3aa:	b1 e0       	ldi	r27, 0x01	; 1
     3ac:	e2 e0       	ldi	r30, 0x02	; 2
     3ae:	f1 e0       	ldi	r31, 0x01	; 1
     3b0:	80 81       	ld	r24, Z
     3b2:	80 62       	ori	r24, 0x20	; 32
     3b4:	8c 93       	st	X, r24
     3b6:	cf 91       	pop	r28
     3b8:	df 91       	pop	r29
     3ba:	08 95       	ret

000003bc <reset_4A>:

void reset_4A (void)
{ PORTG = PORTG & 0xFE; }
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	a4 e3       	ldi	r26, 0x34	; 52
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	e4 e3       	ldi	r30, 0x34	; 52
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	8e 7f       	andi	r24, 0xFE	; 254
     3d0:	8c 93       	st	X, r24
     3d2:	cf 91       	pop	r28
     3d4:	df 91       	pop	r29
     3d6:	08 95       	ret

000003d8 <set_4A>:

void set_4A (void)
{ PORTG = PORTG | 0x01; }
     3d8:	df 93       	push	r29
     3da:	cf 93       	push	r28
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	a4 e3       	ldi	r26, 0x34	; 52
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	e4 e3       	ldi	r30, 0x34	; 52
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	81 60       	ori	r24, 0x01	; 1
     3ec:	8c 93       	st	X, r24
     3ee:	cf 91       	pop	r28
     3f0:	df 91       	pop	r29
     3f2:	08 95       	ret

000003f4 <reset_4B>:

void reset_4B (void)
{ PORTD = PORTD & 0x7F; }
     3f4:	df 93       	push	r29
     3f6:	cf 93       	push	r28
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
     3fc:	ab e2       	ldi	r26, 0x2B	; 43
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	eb e2       	ldi	r30, 0x2B	; 43
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	8f 77       	andi	r24, 0x7F	; 127
     408:	8c 93       	st	X, r24
     40a:	cf 91       	pop	r28
     40c:	df 91       	pop	r29
     40e:	08 95       	ret

00000410 <set_4B>:

void set_4B (void)
{ PORTD = PORTD | 0x80; }
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	ab e2       	ldi	r26, 0x2B	; 43
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	eb e2       	ldi	r30, 0x2B	; 43
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	80 68       	ori	r24, 0x80	; 128
     424:	8c 93       	st	X, r24
     426:	cf 91       	pop	r28
     428:	df 91       	pop	r29
     42a:	08 95       	ret

0000042c <reset_4C>:

void reset_4C (void)
{ PORTD = PORTD & 0xBF; }
     42c:	df 93       	push	r29
     42e:	cf 93       	push	r28
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	ab e2       	ldi	r26, 0x2B	; 43
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	eb e2       	ldi	r30, 0x2B	; 43
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	8f 7b       	andi	r24, 0xBF	; 191
     440:	8c 93       	st	X, r24
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <set_4C>:

void set_4C (void)
{ PORTD = PORTD | 0x40; }
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	ab e2       	ldi	r26, 0x2B	; 43
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	eb e2       	ldi	r30, 0x2B	; 43
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	80 64       	ori	r24, 0x40	; 64
     45c:	8c 93       	st	X, r24
     45e:	cf 91       	pop	r28
     460:	df 91       	pop	r29
     462:	08 95       	ret

00000464 <reset_5A>:

void reset_5A (void)
{ PORTJ = PORTJ & 0xDF; }
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	a5 e0       	ldi	r26, 0x05	; 5
     46e:	b1 e0       	ldi	r27, 0x01	; 1
     470:	e5 e0       	ldi	r30, 0x05	; 5
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	80 81       	ld	r24, Z
     476:	8f 7d       	andi	r24, 0xDF	; 223
     478:	8c 93       	st	X, r24
     47a:	cf 91       	pop	r28
     47c:	df 91       	pop	r29
     47e:	08 95       	ret

00000480 <set_5A>:

void set_5A (void)
{ PORTJ = PORTJ | 0x20; }
     480:	df 93       	push	r29
     482:	cf 93       	push	r28
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	a5 e0       	ldi	r26, 0x05	; 5
     48a:	b1 e0       	ldi	r27, 0x01	; 1
     48c:	e5 e0       	ldi	r30, 0x05	; 5
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	80 81       	ld	r24, Z
     492:	80 62       	ori	r24, 0x20	; 32
     494:	8c 93       	st	X, r24
     496:	cf 91       	pop	r28
     498:	df 91       	pop	r29
     49a:	08 95       	ret

0000049c <reset_5B>:

void reset_5B (void)
{ PORTJ = PORTJ & 0xBF; }
     49c:	df 93       	push	r29
     49e:	cf 93       	push	r28
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	a5 e0       	ldi	r26, 0x05	; 5
     4a6:	b1 e0       	ldi	r27, 0x01	; 1
     4a8:	e5 e0       	ldi	r30, 0x05	; 5
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	80 81       	ld	r24, Z
     4ae:	8f 7b       	andi	r24, 0xBF	; 191
     4b0:	8c 93       	st	X, r24
     4b2:	cf 91       	pop	r28
     4b4:	df 91       	pop	r29
     4b6:	08 95       	ret

000004b8 <set_5B>:

void set_5B (void)
{ PORTJ = PORTJ | 0x40; }
     4b8:	df 93       	push	r29
     4ba:	cf 93       	push	r28
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	a5 e0       	ldi	r26, 0x05	; 5
     4c2:	b1 e0       	ldi	r27, 0x01	; 1
     4c4:	e5 e0       	ldi	r30, 0x05	; 5
     4c6:	f1 e0       	ldi	r31, 0x01	; 1
     4c8:	80 81       	ld	r24, Z
     4ca:	80 64       	ori	r24, 0x40	; 64
     4cc:	8c 93       	st	X, r24
     4ce:	cf 91       	pop	r28
     4d0:	df 91       	pop	r29
     4d2:	08 95       	ret

000004d4 <reset_5C>:

void reset_5C (void)
{ PORTJ = PORTJ & 0xEF; }
     4d4:	df 93       	push	r29
     4d6:	cf 93       	push	r28
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	a5 e0       	ldi	r26, 0x05	; 5
     4de:	b1 e0       	ldi	r27, 0x01	; 1
     4e0:	e5 e0       	ldi	r30, 0x05	; 5
     4e2:	f1 e0       	ldi	r31, 0x01	; 1
     4e4:	80 81       	ld	r24, Z
     4e6:	8f 7e       	andi	r24, 0xEF	; 239
     4e8:	8c 93       	st	X, r24
     4ea:	cf 91       	pop	r28
     4ec:	df 91       	pop	r29
     4ee:	08 95       	ret

000004f0 <set_5C>:

void set_5C (void)
{ PORTJ = PORTJ | 0x10; }
     4f0:	df 93       	push	r29
     4f2:	cf 93       	push	r28
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	a5 e0       	ldi	r26, 0x05	; 5
     4fa:	b1 e0       	ldi	r27, 0x01	; 1
     4fc:	e5 e0       	ldi	r30, 0x05	; 5
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	80 81       	ld	r24, Z
     502:	80 61       	ori	r24, 0x10	; 16
     504:	8c 93       	st	X, r24
     506:	cf 91       	pop	r28
     508:	df 91       	pop	r29
     50a:	08 95       	ret

0000050c <reset_6A>:

void reset_6A (void)
{ PORTJ = PORTJ & 0xF7; }
     50c:	df 93       	push	r29
     50e:	cf 93       	push	r28
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	a5 e0       	ldi	r26, 0x05	; 5
     516:	b1 e0       	ldi	r27, 0x01	; 1
     518:	e5 e0       	ldi	r30, 0x05	; 5
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	80 81       	ld	r24, Z
     51e:	87 7f       	andi	r24, 0xF7	; 247
     520:	8c 93       	st	X, r24
     522:	cf 91       	pop	r28
     524:	df 91       	pop	r29
     526:	08 95       	ret

00000528 <set_6A>:

void set_6A (void)
{ PORTJ = PORTJ | 0x08; }
     528:	df 93       	push	r29
     52a:	cf 93       	push	r28
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	a5 e0       	ldi	r26, 0x05	; 5
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	e5 e0       	ldi	r30, 0x05	; 5
     536:	f1 e0       	ldi	r31, 0x01	; 1
     538:	80 81       	ld	r24, Z
     53a:	88 60       	ori	r24, 0x08	; 8
     53c:	8c 93       	st	X, r24
     53e:	cf 91       	pop	r28
     540:	df 91       	pop	r29
     542:	08 95       	ret

00000544 <reset_6B>:

void reset_6B (void)
{ PORTJ = PORTJ & 0xFD; }
     544:	df 93       	push	r29
     546:	cf 93       	push	r28
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	a5 e0       	ldi	r26, 0x05	; 5
     54e:	b1 e0       	ldi	r27, 0x01	; 1
     550:	e5 e0       	ldi	r30, 0x05	; 5
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	80 81       	ld	r24, Z
     556:	8d 7f       	andi	r24, 0xFD	; 253
     558:	8c 93       	st	X, r24
     55a:	cf 91       	pop	r28
     55c:	df 91       	pop	r29
     55e:	08 95       	ret

00000560 <set_6B>:

void set_6B (void)
{ PORTJ = PORTJ | 0x02; }
     560:	df 93       	push	r29
     562:	cf 93       	push	r28
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	a5 e0       	ldi	r26, 0x05	; 5
     56a:	b1 e0       	ldi	r27, 0x01	; 1
     56c:	e5 e0       	ldi	r30, 0x05	; 5
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	80 81       	ld	r24, Z
     572:	82 60       	ori	r24, 0x02	; 2
     574:	8c 93       	st	X, r24
     576:	cf 91       	pop	r28
     578:	df 91       	pop	r29
     57a:	08 95       	ret

0000057c <reset_6C>:

void reset_6C (void)
{ PORTJ = PORTJ & 0xFB; }
     57c:	df 93       	push	r29
     57e:	cf 93       	push	r28
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	a5 e0       	ldi	r26, 0x05	; 5
     586:	b1 e0       	ldi	r27, 0x01	; 1
     588:	e5 e0       	ldi	r30, 0x05	; 5
     58a:	f1 e0       	ldi	r31, 0x01	; 1
     58c:	80 81       	ld	r24, Z
     58e:	8b 7f       	andi	r24, 0xFB	; 251
     590:	8c 93       	st	X, r24
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	08 95       	ret

00000598 <set_6C>:

void set_6C (void)
{ PORTJ = PORTJ | 0x04; }
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	a5 e0       	ldi	r26, 0x05	; 5
     5a2:	b1 e0       	ldi	r27, 0x01	; 1
     5a4:	e5 e0       	ldi	r30, 0x05	; 5
     5a6:	f1 e0       	ldi	r31, 0x01	; 1
     5a8:	80 81       	ld	r24, Z
     5aa:	84 60       	ori	r24, 0x04	; 4
     5ac:	8c 93       	st	X, r24
     5ae:	cf 91       	pop	r28
     5b0:	df 91       	pop	r29
     5b2:	08 95       	ret

000005b4 <timer1_init>:
// WGM: 0) Normal, TOP=0xFFFF
// desired value: 400Hz
// actual value: 400.007Hz (0.0%)
//--------------------------------------------------------------------------------
void timer1_init(void)
{
     5b4:	df 93       	push	r29
     5b6:	cf 93       	push	r28
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
     5bc:	e1 e8       	ldi	r30, 0x81	; 129
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	10 82       	st	Z, r1
 TCNT1H = 0x70; //setup
     5c2:	e5 e8       	ldi	r30, 0x85	; 133
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 e7       	ldi	r24, 0x70	; 112
     5c8:	80 83       	st	Z, r24
 TCNT1L = 0x01;
     5ca:	e4 e8       	ldi	r30, 0x84	; 132
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	80 83       	st	Z, r24
 OCR1AH = 0x8F;
     5d2:	e9 e8       	ldi	r30, 0x89	; 137
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	8f e8       	ldi	r24, 0x8F	; 143
     5d8:	80 83       	st	Z, r24
 OCR1AL = 0xFF;
     5da:	e8 e8       	ldi	r30, 0x88	; 136
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	80 83       	st	Z, r24
 OCR1BH = 0x8F;
     5e2:	eb e8       	ldi	r30, 0x8B	; 139
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	8f e8       	ldi	r24, 0x8F	; 143
     5e8:	80 83       	st	Z, r24
 OCR1BL = 0xFF;
     5ea:	ea e8       	ldi	r30, 0x8A	; 138
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	8f ef       	ldi	r24, 0xFF	; 255
     5f0:	80 83       	st	Z, r24
 OCR1CH = 0x00;
     5f2:	ed e8       	ldi	r30, 0x8D	; 141
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	10 82       	st	Z, r1
 OCR1CL = 0x00;
     5f8:	ec e8       	ldi	r30, 0x8C	; 140
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	10 82       	st	Z, r1
 ICR1H  = 0x8F;
     5fe:	e7 e8       	ldi	r30, 0x87	; 135
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	8f e8       	ldi	r24, 0x8F	; 143
     604:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
     606:	e6 e8       	ldi	r30, 0x86	; 134
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	80 83       	st	Z, r24
 TCCR1A = 0x00;
     60e:	e0 e8       	ldi	r30, 0x80	; 128
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	10 82       	st	Z, r1
 TCCR1C = 0x00;
     614:	e2 e8       	ldi	r30, 0x82	; 130
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	10 82       	st	Z, r1
 TCCR1B = 0x01; //start Timer
     61a:	e1 e8       	ldi	r30, 0x81	; 129
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 83       	st	Z, r24
}
     622:	cf 91       	pop	r28
     624:	df 91       	pop	r29
     626:	08 95       	ret

00000628 <__vector_17>:
//--------------------------------------------------------------------------------
// timer1 comparatorA match with timer register ISR,
// This ISR used for reset A-joints of individual arm. 
//--------------------------------------------------------------------------------
ISR(TIMER1_COMPA_vect)
{
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	00 90 5b 00 	lds	r0, 0x005B
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	ef 93       	push	r30
     64e:	ff 93       	push	r31
     650:	df 93       	push	r29
     652:	cf 93       	push	r28
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
 //compare occured TCNT1=OCR1A
 if (arm_number == 0) { reset_1A(); }
     658:	80 91 08 02 	lds	r24, 0x0208
     65c:	88 23       	and	r24, r24
     65e:	11 f4       	brne	.+4      	; 0x664 <__vector_17+0x3c>
     660:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <reset_1A>
 if (arm_number == 1) { reset_2A(); }
     664:	80 91 08 02 	lds	r24, 0x0208
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	11 f4       	brne	.+4      	; 0x670 <__vector_17+0x48>
     66c:	0e 94 36 01 	call	0x26c	; 0x26c <reset_2A>
 if (arm_number == 2) { reset_3A(); }
     670:	80 91 08 02 	lds	r24, 0x0208
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	11 f4       	brne	.+4      	; 0x67c <__vector_17+0x54>
     678:	0e 94 8a 01 	call	0x314	; 0x314 <reset_3A>
 if (arm_number == 3) { reset_4A(); }
     67c:	80 91 08 02 	lds	r24, 0x0208
     680:	83 30       	cpi	r24, 0x03	; 3
     682:	11 f4       	brne	.+4      	; 0x688 <__vector_17+0x60>
     684:	0e 94 de 01 	call	0x3bc	; 0x3bc <reset_4A>
 if (arm_number == 4) { reset_5A(); }
     688:	80 91 08 02 	lds	r24, 0x0208
     68c:	84 30       	cpi	r24, 0x04	; 4
     68e:	11 f4       	brne	.+4      	; 0x694 <__vector_17+0x6c>
     690:	0e 94 32 02 	call	0x464	; 0x464 <reset_5A>
 if (arm_number == 5) { reset_6A(); }
     694:	80 91 08 02 	lds	r24, 0x0208
     698:	85 30       	cpi	r24, 0x05	; 5
     69a:	11 f4       	brne	.+4      	; 0x6a0 <__vector_17+0x78>
     69c:	0e 94 86 02 	call	0x50c	; 0x50c <reset_6A>
}
     6a0:	cf 91       	pop	r28
     6a2:	df 91       	pop	r29
     6a4:	ff 91       	pop	r31
     6a6:	ef 91       	pop	r30
     6a8:	bf 91       	pop	r27
     6aa:	af 91       	pop	r26
     6ac:	9f 91       	pop	r25
     6ae:	8f 91       	pop	r24
     6b0:	7f 91       	pop	r23
     6b2:	6f 91       	pop	r22
     6b4:	5f 91       	pop	r21
     6b6:	4f 91       	pop	r20
     6b8:	3f 91       	pop	r19
     6ba:	2f 91       	pop	r18
     6bc:	0f 90       	pop	r0
     6be:	00 92 5b 00 	sts	0x005B, r0
     6c2:	0f 90       	pop	r0
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0f 90       	pop	r0
     6c8:	1f 90       	pop	r1
     6ca:	18 95       	reti

000006cc <__vector_18>:
//--------------------------------------------------------------------------------
// timer1 comparatorB match with timer register ISR,
// This ISR used for reset B-joints of individual arm.
//--------------------------------------------------------------------------------
ISR(TIMER1_COMPB_vect)
{
     6cc:	1f 92       	push	r1
     6ce:	0f 92       	push	r0
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	0f 92       	push	r0
     6d4:	00 90 5b 00 	lds	r0, 0x005B
     6d8:	0f 92       	push	r0
     6da:	11 24       	eor	r1, r1
     6dc:	2f 93       	push	r18
     6de:	3f 93       	push	r19
     6e0:	4f 93       	push	r20
     6e2:	5f 93       	push	r21
     6e4:	6f 93       	push	r22
     6e6:	7f 93       	push	r23
     6e8:	8f 93       	push	r24
     6ea:	9f 93       	push	r25
     6ec:	af 93       	push	r26
     6ee:	bf 93       	push	r27
     6f0:	ef 93       	push	r30
     6f2:	ff 93       	push	r31
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
 //compare occured TCNT1=OCR1B
 if (arm_number == 0) { reset_1B(); }
     6fc:	80 91 08 02 	lds	r24, 0x0208
     700:	88 23       	and	r24, r24
     702:	11 f4       	brne	.+4      	; 0x708 <__vector_18+0x3c>
     704:	0e 94 fe 00 	call	0x1fc	; 0x1fc <reset_1B>
 if (arm_number == 1) { reset_2B(); }
     708:	80 91 08 02 	lds	r24, 0x0208
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	11 f4       	brne	.+4      	; 0x714 <__vector_18+0x48>
     710:	0e 94 52 01 	call	0x2a4	; 0x2a4 <reset_2B>
 if (arm_number == 2) { reset_3B(); }
     714:	80 91 08 02 	lds	r24, 0x0208
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	11 f4       	brne	.+4      	; 0x720 <__vector_18+0x54>
     71c:	0e 94 a6 01 	call	0x34c	; 0x34c <reset_3B>
 if (arm_number == 3) { reset_4B(); }
     720:	80 91 08 02 	lds	r24, 0x0208
     724:	83 30       	cpi	r24, 0x03	; 3
     726:	11 f4       	brne	.+4      	; 0x72c <__vector_18+0x60>
     728:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <reset_4B>
 if (arm_number == 4) { reset_5B(); }
     72c:	80 91 08 02 	lds	r24, 0x0208
     730:	84 30       	cpi	r24, 0x04	; 4
     732:	11 f4       	brne	.+4      	; 0x738 <__vector_18+0x6c>
     734:	0e 94 4e 02 	call	0x49c	; 0x49c <reset_5B>
 if (arm_number == 5) { reset_6B(); }
     738:	80 91 08 02 	lds	r24, 0x0208
     73c:	85 30       	cpi	r24, 0x05	; 5
     73e:	11 f4       	brne	.+4      	; 0x744 <__vector_18+0x78>
     740:	0e 94 a2 02 	call	0x544	; 0x544 <reset_6B>
}
     744:	cf 91       	pop	r28
     746:	df 91       	pop	r29
     748:	ff 91       	pop	r31
     74a:	ef 91       	pop	r30
     74c:	bf 91       	pop	r27
     74e:	af 91       	pop	r26
     750:	9f 91       	pop	r25
     752:	8f 91       	pop	r24
     754:	7f 91       	pop	r23
     756:	6f 91       	pop	r22
     758:	5f 91       	pop	r21
     75a:	4f 91       	pop	r20
     75c:	3f 91       	pop	r19
     75e:	2f 91       	pop	r18
     760:	0f 90       	pop	r0
     762:	00 92 5b 00 	sts	0x005B, r0
     766:	0f 90       	pop	r0
     768:	0f be       	out	0x3f, r0	; 63
     76a:	0f 90       	pop	r0
     76c:	1f 90       	pop	r1
     76e:	18 95       	reti

00000770 <__vector_19>:
//--------------------------------------------------------------------------------
// timer1 comparatorA match with timer register ISR,
// This ISR used for reset C-joints of indivisual arm. 
//--------------------------------------------------------------------------------
ISR(TIMER1_COMPC_vect)
{
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	00 90 5b 00 	lds	r0, 0x005B
     77c:	0f 92       	push	r0
     77e:	11 24       	eor	r1, r1
     780:	2f 93       	push	r18
     782:	3f 93       	push	r19
     784:	4f 93       	push	r20
     786:	5f 93       	push	r21
     788:	6f 93       	push	r22
     78a:	7f 93       	push	r23
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
     790:	af 93       	push	r26
     792:	bf 93       	push	r27
     794:	ef 93       	push	r30
     796:	ff 93       	push	r31
     798:	df 93       	push	r29
     79a:	cf 93       	push	r28
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
 //compare occured TCNT1=OCR1c
 if (arm_number == 0) { reset_1C(); }
     7a0:	80 91 08 02 	lds	r24, 0x0208
     7a4:	88 23       	and	r24, r24
     7a6:	11 f4       	brne	.+4      	; 0x7ac <__vector_19+0x3c>
     7a8:	0e 94 1a 01 	call	0x234	; 0x234 <reset_1C>
 if (arm_number == 1) { reset_2C(); }
     7ac:	80 91 08 02 	lds	r24, 0x0208
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	11 f4       	brne	.+4      	; 0x7b8 <__vector_19+0x48>
     7b4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <reset_2C>
 if (arm_number == 2) { reset_3C(); }
     7b8:	80 91 08 02 	lds	r24, 0x0208
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	11 f4       	brne	.+4      	; 0x7c4 <__vector_19+0x54>
     7c0:	0e 94 c2 01 	call	0x384	; 0x384 <reset_3C>
 if (arm_number == 3) { reset_4C(); }
     7c4:	80 91 08 02 	lds	r24, 0x0208
     7c8:	83 30       	cpi	r24, 0x03	; 3
     7ca:	11 f4       	brne	.+4      	; 0x7d0 <__vector_19+0x60>
     7cc:	0e 94 16 02 	call	0x42c	; 0x42c <reset_4C>
 if (arm_number == 4) { reset_5C(); }
     7d0:	80 91 08 02 	lds	r24, 0x0208
     7d4:	84 30       	cpi	r24, 0x04	; 4
     7d6:	11 f4       	brne	.+4      	; 0x7dc <__vector_19+0x6c>
     7d8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <reset_5C>
 if (arm_number == 5) { reset_6C(); }
     7dc:	80 91 08 02 	lds	r24, 0x0208
     7e0:	85 30       	cpi	r24, 0x05	; 5
     7e2:	11 f4       	brne	.+4      	; 0x7e8 <__vector_19+0x78>
     7e4:	0e 94 be 02 	call	0x57c	; 0x57c <reset_6C>
}
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	0f 90       	pop	r0
     806:	00 92 5b 00 	sts	0x005B, r0
     80a:	0f 90       	pop	r0
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	0f 90       	pop	r0
     810:	1f 90       	pop	r1
     812:	18 95       	reti

00000814 <__vector_20>:
// This ISR can be used to load the PWM value. Here each Servo motor is
// move between 0 to 180 degrees proportional to the pulse ON time between 
// 0.5 to 2.2 ms with the frequency between 40 to 60 Hz. ie. 400Hz/8 = 50Hz
//--------------------------------------------------------------------------------
ISR(TIMER1_OVF_vect)
{
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	00 90 5b 00 	lds	r0, 0x005B
     820:	0f 92       	push	r0
     822:	11 24       	eor	r1, r1
     824:	2f 93       	push	r18
     826:	3f 93       	push	r19
     828:	4f 93       	push	r20
     82a:	5f 93       	push	r21
     82c:	6f 93       	push	r22
     82e:	7f 93       	push	r23
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	af 93       	push	r26
     836:	bf 93       	push	r27
     838:	ef 93       	push	r30
     83a:	ff 93       	push	r31
     83c:	df 93       	push	r29
     83e:	cf 93       	push	r28
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
 //TIMER1 has overflowed
 TCNT1H = 0x70; //reload counter high value
     844:	e5 e8       	ldi	r30, 0x85	; 133
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 e7       	ldi	r24, 0x70	; 112
     84a:	80 83       	st	Z, r24
 TCNT1L = 0x01; //reload counter low value
     84c:	e4 e8       	ldi	r30, 0x84	; 132
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 83       	st	Z, r24
 arm_number ++;
     854:	80 91 08 02 	lds	r24, 0x0208
     858:	8f 5f       	subi	r24, 0xFF	; 255
     85a:	80 93 08 02 	sts	0x0208, r24

 if (arm_number>7)
     85e:	80 91 08 02 	lds	r24, 0x0208
     862:	88 30       	cpi	r24, 0x08	; 8
     864:	10 f0       	brcs	.+4      	; 0x86a <__vector_20+0x56>
 {
  	arm_number = 0;
     866:	10 92 08 02 	sts	0x0208, r1
 }
   
 if (arm_number == 0)
     86a:	80 91 08 02 	lds	r24, 0x0208
     86e:	88 23       	and	r24, r24
     870:	21 f5       	brne	.+72     	; 0x8ba <__vector_20+0xa6>
 {
  set_1A(); 
     872:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <set_1A>
  set_1B(); 
     876:	0e 94 0c 01 	call	0x218	; 0x218 <set_1B>
  set_1C();
     87a:	0e 94 28 01 	call	0x250	; 0x250 <set_1C>
  OCR1AH = angle_upper_byte_1A;
     87e:	e9 e8       	ldi	r30, 0x89	; 137
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 91 12 02 	lds	r24, 0x0212
     886:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_1A;
     888:	e8 e8       	ldi	r30, 0x88	; 136
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 91 20 02 	lds	r24, 0x0220
     890:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_1B;
     892:	eb e8       	ldi	r30, 0x8B	; 139
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 91 28 02 	lds	r24, 0x0228
     89a:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_1B;
     89c:	ea e8       	ldi	r30, 0x8A	; 138
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 91 1b 02 	lds	r24, 0x021B
     8a4:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_1C;
     8a6:	ed e8       	ldi	r30, 0x8D	; 141
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 91 23 02 	lds	r24, 0x0223
     8ae:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_1C;
     8b0:	ec e8       	ldi	r30, 0x8C	; 140
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 91 2c 02 	lds	r24, 0x022C
     8b8:	80 83       	st	Z, r24
 }
 
 if (arm_number == 1)
     8ba:	80 91 08 02 	lds	r24, 0x0208
     8be:	81 30       	cpi	r24, 0x01	; 1
     8c0:	21 f5       	brne	.+72     	; 0x90a <__vector_20+0xf6>
 {
  set_2A(); 
     8c2:	0e 94 44 01 	call	0x288	; 0x288 <set_2A>
  set_2B(); 
     8c6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_2B>
  set_2C();
     8ca:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <set_2C>
  OCR1AH = angle_upper_byte_2A;
     8ce:	e9 e8       	ldi	r30, 0x89	; 137
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 91 27 02 	lds	r24, 0x0227
     8d6:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_2A;
     8d8:	e8 e8       	ldi	r30, 0x88	; 136
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 91 0e 02 	lds	r24, 0x020E
     8e0:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_2B;
     8e2:	eb e8       	ldi	r30, 0x8B	; 139
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 91 10 02 	lds	r24, 0x0210
     8ea:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_2B;
     8ec:	ea e8       	ldi	r30, 0x8A	; 138
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 91 1c 02 	lds	r24, 0x021C
     8f4:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_2C;
     8f6:	ed e8       	ldi	r30, 0x8D	; 141
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 91 21 02 	lds	r24, 0x0221
     8fe:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_2C;
     900:	ec e8       	ldi	r30, 0x8C	; 140
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 91 2e 02 	lds	r24, 0x022E
     908:	80 83       	st	Z, r24
 }
 
 if (arm_number == 2)
     90a:	80 91 08 02 	lds	r24, 0x0208
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	21 f5       	brne	.+72     	; 0x95a <__vector_20+0x146>
 {
  set_3A(); 
     912:	0e 94 98 01 	call	0x330	; 0x330 <set_3A>
  set_3B(); 
     916:	0e 94 b4 01 	call	0x368	; 0x368 <set_3B>
  set_3C();
     91a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <set_3C>
  OCR1AH = angle_upper_byte_3A;
     91e:	e9 e8       	ldi	r30, 0x89	; 137
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 91 26 02 	lds	r24, 0x0226
     926:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_3A;
     928:	e8 e8       	ldi	r30, 0x88	; 136
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 91 17 02 	lds	r24, 0x0217
     930:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_3B;
     932:	eb e8       	ldi	r30, 0x8B	; 139
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 91 11 02 	lds	r24, 0x0211
     93a:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_3B;
     93c:	ea e8       	ldi	r30, 0x8A	; 138
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 91 0d 02 	lds	r24, 0x020D
     944:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_3C;
     946:	ed e8       	ldi	r30, 0x8D	; 141
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 91 13 02 	lds	r24, 0x0213
     94e:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_3C;
     950:	ec e8       	ldi	r30, 0x8C	; 140
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 91 30 02 	lds	r24, 0x0230
     958:	80 83       	st	Z, r24
 }
 
 if (arm_number == 3)
     95a:	80 91 08 02 	lds	r24, 0x0208
     95e:	83 30       	cpi	r24, 0x03	; 3
     960:	21 f5       	brne	.+72     	; 0x9aa <__vector_20+0x196>
 {
  set_4A(); 
     962:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <set_4A>
  set_4B(); 
     966:	0e 94 08 02 	call	0x410	; 0x410 <set_4B>
  set_4C();
     96a:	0e 94 24 02 	call	0x448	; 0x448 <set_4C>
  OCR1AH = angle_upper_byte_4A;
     96e:	e9 e8       	ldi	r30, 0x89	; 137
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 91 29 02 	lds	r24, 0x0229
     976:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_4A;
     978:	e8 e8       	ldi	r30, 0x88	; 136
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 91 19 02 	lds	r24, 0x0219
     980:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_4B;
     982:	eb e8       	ldi	r30, 0x8B	; 139
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 91 24 02 	lds	r24, 0x0224
     98a:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_4B;
     98c:	ea e8       	ldi	r30, 0x8A	; 138
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 91 2f 02 	lds	r24, 0x022F
     994:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_4C;
     996:	ed e8       	ldi	r30, 0x8D	; 141
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 91 2d 02 	lds	r24, 0x022D
     99e:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_4C;
     9a0:	ec e8       	ldi	r30, 0x8C	; 140
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 91 22 02 	lds	r24, 0x0222
     9a8:	80 83       	st	Z, r24
 }
 
 if (arm_number == 4)
     9aa:	80 91 08 02 	lds	r24, 0x0208
     9ae:	84 30       	cpi	r24, 0x04	; 4
     9b0:	21 f5       	brne	.+72     	; 0x9fa <__vector_20+0x1e6>
 {
  set_5A(); 
     9b2:	0e 94 40 02 	call	0x480	; 0x480 <set_5A>
  set_5B(); 
     9b6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <set_5B>
  set_5C();
     9ba:	0e 94 78 02 	call	0x4f0	; 0x4f0 <set_5C>
  OCR1AH = angle_upper_byte_5A;
     9be:	e9 e8       	ldi	r30, 0x89	; 137
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 91 0f 02 	lds	r24, 0x020F
     9c6:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_5A;
     9c8:	e8 e8       	ldi	r30, 0x88	; 136
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 91 2b 02 	lds	r24, 0x022B
     9d0:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_5B;
     9d2:	eb e8       	ldi	r30, 0x8B	; 139
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 91 15 02 	lds	r24, 0x0215
     9da:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_5B;
     9dc:	ea e8       	ldi	r30, 0x8A	; 138
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 91 18 02 	lds	r24, 0x0218
     9e4:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_5C;
     9e6:	ed e8       	ldi	r30, 0x8D	; 141
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 91 25 02 	lds	r24, 0x0225
     9ee:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_5C;
     9f0:	ec e8       	ldi	r30, 0x8C	; 140
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 91 1f 02 	lds	r24, 0x021F
     9f8:	80 83       	st	Z, r24
 }
 
 if (arm_number == 5)
     9fa:	80 91 08 02 	lds	r24, 0x0208
     9fe:	85 30       	cpi	r24, 0x05	; 5
     a00:	21 f5       	brne	.+72     	; 0xa4a <__vector_20+0x236>
 {
  set_6A(); 
     a02:	0e 94 94 02 	call	0x528	; 0x528 <set_6A>
  set_6B(); 
     a06:	0e 94 b0 02 	call	0x560	; 0x560 <set_6B>
  set_6C();
     a0a:	0e 94 cc 02 	call	0x598	; 0x598 <set_6C>
  OCR1AH = angle_upper_byte_6A;
     a0e:	e9 e8       	ldi	r30, 0x89	; 137
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 91 1d 02 	lds	r24, 0x021D
     a16:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_6A;
     a18:	e8 e8       	ldi	r30, 0x88	; 136
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 91 1e 02 	lds	r24, 0x021E
     a20:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_6B;
     a22:	eb e8       	ldi	r30, 0x8B	; 139
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 91 14 02 	lds	r24, 0x0214
     a2a:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_6B;
     a2c:	ea e8       	ldi	r30, 0x8A	; 138
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 91 16 02 	lds	r24, 0x0216
     a34:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_6C;
     a36:	ed e8       	ldi	r30, 0x8D	; 141
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 91 1a 02 	lds	r24, 0x021A
     a3e:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_6C;
     a40:	ec e8       	ldi	r30, 0x8C	; 140
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 91 2a 02 	lds	r24, 0x022A
     a48:	80 83       	st	Z, r24
 }
 
}
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	00 92 5b 00 	sts	0x005B, r0
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	1f 90       	pop	r1
     a74:	18 95       	reti

00000a76 <angle_value_calculation>:

//--------------------------------------------------------------------------------
// function for angular movement calculation
//--------------------------------------------------------------------------------
void angle_value_calculation (void)
{
     a76:	df 93       	push	r29
     a78:	cf 93       	push	r28
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <angle_value_calculation+0x6>
     a7c:	0f 92       	push	r0
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
 unsigned int angle_value = 0;
     a82:	1c 82       	std	Y+4, r1	; 0x04
     a84:	1b 82       	std	Y+3, r1	; 0x03
 unsigned int temp = 0;
     a86:	1a 82       	std	Y+2, r1	; 0x02
     a88:	19 82       	std	Y+1, r1	; 0x01
 if (degree > 180)
     a8a:	80 91 0b 02 	lds	r24, 0x020B
     a8e:	85 3b       	cpi	r24, 0xB5	; 181
     a90:	18 f0       	brcs	.+6      	; 0xa98 <angle_value_calculation+0x22>
 degree = 180; // limiting the scope of the servo rotation
     a92:	84 eb       	ldi	r24, 0xB4	; 180
     a94:	80 93 0b 02 	sts	0x020B, r24
 
 angle_value = 0x8FAE + (139 * (unsigned char) degree); //actual constant is 139.4
     a98:	80 91 0b 02 	lds	r24, 0x020B
     a9c:	28 2f       	mov	r18, r24
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	8b e8       	ldi	r24, 0x8B	; 139
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	ac 01       	movw	r20, r24
     aa6:	24 9f       	mul	r18, r20
     aa8:	c0 01       	movw	r24, r0
     aaa:	25 9f       	mul	r18, r21
     aac:	90 0d       	add	r25, r0
     aae:	34 9f       	mul	r19, r20
     ab0:	90 0d       	add	r25, r0
     ab2:	11 24       	eor	r1, r1
     ab4:	82 55       	subi	r24, 0x52	; 82
     ab6:	90 47       	sbci	r25, 0x70	; 112
     ab8:	9c 83       	std	Y+4, r25	; 0x04
     aba:	8b 83       	std	Y+3, r24	; 0x03
 angle_lower_byte = (unsigned char) angle_value;        //separating the lower byte
     abc:	8b 81       	ldd	r24, Y+3	; 0x03
     abe:	80 93 0a 02 	sts	0x020A, r24
 
 temp = angle_value >> 8;
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	89 2f       	mov	r24, r25
     ac8:	99 27       	eor	r25, r25
     aca:	9a 83       	std	Y+2, r25	; 0x02
     acc:	89 83       	std	Y+1, r24	; 0x01
 angle_upper_byte = (unsigned char) temp;               //separating the upper byte
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	80 93 09 02 	sts	0x0209, r24
}
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	cf 91       	pop	r28
     ade:	df 91       	pop	r29
     ae0:	08 95       	ret

00000ae2 <angle_1A>:
//--------------------------------------------------------------------------------
// Function for individual 1A,1B..........6C joints angle calculation call & 
// store into respective variables. 
//--------------------------------------------------------------------------------
void angle_1A (unsigned char angle)                // joint-A of arm 1
{
     ae2:	df 93       	push	r29
     ae4:	cf 93       	push	r28
     ae6:	0f 92       	push	r0
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     af4:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_1A = angle_upper_byte;
     af8:	80 91 09 02 	lds	r24, 0x0209
     afc:	80 93 12 02 	sts	0x0212, r24
 angle_lower_byte_1A = angle_lower_byte;
     b00:	80 91 0a 02 	lds	r24, 0x020A
     b04:	80 93 20 02 	sts	0x0220, r24
}
     b08:	0f 90       	pop	r0
     b0a:	cf 91       	pop	r28
     b0c:	df 91       	pop	r29
     b0e:	08 95       	ret

00000b10 <angle_1B>:

void angle_1B (unsigned char angle)                // joint-B of arm 1
{
     b10:	df 93       	push	r29
     b12:	cf 93       	push	r28
     b14:	0f 92       	push	r0
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     b22:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_1B = angle_upper_byte;
     b26:	80 91 09 02 	lds	r24, 0x0209
     b2a:	80 93 28 02 	sts	0x0228, r24
 angle_lower_byte_1B = angle_lower_byte;
     b2e:	80 91 0a 02 	lds	r24, 0x020A
     b32:	80 93 1b 02 	sts	0x021B, r24
}
     b36:	0f 90       	pop	r0
     b38:	cf 91       	pop	r28
     b3a:	df 91       	pop	r29
     b3c:	08 95       	ret

00000b3e <angle_1C>:

void angle_1C (unsigned char angle)                // joint-C of arm 1
{
     b3e:	df 93       	push	r29
     b40:	cf 93       	push	r28
     b42:	0f 92       	push	r0
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
     b48:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     b50:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_1C = angle_upper_byte;
     b54:	80 91 09 02 	lds	r24, 0x0209
     b58:	80 93 23 02 	sts	0x0223, r24
 angle_lower_byte_1C = angle_lower_byte;
     b5c:	80 91 0a 02 	lds	r24, 0x020A
     b60:	80 93 2c 02 	sts	0x022C, r24
}
     b64:	0f 90       	pop	r0
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	08 95       	ret

00000b6c <angle_2A>:

void angle_2A (unsigned char angle)                // joint-A of arm 2
{
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	0f 92       	push	r0
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     b7e:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_2A = angle_upper_byte;
     b82:	80 91 09 02 	lds	r24, 0x0209
     b86:	80 93 27 02 	sts	0x0227, r24
 angle_lower_byte_2A = angle_lower_byte;
     b8a:	80 91 0a 02 	lds	r24, 0x020A
     b8e:	80 93 0e 02 	sts	0x020E, r24
}
     b92:	0f 90       	pop	r0
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <angle_2B>:

void angle_2B (unsigned char angle)                // joint-B of arm 2
{
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	0f 92       	push	r0
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     bac:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_2B = angle_upper_byte;
     bb0:	80 91 09 02 	lds	r24, 0x0209
     bb4:	80 93 10 02 	sts	0x0210, r24
 angle_lower_byte_2B = angle_lower_byte;
     bb8:	80 91 0a 02 	lds	r24, 0x020A
     bbc:	80 93 1c 02 	sts	0x021C, r24
}
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <angle_2C>:

void angle_2C (unsigned char angle)                // joint-C of arm 2
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     bda:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_2C = angle_upper_byte;
     bde:	80 91 09 02 	lds	r24, 0x0209
     be2:	80 93 21 02 	sts	0x0221, r24
 angle_lower_byte_2C = angle_lower_byte;
     be6:	80 91 0a 02 	lds	r24, 0x020A
     bea:	80 93 2e 02 	sts	0x022E, r24
}
     bee:	0f 90       	pop	r0
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <angle_3A>:

void angle_3A (unsigned char angle)                // joint-A of arm 3
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	0f 92       	push	r0
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     c08:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_3A = angle_upper_byte;
     c0c:	80 91 09 02 	lds	r24, 0x0209
     c10:	80 93 26 02 	sts	0x0226, r24
 angle_lower_byte_3A = angle_lower_byte;
     c14:	80 91 0a 02 	lds	r24, 0x020A
     c18:	80 93 17 02 	sts	0x0217, r24
}
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <angle_3B>:

void angle_3B (unsigned char angle)                // joint-B of arm 3
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	0f 92       	push	r0
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     c36:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_3B = angle_upper_byte;
     c3a:	80 91 09 02 	lds	r24, 0x0209
     c3e:	80 93 11 02 	sts	0x0211, r24
 angle_lower_byte_3B = angle_lower_byte;
     c42:	80 91 0a 02 	lds	r24, 0x020A
     c46:	80 93 0d 02 	sts	0x020D, r24
}
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <angle_3C>:

void angle_3C (unsigned char angle)                // joint-C of arm 3
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	0f 92       	push	r0
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     c64:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_3C = angle_upper_byte;
     c68:	80 91 09 02 	lds	r24, 0x0209
     c6c:	80 93 13 02 	sts	0x0213, r24
 angle_lower_byte_3C = angle_lower_byte;
     c70:	80 91 0a 02 	lds	r24, 0x020A
     c74:	80 93 30 02 	sts	0x0230, r24
}
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <angle_4A>:

void angle_4A (unsigned char angle)                // joint-A of arm 4
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	0f 92       	push	r0
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     c92:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_4A = angle_upper_byte;
     c96:	80 91 09 02 	lds	r24, 0x0209
     c9a:	80 93 29 02 	sts	0x0229, r24
 angle_lower_byte_4A = angle_lower_byte;
     c9e:	80 91 0a 02 	lds	r24, 0x020A
     ca2:	80 93 19 02 	sts	0x0219, r24
}
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <angle_4B>:

void angle_4B (unsigned char angle)                // joint-B of arm 4
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	0f 92       	push	r0
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     cc0:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_4B = angle_upper_byte;
     cc4:	80 91 09 02 	lds	r24, 0x0209
     cc8:	80 93 24 02 	sts	0x0224, r24
 angle_lower_byte_4B = angle_lower_byte;
     ccc:	80 91 0a 02 	lds	r24, 0x020A
     cd0:	80 93 2f 02 	sts	0x022F, r24
}
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <angle_4C>:

void angle_4C (unsigned char angle)                // joint-C of arm 4
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	0f 92       	push	r0
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     cee:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_4C = angle_upper_byte;
     cf2:	80 91 09 02 	lds	r24, 0x0209
     cf6:	80 93 2d 02 	sts	0x022D, r24
 angle_lower_byte_4C = angle_lower_byte;
     cfa:	80 91 0a 02 	lds	r24, 0x020A
     cfe:	80 93 22 02 	sts	0x0222, r24
}
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <angle_5A>:

void angle_5A (unsigned char angle)                // joint-A of arm 5
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     d1c:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_5A = angle_upper_byte;
     d20:	80 91 09 02 	lds	r24, 0x0209
     d24:	80 93 0f 02 	sts	0x020F, r24
 angle_lower_byte_5A = angle_lower_byte;
     d28:	80 91 0a 02 	lds	r24, 0x020A
     d2c:	80 93 2b 02 	sts	0x022B, r24
}
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <angle_5B>:

void angle_5B (unsigned char angle)                // joint-B of arm 5
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	0f 92       	push	r0
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     d4a:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_5B = angle_upper_byte;
     d4e:	80 91 09 02 	lds	r24, 0x0209
     d52:	80 93 15 02 	sts	0x0215, r24
 angle_lower_byte_5B = angle_lower_byte;
     d56:	80 91 0a 02 	lds	r24, 0x020A
     d5a:	80 93 18 02 	sts	0x0218, r24
}
     d5e:	0f 90       	pop	r0
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <angle_5C>:

void angle_5C (unsigned char angle)                // joint-C of arm 5
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	0f 92       	push	r0
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     d78:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_5C = angle_upper_byte;
     d7c:	80 91 09 02 	lds	r24, 0x0209
     d80:	80 93 25 02 	sts	0x0225, r24
 angle_lower_byte_5C = angle_lower_byte;
     d84:	80 91 0a 02 	lds	r24, 0x020A
     d88:	80 93 1f 02 	sts	0x021F, r24
}
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <angle_6A>:

void angle_6A (unsigned char angle)                // joint-A of arm 6
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	0f 92       	push	r0
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     da6:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_6A = angle_upper_byte;
     daa:	80 91 09 02 	lds	r24, 0x0209
     dae:	80 93 1d 02 	sts	0x021D, r24
 angle_lower_byte_6A = angle_lower_byte;
     db2:	80 91 0a 02 	lds	r24, 0x020A
     db6:	80 93 1e 02 	sts	0x021E, r24
}
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <angle_6B>:

void angle_6B (unsigned char angle)                // joint-B of arm 6
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     dd4:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_6B = angle_upper_byte;
     dd8:	80 91 09 02 	lds	r24, 0x0209
     ddc:	80 93 14 02 	sts	0x0214, r24
 angle_lower_byte_6B = angle_lower_byte;
     de0:	80 91 0a 02 	lds	r24, 0x020A
     de4:	80 93 16 02 	sts	0x0216, r24
}
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <angle_6C>:

void angle_6C (unsigned char angle)                // joint-C of arm 6
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	80 93 0b 02 	sts	0x020B, r24
 angle_value_calculation();
     e02:	0e 94 3b 05 	call	0xa76	; 0xa76 <angle_value_calculation>
 angle_upper_byte_6C = angle_upper_byte;
     e06:	80 91 09 02 	lds	r24, 0x0209
     e0a:	80 93 1a 02 	sts	0x021A, r24
 angle_lower_byte_6C = angle_lower_byte;
     e0e:	80 91 0a 02 	lds	r24, 0x020A
     e12:	80 93 2a 02 	sts	0x022A, r24
}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <robot_arm_calibration>:
//--------------------------------------------------------------------------------
// Call this function to initalise all servo motors in default 90 degrees. 
// Use this function while replacing servo motors of the robot for the calibration.
//--------------------------------------------------------------------------------
void robot_arm_calibration (void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
angle_1A(90); angle_1B(90); angle_1C(90); angle_2A(90); angle_2B(90); angle_2C(90);
     e26:	8a e5       	ldi	r24, 0x5A	; 90
     e28:	0e 94 71 05 	call	0xae2	; 0xae2 <angle_1A>
     e2c:	8a e5       	ldi	r24, 0x5A	; 90
     e2e:	0e 94 88 05 	call	0xb10	; 0xb10 <angle_1B>
     e32:	8a e5       	ldi	r24, 0x5A	; 90
     e34:	0e 94 9f 05 	call	0xb3e	; 0xb3e <angle_1C>
     e38:	8a e5       	ldi	r24, 0x5A	; 90
     e3a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <angle_2A>
     e3e:	8a e5       	ldi	r24, 0x5A	; 90
     e40:	0e 94 cd 05 	call	0xb9a	; 0xb9a <angle_2B>
     e44:	8a e5       	ldi	r24, 0x5A	; 90
     e46:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <angle_2C>
angle_3A(90); angle_3B(90); angle_3C(90); angle_4A(90); angle_4B(90); angle_4C(90);
     e4a:	8a e5       	ldi	r24, 0x5A	; 90
     e4c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <angle_3A>
     e50:	8a e5       	ldi	r24, 0x5A	; 90
     e52:	0e 94 12 06 	call	0xc24	; 0xc24 <angle_3B>
     e56:	8a e5       	ldi	r24, 0x5A	; 90
     e58:	0e 94 29 06 	call	0xc52	; 0xc52 <angle_3C>
     e5c:	8a e5       	ldi	r24, 0x5A	; 90
     e5e:	0e 94 40 06 	call	0xc80	; 0xc80 <angle_4A>
     e62:	8a e5       	ldi	r24, 0x5A	; 90
     e64:	0e 94 57 06 	call	0xcae	; 0xcae <angle_4B>
     e68:	8a e5       	ldi	r24, 0x5A	; 90
     e6a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <angle_4C>
angle_5A(90); angle_5B(90); angle_5C(90); angle_6A(90); angle_6B(90); angle_6C(90);
     e6e:	8a e5       	ldi	r24, 0x5A	; 90
     e70:	0e 94 85 06 	call	0xd0a	; 0xd0a <angle_5A>
     e74:	8a e5       	ldi	r24, 0x5A	; 90
     e76:	0e 94 9c 06 	call	0xd38	; 0xd38 <angle_5B>
     e7a:	8a e5       	ldi	r24, 0x5A	; 90
     e7c:	0e 94 b3 06 	call	0xd66	; 0xd66 <angle_5C>
     e80:	8a e5       	ldi	r24, 0x5A	; 90
     e82:	0e 94 ca 06 	call	0xd94	; 0xd94 <angle_6A>
     e86:	8a e5       	ldi	r24, 0x5A	; 90
     e88:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <angle_6B>
     e8c:	8a e5       	ldi	r24, 0x5A	; 90
     e8e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <angle_6C>
}
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <wlalk_stroke>:
//--------------------------------------------------------------------------------
// function for forward & backward storke, It pushes the robot in forward or backward
// direction depending on the selected direction
//--------------------------------------------------------------------------------
void wlalk_stroke(void)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
angle_1A(135); angle_1B(125); angle_1C(90); angle_2A(90); angle_2B(125); angle_2C(90);
     ea0:	87 e8       	ldi	r24, 0x87	; 135
     ea2:	0e 94 71 05 	call	0xae2	; 0xae2 <angle_1A>
     ea6:	8d e7       	ldi	r24, 0x7D	; 125
     ea8:	0e 94 88 05 	call	0xb10	; 0xb10 <angle_1B>
     eac:	8a e5       	ldi	r24, 0x5A	; 90
     eae:	0e 94 9f 05 	call	0xb3e	; 0xb3e <angle_1C>
     eb2:	8a e5       	ldi	r24, 0x5A	; 90
     eb4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <angle_2A>
     eb8:	8d e7       	ldi	r24, 0x7D	; 125
     eba:	0e 94 cd 05 	call	0xb9a	; 0xb9a <angle_2B>
     ebe:	8a e5       	ldi	r24, 0x5A	; 90
     ec0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <angle_2C>
angle_3A(45); angle_3B(125); angle_3C(90); angle_4A(45); angle_4B(55); angle_4C(90);
     ec4:	8d e2       	ldi	r24, 0x2D	; 45
     ec6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <angle_3A>
     eca:	8d e7       	ldi	r24, 0x7D	; 125
     ecc:	0e 94 12 06 	call	0xc24	; 0xc24 <angle_3B>
     ed0:	8a e5       	ldi	r24, 0x5A	; 90
     ed2:	0e 94 29 06 	call	0xc52	; 0xc52 <angle_3C>
     ed6:	8d e2       	ldi	r24, 0x2D	; 45
     ed8:	0e 94 40 06 	call	0xc80	; 0xc80 <angle_4A>
     edc:	87 e3       	ldi	r24, 0x37	; 55
     ede:	0e 94 57 06 	call	0xcae	; 0xcae <angle_4B>
     ee2:	8a e5       	ldi	r24, 0x5A	; 90
     ee4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <angle_4C>
angle_5A(90); angle_5B(55); angle_5C(90); angle_6A(135); angle_6B(55); angle_6C(90);
     ee8:	8a e5       	ldi	r24, 0x5A	; 90
     eea:	0e 94 85 06 	call	0xd0a	; 0xd0a <angle_5A>
     eee:	87 e3       	ldi	r24, 0x37	; 55
     ef0:	0e 94 9c 06 	call	0xd38	; 0xd38 <angle_5B>
     ef4:	8a e5       	ldi	r24, 0x5A	; 90
     ef6:	0e 94 b3 06 	call	0xd66	; 0xd66 <angle_5C>
     efa:	87 e8       	ldi	r24, 0x87	; 135
     efc:	0e 94 ca 06 	call	0xd94	; 0xd94 <angle_6A>
     f00:	87 e3       	ldi	r24, 0x37	; 55
     f02:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <angle_6B>
     f06:	8a e5       	ldi	r24, 0x5A	; 90
     f08:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <angle_6C>
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <robot_stand_position>:

//--------------------------------------------------------------------------------
// function to stand the robot initial position
//--------------------------------------------------------------------------------
void robot_stand_position(void)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
angle_1A(90); angle_1B(125); angle_1C(90); angle_2A(90); angle_2B(125); angle_2C(90);
     f1a:	8a e5       	ldi	r24, 0x5A	; 90
     f1c:	0e 94 71 05 	call	0xae2	; 0xae2 <angle_1A>
     f20:	8d e7       	ldi	r24, 0x7D	; 125
     f22:	0e 94 88 05 	call	0xb10	; 0xb10 <angle_1B>
     f26:	8a e5       	ldi	r24, 0x5A	; 90
     f28:	0e 94 9f 05 	call	0xb3e	; 0xb3e <angle_1C>
     f2c:	8a e5       	ldi	r24, 0x5A	; 90
     f2e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <angle_2A>
     f32:	8d e7       	ldi	r24, 0x7D	; 125
     f34:	0e 94 cd 05 	call	0xb9a	; 0xb9a <angle_2B>
     f38:	8a e5       	ldi	r24, 0x5A	; 90
     f3a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <angle_2C>
angle_3A(90); angle_3B(125); angle_3C(90); angle_4A(90); angle_4B(55); angle_4C(90);
     f3e:	8a e5       	ldi	r24, 0x5A	; 90
     f40:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <angle_3A>
     f44:	8d e7       	ldi	r24, 0x7D	; 125
     f46:	0e 94 12 06 	call	0xc24	; 0xc24 <angle_3B>
     f4a:	8a e5       	ldi	r24, 0x5A	; 90
     f4c:	0e 94 29 06 	call	0xc52	; 0xc52 <angle_3C>
     f50:	8a e5       	ldi	r24, 0x5A	; 90
     f52:	0e 94 40 06 	call	0xc80	; 0xc80 <angle_4A>
     f56:	87 e3       	ldi	r24, 0x37	; 55
     f58:	0e 94 57 06 	call	0xcae	; 0xcae <angle_4B>
     f5c:	8a e5       	ldi	r24, 0x5A	; 90
     f5e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <angle_4C>
angle_5A(90); angle_5B(55); angle_5C(90); angle_6A(90); angle_6B(55); angle_6C(90);
     f62:	8a e5       	ldi	r24, 0x5A	; 90
     f64:	0e 94 85 06 	call	0xd0a	; 0xd0a <angle_5A>
     f68:	87 e3       	ldi	r24, 0x37	; 55
     f6a:	0e 94 9c 06 	call	0xd38	; 0xd38 <angle_5B>
     f6e:	8a e5       	ldi	r24, 0x5A	; 90
     f70:	0e 94 b3 06 	call	0xd66	; 0xd66 <angle_5C>
     f74:	8a e5       	ldi	r24, 0x5A	; 90
     f76:	0e 94 ca 06 	call	0xd94	; 0xd94 <angle_6A>
     f7a:	87 e3       	ldi	r24, 0x37	; 55
     f7c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <angle_6B>
     f80:	8a e5       	ldi	r24, 0x5A	; 90
     f82:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <angle_6C>
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <fwd_front_step>:
//--------------------------------------------------------------------------------
// This function is used for positioning robot's arms in forward direction just 
// before applying stroke to push the robot forward.
//--------------------------------------------------------------------------------
void fwd_front_step()
{
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	ce 57       	subi	r28, 0x7E	; 126
     f9a:	d0 40       	sbci	r29, 0x00	; 0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
 //2 and 4 move forward
 angle_2B(90); angle_2C(90); angle_4B(90);angle_4C(90); //2nd & 4th arm BC servo up by 90
     fa6:	8a e5       	ldi	r24, 0x5A	; 90
     fa8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <angle_2B>
     fac:	8a e5       	ldi	r24, 0x5A	; 90
     fae:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <angle_2C>
     fb2:	8a e5       	ldi	r24, 0x5A	; 90
     fb4:	0e 94 57 06 	call	0xcae	; 0xcae <angle_4B>
     fb8:	8a e5       	ldi	r24, 0x5A	; 90
     fba:	0e 94 6e 06 	call	0xcdc	; 0xcdc <angle_4C>
     fbe:	fe 01       	movw	r30, r28
     fc0:	e5 58       	subi	r30, 0x85	; 133
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	aa e7       	ldi	r26, 0x7A	; 122
     fca:	b3 e4       	ldi	r27, 0x43	; 67
     fcc:	80 83       	st	Z, r24
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	a2 83       	std	Z+2, r26	; 0x02
     fd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd4:	8e 01       	movw	r16, r28
     fd6:	09 58       	subi	r16, 0x89	; 137
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	fe 01       	movw	r30, r28
     fdc:	e5 58       	subi	r30, 0x85	; 133
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	26 e6       	ldi	r18, 0x66	; 102
     fea:	36 e6       	ldi	r19, 0x66	; 102
     fec:	46 e6       	ldi	r20, 0x66	; 102
     fee:	55 e4       	ldi	r21, 0x45	; 69
     ff0:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	80 83       	st	Z, r24
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	a2 83       	std	Z+2, r26	; 0x02
    1000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1002:	fe 01       	movw	r30, r28
    1004:	e9 58       	subi	r30, 0x89	; 137
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	60 81       	ld	r22, Z
    100a:	71 81       	ldd	r23, Z+1	; 0x01
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	93 81       	ldd	r25, Z+3	; 0x03
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    101c:	88 23       	and	r24, r24
    101e:	44 f4       	brge	.+16     	; 0x1030 <fwd_front_step+0xa4>
		__ticks = 1;
    1020:	fe 01       	movw	r30, r28
    1022:	eb 58       	subi	r30, 0x8B	; 139
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	80 83       	st	Z, r24
    102e:	64 c0       	rjmp	.+200    	; 0x10f8 <fwd_front_step+0x16c>
	else if (__tmp > 65535)
    1030:	fe 01       	movw	r30, r28
    1032:	e9 58       	subi	r30, 0x89	; 137
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	60 81       	ld	r22, Z
    1038:	71 81       	ldd	r23, Z+1	; 0x01
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	3f ef       	ldi	r19, 0xFF	; 255
    1042:	4f e7       	ldi	r20, 0x7F	; 127
    1044:	57 e4       	ldi	r21, 0x47	; 71
    1046:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    104a:	18 16       	cp	r1, r24
    104c:	0c f0       	brlt	.+2      	; 0x1050 <fwd_front_step+0xc4>
    104e:	43 c0       	rjmp	.+134    	; 0x10d6 <fwd_front_step+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1050:	fe 01       	movw	r30, r28
    1052:	e5 58       	subi	r30, 0x85	; 133
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e2       	ldi	r20, 0x20	; 32
    1064:	51 e4       	ldi	r21, 0x41	; 65
    1066:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	8e 01       	movw	r16, r28
    1070:	0b 58       	subi	r16, 0x8B	; 139
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	f8 01       	movw	r30, r16
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	80 83       	st	Z, r24
    1086:	1f c0       	rjmp	.+62     	; 0x10c6 <fwd_front_step+0x13a>
    1088:	fe 01       	movw	r30, r28
    108a:	ed 58       	subi	r30, 0x8D	; 141
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 e7       	ldi	r24, 0x70	; 112
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1096:	fe 01       	movw	r30, r28
    1098:	ed 58       	subi	r30, 0x8D	; 141
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <fwd_front_step+0x114>
    10a4:	fe 01       	movw	r30, r28
    10a6:	ed 58       	subi	r30, 0x8D	; 141
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ae:	de 01       	movw	r26, r28
    10b0:	ab 58       	subi	r26, 0x8B	; 139
    10b2:	bf 4f       	sbci	r27, 0xFF	; 255
    10b4:	fe 01       	movw	r30, r28
    10b6:	eb 58       	subi	r30, 0x8B	; 139
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	9c 93       	st	X, r25
    10c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c6:	fe 01       	movw	r30, r28
    10c8:	eb 58       	subi	r30, 0x8B	; 139
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	d1 f6       	brne	.-76     	; 0x1088 <fwd_front_step+0xfc>
    10d4:	27 c0       	rjmp	.+78     	; 0x1124 <fwd_front_step+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d6:	8e 01       	movw	r16, r28
    10d8:	0b 58       	subi	r16, 0x8B	; 139
    10da:	1f 4f       	sbci	r17, 0xFF	; 255
    10dc:	fe 01       	movw	r30, r28
    10de:	e9 58       	subi	r30, 0x89	; 137
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	f8 01       	movw	r30, r16
    10f4:	91 83       	std	Z+1, r25	; 0x01
    10f6:	80 83       	st	Z, r24
    10f8:	de 01       	movw	r26, r28
    10fa:	af 58       	subi	r26, 0x8F	; 143
    10fc:	bf 4f       	sbci	r27, 0xFF	; 255
    10fe:	fe 01       	movw	r30, r28
    1100:	eb 58       	subi	r30, 0x8B	; 139
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	8d 93       	st	X+, r24
    110a:	9c 93       	st	X, r25
    110c:	fe 01       	movw	r30, r28
    110e:	ef 58       	subi	r30, 0x8F	; 143
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <fwd_front_step+0x18a>
    111a:	fe 01       	movw	r30, r28
    111c:	ef 58       	subi	r30, 0x8F	; 143
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
 _delay_ms(250);
 angle_2A(70); angle_4A(65);      //move forward while arms are up
    1124:	86 e4       	ldi	r24, 0x46	; 70
    1126:	0e 94 b6 05 	call	0xb6c	; 0xb6c <angle_2A>
    112a:	81 e4       	ldi	r24, 0x41	; 65
    112c:	0e 94 40 06 	call	0xc80	; 0xc80 <angle_4A>
    1130:	fe 01       	movw	r30, r28
    1132:	e3 59       	subi	r30, 0x93	; 147
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	aa e7       	ldi	r26, 0x7A	; 122
    113c:	b3 e4       	ldi	r27, 0x43	; 67
    113e:	80 83       	st	Z, r24
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	a2 83       	std	Z+2, r26	; 0x02
    1144:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	8e 01       	movw	r16, r28
    1148:	07 59       	subi	r16, 0x97	; 151
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
    114c:	fe 01       	movw	r30, r28
    114e:	e3 59       	subi	r30, 0x93	; 147
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	26 e6       	ldi	r18, 0x66	; 102
    115c:	36 e6       	ldi	r19, 0x66	; 102
    115e:	46 e6       	ldi	r20, 0x66	; 102
    1160:	55 e4       	ldi	r21, 0x45	; 69
    1162:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	f8 01       	movw	r30, r16
    116c:	80 83       	st	Z, r24
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	a2 83       	std	Z+2, r26	; 0x02
    1172:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1174:	fe 01       	movw	r30, r28
    1176:	e7 59       	subi	r30, 0x97	; 151
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	60 81       	ld	r22, Z
    117c:	71 81       	ldd	r23, Z+1	; 0x01
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	93 81       	ldd	r25, Z+3	; 0x03
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    118e:	88 23       	and	r24, r24
    1190:	44 f4       	brge	.+16     	; 0x11a2 <fwd_front_step+0x216>
		__ticks = 1;
    1192:	fe 01       	movw	r30, r28
    1194:	e9 59       	subi	r30, 0x99	; 153
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	80 83       	st	Z, r24
    11a0:	64 c0       	rjmp	.+200    	; 0x126a <fwd_front_step+0x2de>
	else if (__tmp > 65535)
    11a2:	fe 01       	movw	r30, r28
    11a4:	e7 59       	subi	r30, 0x97	; 151
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	60 81       	ld	r22, Z
    11aa:	71 81       	ldd	r23, Z+1	; 0x01
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	3f ef       	ldi	r19, 0xFF	; 255
    11b4:	4f e7       	ldi	r20, 0x7F	; 127
    11b6:	57 e4       	ldi	r21, 0x47	; 71
    11b8:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    11bc:	18 16       	cp	r1, r24
    11be:	0c f0       	brlt	.+2      	; 0x11c2 <fwd_front_step+0x236>
    11c0:	43 c0       	rjmp	.+134    	; 0x1248 <fwd_front_step+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	fe 01       	movw	r30, r28
    11c4:	e3 59       	subi	r30, 0x93	; 147
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	60 81       	ld	r22, Z
    11ca:	71 81       	ldd	r23, Z+1	; 0x01
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e2       	ldi	r20, 0x20	; 32
    11d6:	51 e4       	ldi	r21, 0x41	; 65
    11d8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	8e 01       	movw	r16, r28
    11e2:	09 59       	subi	r16, 0x99	; 153
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	f8 01       	movw	r30, r16
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
    11f8:	1f c0       	rjmp	.+62     	; 0x1238 <fwd_front_step+0x2ac>
    11fa:	fe 01       	movw	r30, r28
    11fc:	eb 59       	subi	r30, 0x9B	; 155
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 e7       	ldi	r24, 0x70	; 112
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	80 83       	st	Z, r24
    1208:	fe 01       	movw	r30, r28
    120a:	eb 59       	subi	r30, 0x9B	; 155
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	80 81       	ld	r24, Z
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <fwd_front_step+0x286>
    1216:	fe 01       	movw	r30, r28
    1218:	eb 59       	subi	r30, 0x9B	; 155
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1220:	de 01       	movw	r26, r28
    1222:	a9 59       	subi	r26, 0x99	; 153
    1224:	bf 4f       	sbci	r27, 0xFF	; 255
    1226:	fe 01       	movw	r30, r28
    1228:	e9 59       	subi	r30, 0x99	; 153
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	11 96       	adiw	r26, 0x01	; 1
    1234:	9c 93       	st	X, r25
    1236:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	fe 01       	movw	r30, r28
    123a:	e9 59       	subi	r30, 0x99	; 153
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	d1 f6       	brne	.-76     	; 0x11fa <fwd_front_step+0x26e>
    1246:	27 c0       	rjmp	.+78     	; 0x1296 <fwd_front_step+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1248:	8e 01       	movw	r16, r28
    124a:	09 59       	subi	r16, 0x99	; 153
    124c:	1f 4f       	sbci	r17, 0xFF	; 255
    124e:	fe 01       	movw	r30, r28
    1250:	e7 59       	subi	r30, 0x97	; 151
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	60 81       	ld	r22, Z
    1256:	71 81       	ldd	r23, Z+1	; 0x01
    1258:	82 81       	ldd	r24, Z+2	; 0x02
    125a:	93 81       	ldd	r25, Z+3	; 0x03
    125c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	f8 01       	movw	r30, r16
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
    126a:	de 01       	movw	r26, r28
    126c:	ad 59       	subi	r26, 0x9D	; 157
    126e:	bf 4f       	sbci	r27, 0xFF	; 255
    1270:	fe 01       	movw	r30, r28
    1272:	e9 59       	subi	r30, 0x99	; 153
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	8d 93       	st	X+, r24
    127c:	9c 93       	st	X, r25
    127e:	fe 01       	movw	r30, r28
    1280:	ed 59       	subi	r30, 0x9D	; 157
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <fwd_front_step+0x2fc>
    128c:	fe 01       	movw	r30, r28
    128e:	ed 59       	subi	r30, 0x9D	; 157
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	80 83       	st	Z, r24
 _delay_ms(250);
 angle_2B(125); angle_4B(55);     //put down arm
    1296:	8d e7       	ldi	r24, 0x7D	; 125
    1298:	0e 94 cd 05 	call	0xb9a	; 0xb9a <angle_2B>
    129c:	87 e3       	ldi	r24, 0x37	; 55
    129e:	0e 94 57 06 	call	0xcae	; 0xcae <angle_4B>
    12a2:	fe 01       	movw	r30, r28
    12a4:	e1 5a       	subi	r30, 0xA1	; 161
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	aa e7       	ldi	r26, 0x7A	; 122
    12ae:	b3 e4       	ldi	r27, 0x43	; 67
    12b0:	80 83       	st	Z, r24
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	a2 83       	std	Z+2, r26	; 0x02
    12b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b8:	8e 01       	movw	r16, r28
    12ba:	05 5a       	subi	r16, 0xA5	; 165
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	fe 01       	movw	r30, r28
    12c0:	e1 5a       	subi	r30, 0xA1	; 161
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	26 e6       	ldi	r18, 0x66	; 102
    12ce:	36 e6       	ldi	r19, 0x66	; 102
    12d0:	46 e6       	ldi	r20, 0x66	; 102
    12d2:	55 e4       	ldi	r21, 0x45	; 69
    12d4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	f8 01       	movw	r30, r16
    12de:	80 83       	st	Z, r24
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	a2 83       	std	Z+2, r26	; 0x02
    12e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12e6:	fe 01       	movw	r30, r28
    12e8:	e5 5a       	subi	r30, 0xA5	; 165
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	60 81       	ld	r22, Z
    12ee:	71 81       	ldd	r23, Z+1	; 0x01
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e8       	ldi	r20, 0x80	; 128
    12fa:	5f e3       	ldi	r21, 0x3F	; 63
    12fc:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    1300:	88 23       	and	r24, r24
    1302:	44 f4       	brge	.+16     	; 0x1314 <fwd_front_step+0x388>
		__ticks = 1;
    1304:	fe 01       	movw	r30, r28
    1306:	e7 5a       	subi	r30, 0xA7	; 167
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24
    1312:	64 c0       	rjmp	.+200    	; 0x13dc <fwd_front_step+0x450>
	else if (__tmp > 65535)
    1314:	fe 01       	movw	r30, r28
    1316:	e5 5a       	subi	r30, 0xA5	; 165
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	60 81       	ld	r22, Z
    131c:	71 81       	ldd	r23, Z+1	; 0x01
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	93 81       	ldd	r25, Z+3	; 0x03
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	3f ef       	ldi	r19, 0xFF	; 255
    1326:	4f e7       	ldi	r20, 0x7F	; 127
    1328:	57 e4       	ldi	r21, 0x47	; 71
    132a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    132e:	18 16       	cp	r1, r24
    1330:	0c f0       	brlt	.+2      	; 0x1334 <fwd_front_step+0x3a8>
    1332:	43 c0       	rjmp	.+134    	; 0x13ba <fwd_front_step+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1334:	fe 01       	movw	r30, r28
    1336:	e1 5a       	subi	r30, 0xA1	; 161
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	60 81       	ld	r22, Z
    133c:	71 81       	ldd	r23, Z+1	; 0x01
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	93 81       	ldd	r25, Z+3	; 0x03
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e2       	ldi	r20, 0x20	; 32
    1348:	51 e4       	ldi	r21, 0x41	; 65
    134a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	8e 01       	movw	r16, r28
    1354:	07 5a       	subi	r16, 0xA7	; 167
    1356:	1f 4f       	sbci	r17, 0xFF	; 255
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	f8 01       	movw	r30, r16
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	80 83       	st	Z, r24
    136a:	1f c0       	rjmp	.+62     	; 0x13aa <fwd_front_step+0x41e>
    136c:	fe 01       	movw	r30, r28
    136e:	e9 5a       	subi	r30, 0xA9	; 169
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	80 e7       	ldi	r24, 0x70	; 112
    1374:	91 e0       	ldi	r25, 0x01	; 1
    1376:	91 83       	std	Z+1, r25	; 0x01
    1378:	80 83       	st	Z, r24
    137a:	fe 01       	movw	r30, r28
    137c:	e9 5a       	subi	r30, 0xA9	; 169
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <fwd_front_step+0x3f8>
    1388:	fe 01       	movw	r30, r28
    138a:	e9 5a       	subi	r30, 0xA9	; 169
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	91 83       	std	Z+1, r25	; 0x01
    1390:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1392:	de 01       	movw	r26, r28
    1394:	a7 5a       	subi	r26, 0xA7	; 167
    1396:	bf 4f       	sbci	r27, 0xFF	; 255
    1398:	fe 01       	movw	r30, r28
    139a:	e7 5a       	subi	r30, 0xA7	; 167
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	11 96       	adiw	r26, 0x01	; 1
    13a6:	9c 93       	st	X, r25
    13a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13aa:	fe 01       	movw	r30, r28
    13ac:	e7 5a       	subi	r30, 0xA7	; 167
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	d1 f6       	brne	.-76     	; 0x136c <fwd_front_step+0x3e0>
    13b8:	27 c0       	rjmp	.+78     	; 0x1408 <fwd_front_step+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ba:	8e 01       	movw	r16, r28
    13bc:	07 5a       	subi	r16, 0xA7	; 167
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	fe 01       	movw	r30, r28
    13c2:	e5 5a       	subi	r30, 0xA5	; 165
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	f8 01       	movw	r30, r16
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
    13dc:	de 01       	movw	r26, r28
    13de:	ab 5a       	subi	r26, 0xAB	; 171
    13e0:	bf 4f       	sbci	r27, 0xFF	; 255
    13e2:	fe 01       	movw	r30, r28
    13e4:	e7 5a       	subi	r30, 0xA7	; 167
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	80 81       	ld	r24, Z
    13ea:	91 81       	ldd	r25, Z+1	; 0x01
    13ec:	8d 93       	st	X+, r24
    13ee:	9c 93       	st	X, r25
    13f0:	fe 01       	movw	r30, r28
    13f2:	eb 5a       	subi	r30, 0xAB	; 171
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 81       	ld	r24, Z
    13f8:	91 81       	ldd	r25, Z+1	; 0x01
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <fwd_front_step+0x46e>
    13fe:	fe 01       	movw	r30, r28
    1400:	eb 5a       	subi	r30, 0xAB	; 171
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	80 83       	st	Z, r24
 _delay_ms(250);
 
 //1 and 6 move forward
 angle_1B(90); angle_1C(90); angle_6B(90); angle_6C(90); //1st & 6th arm BC servo up by 90
    1408:	8a e5       	ldi	r24, 0x5A	; 90
    140a:	0e 94 88 05 	call	0xb10	; 0xb10 <angle_1B>
    140e:	8a e5       	ldi	r24, 0x5A	; 90
    1410:	0e 94 9f 05 	call	0xb3e	; 0xb3e <angle_1C>
    1414:	8a e5       	ldi	r24, 0x5A	; 90
    1416:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <angle_6B>
    141a:	8a e5       	ldi	r24, 0x5A	; 90
    141c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <angle_6C>
    1420:	fe 01       	movw	r30, r28
    1422:	ef 5a       	subi	r30, 0xAF	; 175
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	aa e7       	ldi	r26, 0x7A	; 122
    142c:	b3 e4       	ldi	r27, 0x43	; 67
    142e:	80 83       	st	Z, r24
    1430:	91 83       	std	Z+1, r25	; 0x01
    1432:	a2 83       	std	Z+2, r26	; 0x02
    1434:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1436:	8e 01       	movw	r16, r28
    1438:	03 5b       	subi	r16, 0xB3	; 179
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	fe 01       	movw	r30, r28
    143e:	ef 5a       	subi	r30, 0xAF	; 175
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	26 e6       	ldi	r18, 0x66	; 102
    144c:	36 e6       	ldi	r19, 0x66	; 102
    144e:	46 e6       	ldi	r20, 0x66	; 102
    1450:	55 e4       	ldi	r21, 0x45	; 69
    1452:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	f8 01       	movw	r30, r16
    145c:	80 83       	st	Z, r24
    145e:	91 83       	std	Z+1, r25	; 0x01
    1460:	a2 83       	std	Z+2, r26	; 0x02
    1462:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1464:	fe 01       	movw	r30, r28
    1466:	e3 5b       	subi	r30, 0xB3	; 179
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	82 81       	ldd	r24, Z+2	; 0x02
    1470:	93 81       	ldd	r25, Z+3	; 0x03
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	44 f4       	brge	.+16     	; 0x1492 <fwd_front_step+0x506>
		__ticks = 1;
    1482:	fe 01       	movw	r30, r28
    1484:	e5 5b       	subi	r30, 0xB5	; 181
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	91 83       	std	Z+1, r25	; 0x01
    148e:	80 83       	st	Z, r24
    1490:	64 c0       	rjmp	.+200    	; 0x155a <fwd_front_step+0x5ce>
	else if (__tmp > 65535)
    1492:	fe 01       	movw	r30, r28
    1494:	e3 5b       	subi	r30, 0xB3	; 179
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	3f ef       	ldi	r19, 0xFF	; 255
    14a4:	4f e7       	ldi	r20, 0x7F	; 127
    14a6:	57 e4       	ldi	r21, 0x47	; 71
    14a8:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    14ac:	18 16       	cp	r1, r24
    14ae:	0c f0       	brlt	.+2      	; 0x14b2 <fwd_front_step+0x526>
    14b0:	43 c0       	rjmp	.+134    	; 0x1538 <fwd_front_step+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b2:	fe 01       	movw	r30, r28
    14b4:	ef 5a       	subi	r30, 0xAF	; 175
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e2       	ldi	r20, 0x20	; 32
    14c6:	51 e4       	ldi	r21, 0x41	; 65
    14c8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8e 01       	movw	r16, r28
    14d2:	05 5b       	subi	r16, 0xB5	; 181
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	f8 01       	movw	r30, r16
    14e4:	91 83       	std	Z+1, r25	; 0x01
    14e6:	80 83       	st	Z, r24
    14e8:	1f c0       	rjmp	.+62     	; 0x1528 <fwd_front_step+0x59c>
    14ea:	fe 01       	movw	r30, r28
    14ec:	e7 5b       	subi	r30, 0xB7	; 183
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	80 e7       	ldi	r24, 0x70	; 112
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	91 83       	std	Z+1, r25	; 0x01
    14f6:	80 83       	st	Z, r24
    14f8:	fe 01       	movw	r30, r28
    14fa:	e7 5b       	subi	r30, 0xB7	; 183
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <fwd_front_step+0x576>
    1506:	fe 01       	movw	r30, r28
    1508:	e7 5b       	subi	r30, 0xB7	; 183
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1510:	de 01       	movw	r26, r28
    1512:	a5 5b       	subi	r26, 0xB5	; 181
    1514:	bf 4f       	sbci	r27, 0xFF	; 255
    1516:	fe 01       	movw	r30, r28
    1518:	e5 5b       	subi	r30, 0xB5	; 181
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	80 81       	ld	r24, Z
    151e:	91 81       	ldd	r25, Z+1	; 0x01
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	11 96       	adiw	r26, 0x01	; 1
    1524:	9c 93       	st	X, r25
    1526:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1528:	fe 01       	movw	r30, r28
    152a:	e5 5b       	subi	r30, 0xB5	; 181
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	d1 f6       	brne	.-76     	; 0x14ea <fwd_front_step+0x55e>
    1536:	27 c0       	rjmp	.+78     	; 0x1586 <fwd_front_step+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	8e 01       	movw	r16, r28
    153a:	05 5b       	subi	r16, 0xB5	; 181
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	fe 01       	movw	r30, r28
    1540:	e3 5b       	subi	r30, 0xB3	; 179
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	60 81       	ld	r22, Z
    1546:	71 81       	ldd	r23, Z+1	; 0x01
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	93 81       	ldd	r25, Z+3	; 0x03
    154c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	f8 01       	movw	r30, r16
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	80 83       	st	Z, r24
    155a:	de 01       	movw	r26, r28
    155c:	a9 5b       	subi	r26, 0xB9	; 185
    155e:	bf 4f       	sbci	r27, 0xFF	; 255
    1560:	fe 01       	movw	r30, r28
    1562:	e5 5b       	subi	r30, 0xB5	; 181
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 81       	ld	r24, Z
    1568:	91 81       	ldd	r25, Z+1	; 0x01
    156a:	8d 93       	st	X+, r24
    156c:	9c 93       	st	X, r25
    156e:	fe 01       	movw	r30, r28
    1570:	e9 5b       	subi	r30, 0xB9	; 185
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 81       	ld	r24, Z
    1576:	91 81       	ldd	r25, Z+1	; 0x01
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <fwd_front_step+0x5ec>
    157c:	fe 01       	movw	r30, r28
    157e:	e9 5b       	subi	r30, 0xB9	; 185
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	80 83       	st	Z, r24
 _delay_ms(250);
 angle_1A(115); angle_6A(155);   //move forward while arms are up
    1586:	83 e7       	ldi	r24, 0x73	; 115
    1588:	0e 94 71 05 	call	0xae2	; 0xae2 <angle_1A>
    158c:	8b e9       	ldi	r24, 0x9B	; 155
    158e:	0e 94 ca 06 	call	0xd94	; 0xd94 <angle_6A>
    1592:	fe 01       	movw	r30, r28
    1594:	ed 5b       	subi	r30, 0xBD	; 189
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	aa e7       	ldi	r26, 0x7A	; 122
    159e:	b3 e4       	ldi	r27, 0x43	; 67
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	a2 83       	std	Z+2, r26	; 0x02
    15a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a8:	8e 01       	movw	r16, r28
    15aa:	01 5c       	subi	r16, 0xC1	; 193
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	fe 01       	movw	r30, r28
    15b0:	ed 5b       	subi	r30, 0xBD	; 189
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	26 e6       	ldi	r18, 0x66	; 102
    15be:	36 e6       	ldi	r19, 0x66	; 102
    15c0:	46 e6       	ldi	r20, 0x66	; 102
    15c2:	55 e4       	ldi	r21, 0x45	; 69
    15c4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	f8 01       	movw	r30, r16
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	a2 83       	std	Z+2, r26	; 0x02
    15d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d6:	fe 01       	movw	r30, r28
    15d8:	ff 96       	adiw	r30, 0x3f	; 63
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e8       	ldi	r20, 0x80	; 128
    15e8:	5f e3       	ldi	r21, 0x3F	; 63
    15ea:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    15ee:	88 23       	and	r24, r24
    15f0:	2c f4       	brge	.+10     	; 0x15fc <fwd_front_step+0x670>
		__ticks = 1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9e af       	std	Y+62, r25	; 0x3e
    15f8:	8d af       	std	Y+61, r24	; 0x3d
    15fa:	46 c0       	rjmp	.+140    	; 0x1688 <fwd_front_step+0x6fc>
	else if (__tmp > 65535)
    15fc:	fe 01       	movw	r30, r28
    15fe:	ff 96       	adiw	r30, 0x3f	; 63
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	3f ef       	ldi	r19, 0xFF	; 255
    160c:	4f e7       	ldi	r20, 0x7F	; 127
    160e:	57 e4       	ldi	r21, 0x47	; 71
    1610:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    1614:	18 16       	cp	r1, r24
    1616:	64 f5       	brge	.+88     	; 0x1670 <fwd_front_step+0x6e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1618:	fe 01       	movw	r30, r28
    161a:	ed 5b       	subi	r30, 0xBD	; 189
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	60 81       	ld	r22, Z
    1620:	71 81       	ldd	r23, Z+1	; 0x01
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	93 81       	ldd	r25, Z+3	; 0x03
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9e af       	std	Y+62, r25	; 0x3e
    1644:	8d af       	std	Y+61, r24	; 0x3d
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <fwd_front_step+0x6da>
    1648:	80 e7       	ldi	r24, 0x70	; 112
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	9c af       	std	Y+60, r25	; 0x3c
    164e:	8b af       	std	Y+59, r24	; 0x3b
    1650:	8b ad       	ldd	r24, Y+59	; 0x3b
    1652:	9c ad       	ldd	r25, Y+60	; 0x3c
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <fwd_front_step+0x6c8>
    1658:	9c af       	std	Y+60, r25	; 0x3c
    165a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	8d ad       	ldd	r24, Y+61	; 0x3d
    165e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9e af       	std	Y+62, r25	; 0x3e
    1664:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	8d ad       	ldd	r24, Y+61	; 0x3d
    1668:	9e ad       	ldd	r25, Y+62	; 0x3e
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	69 f7       	brne	.-38     	; 0x1648 <fwd_front_step+0x6bc>
    166e:	16 c0       	rjmp	.+44     	; 0x169c <fwd_front_step+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1670:	fe 01       	movw	r30, r28
    1672:	ff 96       	adiw	r30, 0x3f	; 63
    1674:	60 81       	ld	r22, Z
    1676:	71 81       	ldd	r23, Z+1	; 0x01
    1678:	82 81       	ldd	r24, Z+2	; 0x02
    167a:	93 81       	ldd	r25, Z+3	; 0x03
    167c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9e af       	std	Y+62, r25	; 0x3e
    1686:	8d af       	std	Y+61, r24	; 0x3d
    1688:	8d ad       	ldd	r24, Y+61	; 0x3d
    168a:	9e ad       	ldd	r25, Y+62	; 0x3e
    168c:	9a af       	std	Y+58, r25	; 0x3a
    168e:	89 af       	std	Y+57, r24	; 0x39
    1690:	89 ad       	ldd	r24, Y+57	; 0x39
    1692:	9a ad       	ldd	r25, Y+58	; 0x3a
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <fwd_front_step+0x708>
    1698:	9a af       	std	Y+58, r25	; 0x3a
    169a:	89 af       	std	Y+57, r24	; 0x39
 _delay_ms(250);
 angle_1B(125); angle_6B(55);    //put down arm
    169c:	8d e7       	ldi	r24, 0x7D	; 125
    169e:	0e 94 88 05 	call	0xb10	; 0xb10 <angle_1B>
    16a2:	87 e3       	ldi	r24, 0x37	; 55
    16a4:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <angle_6B>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	aa e7       	ldi	r26, 0x7A	; 122
    16ae:	b3 e4       	ldi	r27, 0x43	; 67
    16b0:	8d ab       	std	Y+53, r24	; 0x35
    16b2:	9e ab       	std	Y+54, r25	; 0x36
    16b4:	af ab       	std	Y+55, r26	; 0x37
    16b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	6d a9       	ldd	r22, Y+53	; 0x35
    16ba:	7e a9       	ldd	r23, Y+54	; 0x36
    16bc:	8f a9       	ldd	r24, Y+55	; 0x37
    16be:	98 ad       	ldd	r25, Y+56	; 0x38
    16c0:	26 e6       	ldi	r18, 0x66	; 102
    16c2:	36 e6       	ldi	r19, 0x66	; 102
    16c4:	46 e6       	ldi	r20, 0x66	; 102
    16c6:	55 e4       	ldi	r21, 0x45	; 69
    16c8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	89 ab       	std	Y+49, r24	; 0x31
    16d2:	9a ab       	std	Y+50, r25	; 0x32
    16d4:	ab ab       	std	Y+51, r26	; 0x33
    16d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16d8:	69 a9       	ldd	r22, Y+49	; 0x31
    16da:	7a a9       	ldd	r23, Y+50	; 0x32
    16dc:	8b a9       	ldd	r24, Y+51	; 0x33
    16de:	9c a9       	ldd	r25, Y+52	; 0x34
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <fwd_front_step+0x76e>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	98 ab       	std	Y+48, r25	; 0x30
    16f6:	8f a7       	std	Y+47, r24	; 0x2f
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <fwd_front_step+0x7ec>
	else if (__tmp > 65535)
    16fa:	69 a9       	ldd	r22, Y+49	; 0x31
    16fc:	7a a9       	ldd	r23, Y+50	; 0x32
    16fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1700:	9c a9       	ldd	r25, Y+52	; 0x34
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	4f e7       	ldi	r20, 0x7F	; 127
    1708:	57 e4       	ldi	r21, 0x47	; 71
    170a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <fwd_front_step+0x7d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	6d a9       	ldd	r22, Y+53	; 0x35
    1714:	7e a9       	ldd	r23, Y+54	; 0x36
    1716:	8f a9       	ldd	r24, Y+55	; 0x37
    1718:	98 ad       	ldd	r25, Y+56	; 0x38
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e2       	ldi	r20, 0x20	; 32
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	98 ab       	std	Y+48, r25	; 0x30
    1738:	8f a7       	std	Y+47, r24	; 0x2f
    173a:	0f c0       	rjmp	.+30     	; 0x175a <fwd_front_step+0x7ce>
    173c:	80 e7       	ldi	r24, 0x70	; 112
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	9e a7       	std	Y+46, r25	; 0x2e
    1742:	8d a7       	std	Y+45, r24	; 0x2d
    1744:	8d a5       	ldd	r24, Y+45	; 0x2d
    1746:	9e a5       	ldd	r25, Y+46	; 0x2e
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <fwd_front_step+0x7bc>
    174c:	9e a7       	std	Y+46, r25	; 0x2e
    174e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	8f a5       	ldd	r24, Y+47	; 0x2f
    1752:	98 a9       	ldd	r25, Y+48	; 0x30
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	98 ab       	std	Y+48, r25	; 0x30
    1758:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	8f a5       	ldd	r24, Y+47	; 0x2f
    175c:	98 a9       	ldd	r25, Y+48	; 0x30
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f7       	brne	.-38     	; 0x173c <fwd_front_step+0x7b0>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <fwd_front_step+0x800>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	69 a9       	ldd	r22, Y+49	; 0x31
    1766:	7a a9       	ldd	r23, Y+50	; 0x32
    1768:	8b a9       	ldd	r24, Y+51	; 0x33
    176a:	9c a9       	ldd	r25, Y+52	; 0x34
    176c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	98 ab       	std	Y+48, r25	; 0x30
    1776:	8f a7       	std	Y+47, r24	; 0x2f
    1778:	8f a5       	ldd	r24, Y+47	; 0x2f
    177a:	98 a9       	ldd	r25, Y+48	; 0x30
    177c:	9c a7       	std	Y+44, r25	; 0x2c
    177e:	8b a7       	std	Y+43, r24	; 0x2b
    1780:	8b a5       	ldd	r24, Y+43	; 0x2b
    1782:	9c a5       	ldd	r25, Y+44	; 0x2c
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <fwd_front_step+0x7f8>
    1788:	9c a7       	std	Y+44, r25	; 0x2c
    178a:	8b a7       	std	Y+43, r24	; 0x2b
 _delay_ms(250); 
 
 //3 and 5 move forward
 angle_3B(90); angle_3C(90); angle_5B(90); angle_5C(90); //3rd & 5th arm BC servo up by 90
    178c:	8a e5       	ldi	r24, 0x5A	; 90
    178e:	0e 94 12 06 	call	0xc24	; 0xc24 <angle_3B>
    1792:	8a e5       	ldi	r24, 0x5A	; 90
    1794:	0e 94 29 06 	call	0xc52	; 0xc52 <angle_3C>
    1798:	8a e5       	ldi	r24, 0x5A	; 90
    179a:	0e 94 9c 06 	call	0xd38	; 0xd38 <angle_5B>
    179e:	8a e5       	ldi	r24, 0x5A	; 90
    17a0:	0e 94 b3 06 	call	0xd66	; 0xd66 <angle_5C>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	aa e7       	ldi	r26, 0x7A	; 122
    17aa:	b3 e4       	ldi	r27, 0x43	; 67
    17ac:	8f a3       	std	Y+39, r24	; 0x27
    17ae:	98 a7       	std	Y+40, r25	; 0x28
    17b0:	a9 a7       	std	Y+41, r26	; 0x29
    17b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	6f a1       	ldd	r22, Y+39	; 0x27
    17b6:	78 a5       	ldd	r23, Y+40	; 0x28
    17b8:	89 a5       	ldd	r24, Y+41	; 0x29
    17ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    17bc:	26 e6       	ldi	r18, 0x66	; 102
    17be:	36 e6       	ldi	r19, 0x66	; 102
    17c0:	46 e6       	ldi	r20, 0x66	; 102
    17c2:	55 e4       	ldi	r21, 0x45	; 69
    17c4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	8b a3       	std	Y+35, r24	; 0x23
    17ce:	9c a3       	std	Y+36, r25	; 0x24
    17d0:	ad a3       	std	Y+37, r26	; 0x25
    17d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17d4:	6b a1       	ldd	r22, Y+35	; 0x23
    17d6:	7c a1       	ldd	r23, Y+36	; 0x24
    17d8:	8d a1       	ldd	r24, Y+37	; 0x25
    17da:	9e a1       	ldd	r25, Y+38	; 0x26
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e8       	ldi	r20, 0x80	; 128
    17e2:	5f e3       	ldi	r21, 0x3F	; 63
    17e4:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    17e8:	88 23       	and	r24, r24
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <fwd_front_step+0x86a>
		__ticks = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9a a3       	std	Y+34, r25	; 0x22
    17f2:	89 a3       	std	Y+33, r24	; 0x21
    17f4:	3f c0       	rjmp	.+126    	; 0x1874 <fwd_front_step+0x8e8>
	else if (__tmp > 65535)
    17f6:	6b a1       	ldd	r22, Y+35	; 0x23
    17f8:	7c a1       	ldd	r23, Y+36	; 0x24
    17fa:	8d a1       	ldd	r24, Y+37	; 0x25
    17fc:	9e a1       	ldd	r25, Y+38	; 0x26
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	3f ef       	ldi	r19, 0xFF	; 255
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	57 e4       	ldi	r21, 0x47	; 71
    1806:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	4c f5       	brge	.+82     	; 0x1860 <fwd_front_step+0x8d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	6f a1       	ldd	r22, Y+39	; 0x27
    1810:	78 a5       	ldd	r23, Y+40	; 0x28
    1812:	89 a5       	ldd	r24, Y+41	; 0x29
    1814:	9a a5       	ldd	r25, Y+42	; 0x2a
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e2       	ldi	r20, 0x20	; 32
    181c:	51 e4       	ldi	r21, 0x41	; 65
    181e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9a a3       	std	Y+34, r25	; 0x22
    1834:	89 a3       	std	Y+33, r24	; 0x21
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <fwd_front_step+0x8ca>
    1838:	80 e7       	ldi	r24, 0x70	; 112
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	98 a3       	std	Y+32, r25	; 0x20
    183e:	8f 8f       	std	Y+31, r24	; 0x1f
    1840:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1842:	98 a1       	ldd	r25, Y+32	; 0x20
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <fwd_front_step+0x8b8>
    1848:	98 a3       	std	Y+32, r25	; 0x20
    184a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184c:	89 a1       	ldd	r24, Y+33	; 0x21
    184e:	9a a1       	ldd	r25, Y+34	; 0x22
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	9a a3       	std	Y+34, r25	; 0x22
    1854:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1856:	89 a1       	ldd	r24, Y+33	; 0x21
    1858:	9a a1       	ldd	r25, Y+34	; 0x22
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	69 f7       	brne	.-38     	; 0x1838 <fwd_front_step+0x8ac>
    185e:	14 c0       	rjmp	.+40     	; 0x1888 <fwd_front_step+0x8fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	6b a1       	ldd	r22, Y+35	; 0x23
    1862:	7c a1       	ldd	r23, Y+36	; 0x24
    1864:	8d a1       	ldd	r24, Y+37	; 0x25
    1866:	9e a1       	ldd	r25, Y+38	; 0x26
    1868:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9a a3       	std	Y+34, r25	; 0x22
    1872:	89 a3       	std	Y+33, r24	; 0x21
    1874:	89 a1       	ldd	r24, Y+33	; 0x21
    1876:	9a a1       	ldd	r25, Y+34	; 0x22
    1878:	9e 8f       	std	Y+30, r25	; 0x1e
    187a:	8d 8f       	std	Y+29, r24	; 0x1d
    187c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    187e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <fwd_front_step+0x8f4>
    1884:	9e 8f       	std	Y+30, r25	; 0x1e
    1886:	8d 8f       	std	Y+29, r24	; 0x1d
 _delay_ms(250);
 angle_3A(25); angle_5A(110);    //move forward while arms are up
    1888:	89 e1       	ldi	r24, 0x19	; 25
    188a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <angle_3A>
    188e:	8e e6       	ldi	r24, 0x6E	; 110
    1890:	0e 94 85 06 	call	0xd0a	; 0xd0a <angle_5A>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	aa e7       	ldi	r26, 0x7A	; 122
    189a:	b3 e4       	ldi	r27, 0x43	; 67
    189c:	89 8f       	std	Y+25, r24	; 0x19
    189e:	9a 8f       	std	Y+26, r25	; 0x1a
    18a0:	ab 8f       	std	Y+27, r26	; 0x1b
    18a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a4:	69 8d       	ldd	r22, Y+25	; 0x19
    18a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ac:	26 e6       	ldi	r18, 0x66	; 102
    18ae:	36 e6       	ldi	r19, 0x66	; 102
    18b0:	46 e6       	ldi	r20, 0x66	; 102
    18b2:	55 e4       	ldi	r21, 0x45	; 69
    18b4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8d 8b       	std	Y+21, r24	; 0x15
    18be:	9e 8b       	std	Y+22, r25	; 0x16
    18c0:	af 8b       	std	Y+23, r26	; 0x17
    18c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18c4:	6d 89       	ldd	r22, Y+21	; 0x15
    18c6:	7e 89       	ldd	r23, Y+22	; 0x16
    18c8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ca:	98 8d       	ldd	r25, Y+24	; 0x18
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	2c f4       	brge	.+10     	; 0x18e6 <fwd_front_step+0x95a>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9c 8b       	std	Y+20, r25	; 0x14
    18e2:	8b 8b       	std	Y+19, r24	; 0x13
    18e4:	3f c0       	rjmp	.+126    	; 0x1964 <fwd_front_step+0x9d8>
	else if (__tmp > 65535)
    18e6:	6d 89       	ldd	r22, Y+21	; 0x15
    18e8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ea:	8f 89       	ldd	r24, Y+23	; 0x17
    18ec:	98 8d       	ldd	r25, Y+24	; 0x18
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	4c f5       	brge	.+82     	; 0x1950 <fwd_front_step+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1900:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1902:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1904:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9c 8b       	std	Y+20, r25	; 0x14
    1924:	8b 8b       	std	Y+19, r24	; 0x13
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <fwd_front_step+0x9ba>
    1928:	80 e7       	ldi	r24, 0x70	; 112
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	9a 8b       	std	Y+18, r25	; 0x12
    192e:	89 8b       	std	Y+17, r24	; 0x11
    1930:	89 89       	ldd	r24, Y+17	; 0x11
    1932:	9a 89       	ldd	r25, Y+18	; 0x12
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <fwd_front_step+0x9a8>
    1938:	9a 8b       	std	Y+18, r25	; 0x12
    193a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8b 89       	ldd	r24, Y+19	; 0x13
    193e:	9c 89       	ldd	r25, Y+20	; 0x14
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9c 8b       	std	Y+20, r25	; 0x14
    1944:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8b 89       	ldd	r24, Y+19	; 0x13
    1948:	9c 89       	ldd	r25, Y+20	; 0x14
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <fwd_front_step+0x99c>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <fwd_front_step+0x9ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	6d 89       	ldd	r22, Y+21	; 0x15
    1952:	7e 89       	ldd	r23, Y+22	; 0x16
    1954:	8f 89       	ldd	r24, Y+23	; 0x17
    1956:	98 8d       	ldd	r25, Y+24	; 0x18
    1958:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	9c 8b       	std	Y+20, r25	; 0x14
    1962:	8b 8b       	std	Y+19, r24	; 0x13
    1964:	8b 89       	ldd	r24, Y+19	; 0x13
    1966:	9c 89       	ldd	r25, Y+20	; 0x14
    1968:	98 8b       	std	Y+16, r25	; 0x10
    196a:	8f 87       	std	Y+15, r24	; 0x0f
    196c:	8f 85       	ldd	r24, Y+15	; 0x0f
    196e:	98 89       	ldd	r25, Y+16	; 0x10
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <fwd_front_step+0x9e4>
    1974:	98 8b       	std	Y+16, r25	; 0x10
    1976:	8f 87       	std	Y+15, r24	; 0x0f
 _delay_ms(250);
 angle_3B(125); angle_5B(55);    // put down arm
    1978:	8d e7       	ldi	r24, 0x7D	; 125
    197a:	0e 94 12 06 	call	0xc24	; 0xc24 <angle_3B>
    197e:	87 e3       	ldi	r24, 0x37	; 55
    1980:	0e 94 9c 06 	call	0xd38	; 0xd38 <angle_5B>
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	aa e7       	ldi	r26, 0x7A	; 122
    198a:	b3 e4       	ldi	r27, 0x43	; 67
    198c:	8b 87       	std	Y+11, r24	; 0x0b
    198e:	9c 87       	std	Y+12, r25	; 0x0c
    1990:	ad 87       	std	Y+13, r26	; 0x0d
    1992:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1994:	6b 85       	ldd	r22, Y+11	; 0x0b
    1996:	7c 85       	ldd	r23, Y+12	; 0x0c
    1998:	8d 85       	ldd	r24, Y+13	; 0x0d
    199a:	9e 85       	ldd	r25, Y+14	; 0x0e
    199c:	26 e6       	ldi	r18, 0x66	; 102
    199e:	36 e6       	ldi	r19, 0x66	; 102
    19a0:	46 e6       	ldi	r20, 0x66	; 102
    19a2:	55 e4       	ldi	r21, 0x45	; 69
    19a4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	8f 83       	std	Y+7, r24	; 0x07
    19ae:	98 87       	std	Y+8, r25	; 0x08
    19b0:	a9 87       	std	Y+9, r26	; 0x09
    19b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b4:	6f 81       	ldd	r22, Y+7	; 0x07
    19b6:	78 85       	ldd	r23, Y+8	; 0x08
    19b8:	89 85       	ldd	r24, Y+9	; 0x09
    19ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e8       	ldi	r20, 0x80	; 128
    19c2:	5f e3       	ldi	r21, 0x3F	; 63
    19c4:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    19c8:	88 23       	and	r24, r24
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <fwd_front_step+0xa4a>
		__ticks = 1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	3f c0       	rjmp	.+126    	; 0x1a54 <fwd_front_step+0xac8>
	else if (__tmp > 65535)
    19d6:	6f 81       	ldd	r22, Y+7	; 0x07
    19d8:	78 85       	ldd	r23, Y+8	; 0x08
    19da:	89 85       	ldd	r24, Y+9	; 0x09
    19dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	3f ef       	ldi	r19, 0xFF	; 255
    19e2:	4f e7       	ldi	r20, 0x7F	; 127
    19e4:	57 e4       	ldi	r21, 0x47	; 71
    19e6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    19ea:	18 16       	cp	r1, r24
    19ec:	4c f5       	brge	.+82     	; 0x1a40 <fwd_front_step+0xab4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e2       	ldi	r20, 0x20	; 32
    19fc:	51 e4       	ldi	r21, 0x41	; 65
    19fe:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
    1a0a:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
    1a16:	0f c0       	rjmp	.+30     	; 0x1a36 <fwd_front_step+0xaaa>
    1a18:	80 e7       	ldi	r24, 0x70	; 112
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	9c 83       	std	Y+4, r25	; 0x04
    1a1e:	8b 83       	std	Y+3, r24	; 0x03
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <fwd_front_step+0xa98>
    1a28:	9c 83       	std	Y+4, r25	; 0x04
    1a2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	69 f7       	brne	.-38     	; 0x1a18 <fwd_front_step+0xa8c>
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <fwd_front_step+0xadc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a40:	6f 81       	ldd	r22, Y+7	; 0x07
    1a42:	78 85       	ldd	r23, Y+8	; 0x08
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9e 83       	std	Y+6, r25	; 0x06
    1a52:	8d 83       	std	Y+5, r24	; 0x05
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	9a 83       	std	Y+2, r25	; 0x02
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <fwd_front_step+0xad4>
    1a64:	9a 83       	std	Y+2, r25	; 0x02
    1a66:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(250); 
}
    1a68:	c2 58       	subi	r28, 0x82	; 130
    1a6a:	df 4f       	sbci	r29, 0xFF	; 255
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	08 95       	ret

00001a80 <back_front_step>:
//--------------------------------------------------------------------------------
// This function is used for positioning robot's arms in backward direction just 
// before applying stroke to push the robot backward.
//--------------------------------------------------------------------------------
void back_front_step()
{
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	ce 57       	subi	r28, 0x7E	; 126
    1a8e:	d0 40       	sbci	r29, 0x00	; 0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
 //arm 3 and 5 move back
 angle_3B(90); angle_3C(90); angle_5B(90); angle_5C(90); //3rd & 5th arm BC servo up by 90
    1a9a:	8a e5       	ldi	r24, 0x5A	; 90
    1a9c:	0e 94 12 06 	call	0xc24	; 0xc24 <angle_3B>
    1aa0:	8a e5       	ldi	r24, 0x5A	; 90
    1aa2:	0e 94 29 06 	call	0xc52	; 0xc52 <angle_3C>
    1aa6:	8a e5       	ldi	r24, 0x5A	; 90
    1aa8:	0e 94 9c 06 	call	0xd38	; 0xd38 <angle_5B>
    1aac:	8a e5       	ldi	r24, 0x5A	; 90
    1aae:	0e 94 b3 06 	call	0xd66	; 0xd66 <angle_5C>
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e5 58       	subi	r30, 0x85	; 133
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	aa e7       	ldi	r26, 0x7A	; 122
    1abe:	b3 e4       	ldi	r27, 0x43	; 67
    1ac0:	80 83       	st	Z, r24
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	a2 83       	std	Z+2, r26	; 0x02
    1ac6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	8e 01       	movw	r16, r28
    1aca:	09 58       	subi	r16, 0x89	; 137
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e5 58       	subi	r30, 0x85	; 133
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	26 e6       	ldi	r18, 0x66	; 102
    1ade:	36 e6       	ldi	r19, 0x66	; 102
    1ae0:	46 e6       	ldi	r20, 0x66	; 102
    1ae2:	55 e4       	ldi	r21, 0x45	; 69
    1ae4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	f8 01       	movw	r30, r16
    1aee:	80 83       	st	Z, r24
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	a2 83       	std	Z+2, r26	; 0x02
    1af4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1af6:	fe 01       	movw	r30, r28
    1af8:	e9 58       	subi	r30, 0x89	; 137
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	60 81       	ld	r22, Z
    1afe:	71 81       	ldd	r23, Z+1	; 0x01
    1b00:	82 81       	ldd	r24, Z+2	; 0x02
    1b02:	93 81       	ldd	r25, Z+3	; 0x03
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	44 f4       	brge	.+16     	; 0x1b24 <back_front_step+0xa4>
		__ticks = 1;
    1b14:	fe 01       	movw	r30, r28
    1b16:	eb 58       	subi	r30, 0x8B	; 139
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
    1b22:	64 c0       	rjmp	.+200    	; 0x1bec <back_front_step+0x16c>
	else if (__tmp > 65535)
    1b24:	fe 01       	movw	r30, r28
    1b26:	e9 58       	subi	r30, 0x89	; 137
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	0c f0       	brlt	.+2      	; 0x1b44 <back_front_step+0xc4>
    1b42:	43 c0       	rjmp	.+134    	; 0x1bca <back_front_step+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b44:	fe 01       	movw	r30, r28
    1b46:	e5 58       	subi	r30, 0x85	; 133
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	60 81       	ld	r22, Z
    1b4c:	71 81       	ldd	r23, Z+1	; 0x01
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	8e 01       	movw	r16, r28
    1b64:	0b 58       	subi	r16, 0x8B	; 139
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	f8 01       	movw	r30, r16
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
    1b7a:	1f c0       	rjmp	.+62     	; 0x1bba <back_front_step+0x13a>
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	ed 58       	subi	r30, 0x8D	; 141
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	80 e7       	ldi	r24, 0x70	; 112
    1b84:	91 e0       	ldi	r25, 0x01	; 1
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	ed 58       	subi	r30, 0x8D	; 141
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	80 81       	ld	r24, Z
    1b92:	91 81       	ldd	r25, Z+1	; 0x01
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <back_front_step+0x114>
    1b98:	fe 01       	movw	r30, r28
    1b9a:	ed 58       	subi	r30, 0x8D	; 141
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba2:	de 01       	movw	r26, r28
    1ba4:	ab 58       	subi	r26, 0x8B	; 139
    1ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba8:	fe 01       	movw	r30, r28
    1baa:	eb 58       	subi	r30, 0x8B	; 139
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	80 81       	ld	r24, Z
    1bb0:	91 81       	ldd	r25, Z+1	; 0x01
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	11 96       	adiw	r26, 0x01	; 1
    1bb6:	9c 93       	st	X, r25
    1bb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	fe 01       	movw	r30, r28
    1bbc:	eb 58       	subi	r30, 0x8B	; 139
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	80 81       	ld	r24, Z
    1bc2:	91 81       	ldd	r25, Z+1	; 0x01
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	d1 f6       	brne	.-76     	; 0x1b7c <back_front_step+0xfc>
    1bc8:	27 c0       	rjmp	.+78     	; 0x1c18 <back_front_step+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bca:	8e 01       	movw	r16, r28
    1bcc:	0b 58       	subi	r16, 0x8B	; 139
    1bce:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	e9 58       	subi	r30, 0x89	; 137
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	f8 01       	movw	r30, r16
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
    1bec:	de 01       	movw	r26, r28
    1bee:	af 58       	subi	r26, 0x8F	; 143
    1bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	eb 58       	subi	r30, 0x8B	; 139
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	8d 93       	st	X+, r24
    1bfe:	9c 93       	st	X, r25
    1c00:	fe 01       	movw	r30, r28
    1c02:	ef 58       	subi	r30, 0x8F	; 143
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <back_front_step+0x18a>
    1c0e:	fe 01       	movw	r30, r28
    1c10:	ef 58       	subi	r30, 0x8F	; 143
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
 _delay_ms(250); 
 angle_3A(65); angle_5A(70);     //move backward while arms are up
    1c18:	81 e4       	ldi	r24, 0x41	; 65
    1c1a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <angle_3A>
    1c1e:	86 e4       	ldi	r24, 0x46	; 70
    1c20:	0e 94 85 06 	call	0xd0a	; 0xd0a <angle_5A>
    1c24:	fe 01       	movw	r30, r28
    1c26:	e3 59       	subi	r30, 0x93	; 147
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	aa e7       	ldi	r26, 0x7A	; 122
    1c30:	b3 e4       	ldi	r27, 0x43	; 67
    1c32:	80 83       	st	Z, r24
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	a2 83       	std	Z+2, r26	; 0x02
    1c38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	8e 01       	movw	r16, r28
    1c3c:	07 59       	subi	r16, 0x97	; 151
    1c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c40:	fe 01       	movw	r30, r28
    1c42:	e3 59       	subi	r30, 0x93	; 147
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	26 e6       	ldi	r18, 0x66	; 102
    1c50:	36 e6       	ldi	r19, 0x66	; 102
    1c52:	46 e6       	ldi	r20, 0x66	; 102
    1c54:	55 e4       	ldi	r21, 0x45	; 69
    1c56:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	f8 01       	movw	r30, r16
    1c60:	80 83       	st	Z, r24
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	a2 83       	std	Z+2, r26	; 0x02
    1c66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e7 59       	subi	r30, 0x97	; 151
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	60 81       	ld	r22, Z
    1c70:	71 81       	ldd	r23, Z+1	; 0x01
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	44 f4       	brge	.+16     	; 0x1c96 <back_front_step+0x216>
		__ticks = 1;
    1c86:	fe 01       	movw	r30, r28
    1c88:	e9 59       	subi	r30, 0x99	; 153
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	64 c0       	rjmp	.+200    	; 0x1d5e <back_front_step+0x2de>
	else if (__tmp > 65535)
    1c96:	fe 01       	movw	r30, r28
    1c98:	e7 59       	subi	r30, 0x97	; 151
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	0c f0       	brlt	.+2      	; 0x1cb6 <back_front_step+0x236>
    1cb4:	43 c0       	rjmp	.+134    	; 0x1d3c <back_front_step+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e3 59       	subi	r30, 0x93	; 147
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8e 01       	movw	r16, r28
    1cd6:	09 59       	subi	r16, 0x99	; 153
    1cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
    1cec:	1f c0       	rjmp	.+62     	; 0x1d2c <back_front_step+0x2ac>
    1cee:	fe 01       	movw	r30, r28
    1cf0:	eb 59       	subi	r30, 0x9B	; 155
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 e7       	ldi	r24, 0x70	; 112
    1cf6:	91 e0       	ldi	r25, 0x01	; 1
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	eb 59       	subi	r30, 0x9B	; 155
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <back_front_step+0x286>
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	eb 59       	subi	r30, 0x9B	; 155
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d14:	de 01       	movw	r26, r28
    1d16:	a9 59       	subi	r26, 0x99	; 153
    1d18:	bf 4f       	sbci	r27, 0xFF	; 255
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e9 59       	subi	r30, 0x99	; 153
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	11 96       	adiw	r26, 0x01	; 1
    1d28:	9c 93       	st	X, r25
    1d2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e9 59       	subi	r30, 0x99	; 153
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	d1 f6       	brne	.-76     	; 0x1cee <back_front_step+0x26e>
    1d3a:	27 c0       	rjmp	.+78     	; 0x1d8a <back_front_step+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	8e 01       	movw	r16, r28
    1d3e:	09 59       	subi	r16, 0x99	; 153
    1d40:	1f 4f       	sbci	r17, 0xFF	; 255
    1d42:	fe 01       	movw	r30, r28
    1d44:	e7 59       	subi	r30, 0x97	; 151
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	f8 01       	movw	r30, r16
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	80 83       	st	Z, r24
    1d5e:	de 01       	movw	r26, r28
    1d60:	ad 59       	subi	r26, 0x9D	; 157
    1d62:	bf 4f       	sbci	r27, 0xFF	; 255
    1d64:	fe 01       	movw	r30, r28
    1d66:	e9 59       	subi	r30, 0x99	; 153
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	8d 93       	st	X+, r24
    1d70:	9c 93       	st	X, r25
    1d72:	fe 01       	movw	r30, r28
    1d74:	ed 59       	subi	r30, 0x9D	; 157
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <back_front_step+0x2fc>
    1d80:	fe 01       	movw	r30, r28
    1d82:	ed 59       	subi	r30, 0x9D	; 157
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
 _delay_ms(250); 
 angle_3B(125); angle_5B(55);    // put down arm
    1d8a:	8d e7       	ldi	r24, 0x7D	; 125
    1d8c:	0e 94 12 06 	call	0xc24	; 0xc24 <angle_3B>
    1d90:	87 e3       	ldi	r24, 0x37	; 55
    1d92:	0e 94 9c 06 	call	0xd38	; 0xd38 <angle_5B>
    1d96:	fe 01       	movw	r30, r28
    1d98:	e1 5a       	subi	r30, 0xA1	; 161
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	aa e7       	ldi	r26, 0x7A	; 122
    1da2:	b3 e4       	ldi	r27, 0x43	; 67
    1da4:	80 83       	st	Z, r24
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	a2 83       	std	Z+2, r26	; 0x02
    1daa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	8e 01       	movw	r16, r28
    1dae:	05 5a       	subi	r16, 0xA5	; 165
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	e1 5a       	subi	r30, 0xA1	; 161
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	26 e6       	ldi	r18, 0x66	; 102
    1dc2:	36 e6       	ldi	r19, 0x66	; 102
    1dc4:	46 e6       	ldi	r20, 0x66	; 102
    1dc6:	55 e4       	ldi	r21, 0x45	; 69
    1dc8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	80 83       	st	Z, r24
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	a2 83       	std	Z+2, r26	; 0x02
    1dd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e5 5a       	subi	r30, 0xA5	; 165
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	44 f4       	brge	.+16     	; 0x1e08 <back_front_step+0x388>
		__ticks = 1;
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e7 5a       	subi	r30, 0xA7	; 167
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    1e06:	64 c0       	rjmp	.+200    	; 0x1ed0 <back_front_step+0x450>
	else if (__tmp > 65535)
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e5 5a       	subi	r30, 0xA5	; 165
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	0c f0       	brlt	.+2      	; 0x1e28 <back_front_step+0x3a8>
    1e26:	43 c0       	rjmp	.+134    	; 0x1eae <back_front_step+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e1 5a       	subi	r30, 0xA1	; 161
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	8e 01       	movw	r16, r28
    1e48:	07 5a       	subi	r16, 0xA7	; 167
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	f8 01       	movw	r30, r16
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
    1e5e:	1f c0       	rjmp	.+62     	; 0x1e9e <back_front_step+0x41e>
    1e60:	fe 01       	movw	r30, r28
    1e62:	e9 5a       	subi	r30, 0xA9	; 169
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 e7       	ldi	r24, 0x70	; 112
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e9 5a       	subi	r30, 0xA9	; 169
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <back_front_step+0x3f8>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e9 5a       	subi	r30, 0xA9	; 169
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e86:	de 01       	movw	r26, r28
    1e88:	a7 5a       	subi	r26, 0xA7	; 167
    1e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e7 5a       	subi	r30, 0xA7	; 167
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	9c 93       	st	X, r25
    1e9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e7 5a       	subi	r30, 0xA7	; 167
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	d1 f6       	brne	.-76     	; 0x1e60 <back_front_step+0x3e0>
    1eac:	27 c0       	rjmp	.+78     	; 0x1efc <back_front_step+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eae:	8e 01       	movw	r16, r28
    1eb0:	07 5a       	subi	r16, 0xA7	; 167
    1eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e5 5a       	subi	r30, 0xA5	; 165
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	f8 01       	movw	r30, r16
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	de 01       	movw	r26, r28
    1ed2:	ab 5a       	subi	r26, 0xAB	; 171
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e7 5a       	subi	r30, 0xA7	; 167
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	8d 93       	st	X+, r24
    1ee2:	9c 93       	st	X, r25
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	eb 5a       	subi	r30, 0xAB	; 171
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 81       	ld	r24, Z
    1eec:	91 81       	ldd	r25, Z+1	; 0x01
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <back_front_step+0x46e>
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	eb 5a       	subi	r30, 0xAB	; 171
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
 _delay_ms(250); 

 //arm 1 and 6 move back
 angle_1B(90); angle_1C(90); angle_6B(90); angle_6C(90); //1st & 6th arm BC servo up by 90
    1efc:	8a e5       	ldi	r24, 0x5A	; 90
    1efe:	0e 94 88 05 	call	0xb10	; 0xb10 <angle_1B>
    1f02:	8a e5       	ldi	r24, 0x5A	; 90
    1f04:	0e 94 9f 05 	call	0xb3e	; 0xb3e <angle_1C>
    1f08:	8a e5       	ldi	r24, 0x5A	; 90
    1f0a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <angle_6B>
    1f0e:	8a e5       	ldi	r24, 0x5A	; 90
    1f10:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <angle_6C>
    1f14:	fe 01       	movw	r30, r28
    1f16:	ef 5a       	subi	r30, 0xAF	; 175
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	aa e7       	ldi	r26, 0x7A	; 122
    1f20:	b3 e4       	ldi	r27, 0x43	; 67
    1f22:	80 83       	st	Z, r24
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	a2 83       	std	Z+2, r26	; 0x02
    1f28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	03 5b       	subi	r16, 0xB3	; 179
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	ef 5a       	subi	r30, 0xAF	; 175
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	26 e6       	ldi	r18, 0x66	; 102
    1f40:	36 e6       	ldi	r19, 0x66	; 102
    1f42:	46 e6       	ldi	r20, 0x66	; 102
    1f44:	55 e4       	ldi	r21, 0x45	; 69
    1f46:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	f8 01       	movw	r30, r16
    1f50:	80 83       	st	Z, r24
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	a2 83       	std	Z+2, r26	; 0x02
    1f56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f58:	fe 01       	movw	r30, r28
    1f5a:	e3 5b       	subi	r30, 0xB3	; 179
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	60 81       	ld	r22, Z
    1f60:	71 81       	ldd	r23, Z+1	; 0x01
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    1f72:	88 23       	and	r24, r24
    1f74:	44 f4       	brge	.+16     	; 0x1f86 <back_front_step+0x506>
		__ticks = 1;
    1f76:	fe 01       	movw	r30, r28
    1f78:	e5 5b       	subi	r30, 0xB5	; 181
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	80 83       	st	Z, r24
    1f84:	64 c0       	rjmp	.+200    	; 0x204e <back_front_step+0x5ce>
	else if (__tmp > 65535)
    1f86:	fe 01       	movw	r30, r28
    1f88:	e3 5b       	subi	r30, 0xB3	; 179
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	60 81       	ld	r22, Z
    1f8e:	71 81       	ldd	r23, Z+1	; 0x01
    1f90:	82 81       	ldd	r24, Z+2	; 0x02
    1f92:	93 81       	ldd	r25, Z+3	; 0x03
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	0c f0       	brlt	.+2      	; 0x1fa6 <back_front_step+0x526>
    1fa4:	43 c0       	rjmp	.+134    	; 0x202c <back_front_step+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	ef 5a       	subi	r30, 0xAF	; 175
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	51 e4       	ldi	r21, 0x41	; 65
    1fbc:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	8e 01       	movw	r16, r28
    1fc6:	05 5b       	subi	r16, 0xB5	; 181
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24
    1fdc:	1f c0       	rjmp	.+62     	; 0x201c <back_front_step+0x59c>
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e7 5b       	subi	r30, 0xB7	; 183
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 e7       	ldi	r24, 0x70	; 112
    1fe6:	91 e0       	ldi	r25, 0x01	; 1
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
    1fec:	fe 01       	movw	r30, r28
    1fee:	e7 5b       	subi	r30, 0xB7	; 183
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <back_front_step+0x576>
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e7 5b       	subi	r30, 0xB7	; 183
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	de 01       	movw	r26, r28
    2006:	a5 5b       	subi	r26, 0xB5	; 181
    2008:	bf 4f       	sbci	r27, 0xFF	; 255
    200a:	fe 01       	movw	r30, r28
    200c:	e5 5b       	subi	r30, 0xB5	; 181
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 81       	ld	r24, Z
    2012:	91 81       	ldd	r25, Z+1	; 0x01
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	11 96       	adiw	r26, 0x01	; 1
    2018:	9c 93       	st	X, r25
    201a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	fe 01       	movw	r30, r28
    201e:	e5 5b       	subi	r30, 0xB5	; 181
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	d1 f6       	brne	.-76     	; 0x1fde <back_front_step+0x55e>
    202a:	27 c0       	rjmp	.+78     	; 0x207a <back_front_step+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	8e 01       	movw	r16, r28
    202e:	05 5b       	subi	r16, 0xB5	; 181
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	fe 01       	movw	r30, r28
    2034:	e3 5b       	subi	r30, 0xB3	; 179
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	93 81       	ldd	r25, Z+3	; 0x03
    2040:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	f8 01       	movw	r30, r16
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
    204e:	de 01       	movw	r26, r28
    2050:	a9 5b       	subi	r26, 0xB9	; 185
    2052:	bf 4f       	sbci	r27, 0xFF	; 255
    2054:	fe 01       	movw	r30, r28
    2056:	e5 5b       	subi	r30, 0xB5	; 181
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	8d 93       	st	X+, r24
    2060:	9c 93       	st	X, r25
    2062:	fe 01       	movw	r30, r28
    2064:	e9 5b       	subi	r30, 0xB9	; 185
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 81       	ld	r24, Z
    206a:	91 81       	ldd	r25, Z+1	; 0x01
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <back_front_step+0x5ec>
    2070:	fe 01       	movw	r30, r28
    2072:	e9 5b       	subi	r30, 0xB9	; 185
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
 _delay_ms(250); 
 angle_1A(155); angle_6A(115);   //move backward while arms are up
    207a:	8b e9       	ldi	r24, 0x9B	; 155
    207c:	0e 94 71 05 	call	0xae2	; 0xae2 <angle_1A>
    2080:	83 e7       	ldi	r24, 0x73	; 115
    2082:	0e 94 ca 06 	call	0xd94	; 0xd94 <angle_6A>
    2086:	fe 01       	movw	r30, r28
    2088:	ed 5b       	subi	r30, 0xBD	; 189
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	aa e7       	ldi	r26, 0x7A	; 122
    2092:	b3 e4       	ldi	r27, 0x43	; 67
    2094:	80 83       	st	Z, r24
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	a2 83       	std	Z+2, r26	; 0x02
    209a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209c:	8e 01       	movw	r16, r28
    209e:	01 5c       	subi	r16, 0xC1	; 193
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	fe 01       	movw	r30, r28
    20a4:	ed 5b       	subi	r30, 0xBD	; 189
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	26 e6       	ldi	r18, 0x66	; 102
    20b2:	36 e6       	ldi	r19, 0x66	; 102
    20b4:	46 e6       	ldi	r20, 0x66	; 102
    20b6:	55 e4       	ldi	r21, 0x45	; 69
    20b8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	f8 01       	movw	r30, r16
    20c2:	80 83       	st	Z, r24
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	a2 83       	std	Z+2, r26	; 0x02
    20c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ca:	fe 01       	movw	r30, r28
    20cc:	ff 96       	adiw	r30, 0x3f	; 63
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5f e3       	ldi	r21, 0x3F	; 63
    20de:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	2c f4       	brge	.+10     	; 0x20f0 <back_front_step+0x670>
		__ticks = 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9e af       	std	Y+62, r25	; 0x3e
    20ec:	8d af       	std	Y+61, r24	; 0x3d
    20ee:	46 c0       	rjmp	.+140    	; 0x217c <back_front_step+0x6fc>
	else if (__tmp > 65535)
    20f0:	fe 01       	movw	r30, r28
    20f2:	ff 96       	adiw	r30, 0x3f	; 63
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	64 f5       	brge	.+88     	; 0x2164 <back_front_step+0x6e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	fe 01       	movw	r30, r28
    210e:	ed 5b       	subi	r30, 0xBD	; 189
    2110:	ff 4f       	sbci	r31, 0xFF	; 255
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	51 e4       	ldi	r21, 0x41	; 65
    2122:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9e af       	std	Y+62, r25	; 0x3e
    2138:	8d af       	std	Y+61, r24	; 0x3d
    213a:	0f c0       	rjmp	.+30     	; 0x215a <back_front_step+0x6da>
    213c:	80 e7       	ldi	r24, 0x70	; 112
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	9c af       	std	Y+60, r25	; 0x3c
    2142:	8b af       	std	Y+59, r24	; 0x3b
    2144:	8b ad       	ldd	r24, Y+59	; 0x3b
    2146:	9c ad       	ldd	r25, Y+60	; 0x3c
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <back_front_step+0x6c8>
    214c:	9c af       	std	Y+60, r25	; 0x3c
    214e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2150:	8d ad       	ldd	r24, Y+61	; 0x3d
    2152:	9e ad       	ldd	r25, Y+62	; 0x3e
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	9e af       	std	Y+62, r25	; 0x3e
    2158:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215a:	8d ad       	ldd	r24, Y+61	; 0x3d
    215c:	9e ad       	ldd	r25, Y+62	; 0x3e
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	69 f7       	brne	.-38     	; 0x213c <back_front_step+0x6bc>
    2162:	16 c0       	rjmp	.+44     	; 0x2190 <back_front_step+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2164:	fe 01       	movw	r30, r28
    2166:	ff 96       	adiw	r30, 0x3f	; 63
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e af       	std	Y+62, r25	; 0x3e
    217a:	8d af       	std	Y+61, r24	; 0x3d
    217c:	8d ad       	ldd	r24, Y+61	; 0x3d
    217e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2180:	9a af       	std	Y+58, r25	; 0x3a
    2182:	89 af       	std	Y+57, r24	; 0x39
    2184:	89 ad       	ldd	r24, Y+57	; 0x39
    2186:	9a ad       	ldd	r25, Y+58	; 0x3a
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <back_front_step+0x708>
    218c:	9a af       	std	Y+58, r25	; 0x3a
    218e:	89 af       	std	Y+57, r24	; 0x39
 _delay_ms(250); 
 angle_1B(125); angle_6B(55);    // put down arm
    2190:	8d e7       	ldi	r24, 0x7D	; 125
    2192:	0e 94 88 05 	call	0xb10	; 0xb10 <angle_1B>
    2196:	87 e3       	ldi	r24, 0x37	; 55
    2198:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <angle_6B>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	aa e7       	ldi	r26, 0x7A	; 122
    21a2:	b3 e4       	ldi	r27, 0x43	; 67
    21a4:	8d ab       	std	Y+53, r24	; 0x35
    21a6:	9e ab       	std	Y+54, r25	; 0x36
    21a8:	af ab       	std	Y+55, r26	; 0x37
    21aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	6d a9       	ldd	r22, Y+53	; 0x35
    21ae:	7e a9       	ldd	r23, Y+54	; 0x36
    21b0:	8f a9       	ldd	r24, Y+55	; 0x37
    21b2:	98 ad       	ldd	r25, Y+56	; 0x38
    21b4:	26 e6       	ldi	r18, 0x66	; 102
    21b6:	36 e6       	ldi	r19, 0x66	; 102
    21b8:	46 e6       	ldi	r20, 0x66	; 102
    21ba:	55 e4       	ldi	r21, 0x45	; 69
    21bc:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	89 ab       	std	Y+49, r24	; 0x31
    21c6:	9a ab       	std	Y+50, r25	; 0x32
    21c8:	ab ab       	std	Y+51, r26	; 0x33
    21ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21cc:	69 a9       	ldd	r22, Y+49	; 0x31
    21ce:	7a a9       	ldd	r23, Y+50	; 0x32
    21d0:	8b a9       	ldd	r24, Y+51	; 0x33
    21d2:	9c a9       	ldd	r25, Y+52	; 0x34
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	2c f4       	brge	.+10     	; 0x21ee <back_front_step+0x76e>
		__ticks = 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	98 ab       	std	Y+48, r25	; 0x30
    21ea:	8f a7       	std	Y+47, r24	; 0x2f
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <__stack+0x6d>
	else if (__tmp > 65535)
    21ee:	69 a9       	ldd	r22, Y+49	; 0x31
    21f0:	7a a9       	ldd	r23, Y+50	; 0x32
    21f2:	8b a9       	ldd	r24, Y+51	; 0x33
    21f4:	9c a9       	ldd	r25, Y+52	; 0x34
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	4c f5       	brge	.+82     	; 0x2258 <__stack+0x59>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	6d a9       	ldd	r22, Y+53	; 0x35
    2208:	7e a9       	ldd	r23, Y+54	; 0x36
    220a:	8f a9       	ldd	r24, Y+55	; 0x37
    220c:	98 ad       	ldd	r25, Y+56	; 0x38
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	98 ab       	std	Y+48, r25	; 0x30
    222c:	8f a7       	std	Y+47, r24	; 0x2f
    222e:	0f c0       	rjmp	.+30     	; 0x224e <__stack+0x4f>
    2230:	80 e7       	ldi	r24, 0x70	; 112
    2232:	91 e0       	ldi	r25, 0x01	; 1
    2234:	9e a7       	std	Y+46, r25	; 0x2e
    2236:	8d a7       	std	Y+45, r24	; 0x2d
    2238:	8d a5       	ldd	r24, Y+45	; 0x2d
    223a:	9e a5       	ldd	r25, Y+46	; 0x2e
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <__stack+0x3d>
    2240:	9e a7       	std	Y+46, r25	; 0x2e
    2242:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	8f a5       	ldd	r24, Y+47	; 0x2f
    2246:	98 a9       	ldd	r25, Y+48	; 0x30
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	98 ab       	std	Y+48, r25	; 0x30
    224c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2250:	98 a9       	ldd	r25, Y+48	; 0x30
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	69 f7       	brne	.-38     	; 0x2230 <__stack+0x31>
    2256:	14 c0       	rjmp	.+40     	; 0x2280 <__stack+0x81>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2258:	69 a9       	ldd	r22, Y+49	; 0x31
    225a:	7a a9       	ldd	r23, Y+50	; 0x32
    225c:	8b a9       	ldd	r24, Y+51	; 0x33
    225e:	9c a9       	ldd	r25, Y+52	; 0x34
    2260:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	8f a5       	ldd	r24, Y+47	; 0x2f
    226e:	98 a9       	ldd	r25, Y+48	; 0x30
    2270:	9c a7       	std	Y+44, r25	; 0x2c
    2272:	8b a7       	std	Y+43, r24	; 0x2b
    2274:	8b a5       	ldd	r24, Y+43	; 0x2b
    2276:	9c a5       	ldd	r25, Y+44	; 0x2c
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <__stack+0x79>
    227c:	9c a7       	std	Y+44, r25	; 0x2c
    227e:	8b a7       	std	Y+43, r24	; 0x2b
 _delay_ms(250);
 
 //arm 2 and 4 move back
 angle_2B(90); angle_2C(90); angle_4B(90); angle_4C(90); //2nd & 4th arm BC servo up by 90
    2280:	8a e5       	ldi	r24, 0x5A	; 90
    2282:	0e 94 cd 05 	call	0xb9a	; 0xb9a <angle_2B>
    2286:	8a e5       	ldi	r24, 0x5A	; 90
    2288:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <angle_2C>
    228c:	8a e5       	ldi	r24, 0x5A	; 90
    228e:	0e 94 57 06 	call	0xcae	; 0xcae <angle_4B>
    2292:	8a e5       	ldi	r24, 0x5A	; 90
    2294:	0e 94 6e 06 	call	0xcdc	; 0xcdc <angle_4C>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	aa e7       	ldi	r26, 0x7A	; 122
    229e:	b3 e4       	ldi	r27, 0x43	; 67
    22a0:	8f a3       	std	Y+39, r24	; 0x27
    22a2:	98 a7       	std	Y+40, r25	; 0x28
    22a4:	a9 a7       	std	Y+41, r26	; 0x29
    22a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a8:	6f a1       	ldd	r22, Y+39	; 0x27
    22aa:	78 a5       	ldd	r23, Y+40	; 0x28
    22ac:	89 a5       	ldd	r24, Y+41	; 0x29
    22ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b0:	26 e6       	ldi	r18, 0x66	; 102
    22b2:	36 e6       	ldi	r19, 0x66	; 102
    22b4:	46 e6       	ldi	r20, 0x66	; 102
    22b6:	55 e4       	ldi	r21, 0x45	; 69
    22b8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	8b a3       	std	Y+35, r24	; 0x23
    22c2:	9c a3       	std	Y+36, r25	; 0x24
    22c4:	ad a3       	std	Y+37, r26	; 0x25
    22c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22c8:	6b a1       	ldd	r22, Y+35	; 0x23
    22ca:	7c a1       	ldd	r23, Y+36	; 0x24
    22cc:	8d a1       	ldd	r24, Y+37	; 0x25
    22ce:	9e a1       	ldd	r25, Y+38	; 0x26
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e8       	ldi	r20, 0x80	; 128
    22d6:	5f e3       	ldi	r21, 0x3F	; 63
    22d8:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    22dc:	88 23       	and	r24, r24
    22de:	2c f4       	brge	.+10     	; 0x22ea <__stack+0xeb>
		__ticks = 1;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9a a3       	std	Y+34, r25	; 0x22
    22e6:	89 a3       	std	Y+33, r24	; 0x21
    22e8:	3f c0       	rjmp	.+126    	; 0x2368 <__stack+0x169>
	else if (__tmp > 65535)
    22ea:	6b a1       	ldd	r22, Y+35	; 0x23
    22ec:	7c a1       	ldd	r23, Y+36	; 0x24
    22ee:	8d a1       	ldd	r24, Y+37	; 0x25
    22f0:	9e a1       	ldd	r25, Y+38	; 0x26
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	3f ef       	ldi	r19, 0xFF	; 255
    22f6:	4f e7       	ldi	r20, 0x7F	; 127
    22f8:	57 e4       	ldi	r21, 0x47	; 71
    22fa:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    22fe:	18 16       	cp	r1, r24
    2300:	4c f5       	brge	.+82     	; 0x2354 <__stack+0x155>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	6f a1       	ldd	r22, Y+39	; 0x27
    2304:	78 a5       	ldd	r23, Y+40	; 0x28
    2306:	89 a5       	ldd	r24, Y+41	; 0x29
    2308:	9a a5       	ldd	r25, Y+42	; 0x2a
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e2       	ldi	r20, 0x20	; 32
    2310:	51 e4       	ldi	r21, 0x41	; 65
    2312:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9a a3       	std	Y+34, r25	; 0x22
    2328:	89 a3       	std	Y+33, r24	; 0x21
    232a:	0f c0       	rjmp	.+30     	; 0x234a <__stack+0x14b>
    232c:	80 e7       	ldi	r24, 0x70	; 112
    232e:	91 e0       	ldi	r25, 0x01	; 1
    2330:	98 a3       	std	Y+32, r25	; 0x20
    2332:	8f 8f       	std	Y+31, r24	; 0x1f
    2334:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2336:	98 a1       	ldd	r25, Y+32	; 0x20
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <__stack+0x139>
    233c:	98 a3       	std	Y+32, r25	; 0x20
    233e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2340:	89 a1       	ldd	r24, Y+33	; 0x21
    2342:	9a a1       	ldd	r25, Y+34	; 0x22
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	9a a3       	std	Y+34, r25	; 0x22
    2348:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234a:	89 a1       	ldd	r24, Y+33	; 0x21
    234c:	9a a1       	ldd	r25, Y+34	; 0x22
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	69 f7       	brne	.-38     	; 0x232c <__stack+0x12d>
    2352:	14 c0       	rjmp	.+40     	; 0x237c <__stack+0x17d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2354:	6b a1       	ldd	r22, Y+35	; 0x23
    2356:	7c a1       	ldd	r23, Y+36	; 0x24
    2358:	8d a1       	ldd	r24, Y+37	; 0x25
    235a:	9e a1       	ldd	r25, Y+38	; 0x26
    235c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9a a3       	std	Y+34, r25	; 0x22
    2366:	89 a3       	std	Y+33, r24	; 0x21
    2368:	89 a1       	ldd	r24, Y+33	; 0x21
    236a:	9a a1       	ldd	r25, Y+34	; 0x22
    236c:	9e 8f       	std	Y+30, r25	; 0x1e
    236e:	8d 8f       	std	Y+29, r24	; 0x1d
    2370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2372:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <__stack+0x175>
    2378:	9e 8f       	std	Y+30, r25	; 0x1e
    237a:	8d 8f       	std	Y+29, r24	; 0x1d
 _delay_ms(250); 
 angle_2A(110); angle_4A(25);    //move backward while arms are up
    237c:	8e e6       	ldi	r24, 0x6E	; 110
    237e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <angle_2A>
    2382:	89 e1       	ldi	r24, 0x19	; 25
    2384:	0e 94 40 06 	call	0xc80	; 0xc80 <angle_4A>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	aa e7       	ldi	r26, 0x7A	; 122
    238e:	b3 e4       	ldi	r27, 0x43	; 67
    2390:	89 8f       	std	Y+25, r24	; 0x19
    2392:	9a 8f       	std	Y+26, r25	; 0x1a
    2394:	ab 8f       	std	Y+27, r26	; 0x1b
    2396:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	69 8d       	ldd	r22, Y+25	; 0x19
    239a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    239c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a0:	26 e6       	ldi	r18, 0x66	; 102
    23a2:	36 e6       	ldi	r19, 0x66	; 102
    23a4:	46 e6       	ldi	r20, 0x66	; 102
    23a6:	55 e4       	ldi	r21, 0x45	; 69
    23a8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8d 8b       	std	Y+21, r24	; 0x15
    23b2:	9e 8b       	std	Y+22, r25	; 0x16
    23b4:	af 8b       	std	Y+23, r26	; 0x17
    23b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23b8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ba:	7e 89       	ldd	r23, Y+22	; 0x16
    23bc:	8f 89       	ldd	r24, Y+23	; 0x17
    23be:	98 8d       	ldd	r25, Y+24	; 0x18
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <__stack+0x1db>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9c 8b       	std	Y+20, r25	; 0x14
    23d6:	8b 8b       	std	Y+19, r24	; 0x13
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <__stack+0x259>
	else if (__tmp > 65535)
    23da:	6d 89       	ldd	r22, Y+21	; 0x15
    23dc:	7e 89       	ldd	r23, Y+22	; 0x16
    23de:	8f 89       	ldd	r24, Y+23	; 0x17
    23e0:	98 8d       	ldd	r25, Y+24	; 0x18
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	4c f5       	brge	.+82     	; 0x2444 <__stack+0x245>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	69 8d       	ldd	r22, Y+25	; 0x19
    23f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9c 8b       	std	Y+20, r25	; 0x14
    2418:	8b 8b       	std	Y+19, r24	; 0x13
    241a:	0f c0       	rjmp	.+30     	; 0x243a <__stack+0x23b>
    241c:	80 e7       	ldi	r24, 0x70	; 112
    241e:	91 e0       	ldi	r25, 0x01	; 1
    2420:	9a 8b       	std	Y+18, r25	; 0x12
    2422:	89 8b       	std	Y+17, r24	; 0x11
    2424:	89 89       	ldd	r24, Y+17	; 0x11
    2426:	9a 89       	ldd	r25, Y+18	; 0x12
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <__stack+0x229>
    242c:	9a 8b       	std	Y+18, r25	; 0x12
    242e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	8b 89       	ldd	r24, Y+19	; 0x13
    2432:	9c 89       	ldd	r25, Y+20	; 0x14
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	9c 8b       	std	Y+20, r25	; 0x14
    2438:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	8b 89       	ldd	r24, Y+19	; 0x13
    243c:	9c 89       	ldd	r25, Y+20	; 0x14
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <__stack+0x21d>
    2442:	14 c0       	rjmp	.+40     	; 0x246c <__stack+0x26d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	6d 89       	ldd	r22, Y+21	; 0x15
    2446:	7e 89       	ldd	r23, Y+22	; 0x16
    2448:	8f 89       	ldd	r24, Y+23	; 0x17
    244a:	98 8d       	ldd	r25, Y+24	; 0x18
    244c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9c 8b       	std	Y+20, r25	; 0x14
    2456:	8b 8b       	std	Y+19, r24	; 0x13
    2458:	8b 89       	ldd	r24, Y+19	; 0x13
    245a:	9c 89       	ldd	r25, Y+20	; 0x14
    245c:	98 8b       	std	Y+16, r25	; 0x10
    245e:	8f 87       	std	Y+15, r24	; 0x0f
    2460:	8f 85       	ldd	r24, Y+15	; 0x0f
    2462:	98 89       	ldd	r25, Y+16	; 0x10
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <__stack+0x265>
    2468:	98 8b       	std	Y+16, r25	; 0x10
    246a:	8f 87       	std	Y+15, r24	; 0x0f
 _delay_ms(250); 
 angle_2B(125); angle_4B(55);    // put down arm
    246c:	8d e7       	ldi	r24, 0x7D	; 125
    246e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <angle_2B>
    2472:	87 e3       	ldi	r24, 0x37	; 55
    2474:	0e 94 57 06 	call	0xcae	; 0xcae <angle_4B>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	aa e7       	ldi	r26, 0x7A	; 122
    247e:	b3 e4       	ldi	r27, 0x43	; 67
    2480:	8b 87       	std	Y+11, r24	; 0x0b
    2482:	9c 87       	std	Y+12, r25	; 0x0c
    2484:	ad 87       	std	Y+13, r26	; 0x0d
    2486:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	6b 85       	ldd	r22, Y+11	; 0x0b
    248a:	7c 85       	ldd	r23, Y+12	; 0x0c
    248c:	8d 85       	ldd	r24, Y+13	; 0x0d
    248e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2490:	26 e6       	ldi	r18, 0x66	; 102
    2492:	36 e6       	ldi	r19, 0x66	; 102
    2494:	46 e6       	ldi	r20, 0x66	; 102
    2496:	55 e4       	ldi	r21, 0x45	; 69
    2498:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8f 83       	std	Y+7, r24	; 0x07
    24a2:	98 87       	std	Y+8, r25	; 0x08
    24a4:	a9 87       	std	Y+9, r26	; 0x09
    24a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a8:	6f 81       	ldd	r22, Y+7	; 0x07
    24aa:	78 85       	ldd	r23, Y+8	; 0x08
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <__stack+0x2cb>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <__stack+0x349>
	else if (__tmp > 65535)
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <__stack+0x335>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	8d 83       	std	Y+5, r24	; 0x05
    250a:	0f c0       	rjmp	.+30     	; 0x252a <__stack+0x32b>
    250c:	80 e7       	ldi	r24, 0x70	; 112
    250e:	91 e0       	ldi	r25, 0x01	; 1
    2510:	9c 83       	std	Y+4, r25	; 0x04
    2512:	8b 83       	std	Y+3, r24	; 0x03
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <__stack+0x319>
    251c:	9c 83       	std	Y+4, r25	; 0x04
    251e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8d 81       	ldd	r24, Y+5	; 0x05
    2522:	9e 81       	ldd	r25, Y+6	; 0x06
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <__stack+0x30d>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <__stack+0x35d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	6f 81       	ldd	r22, Y+7	; 0x07
    2536:	78 85       	ldd	r23, Y+8	; 0x08
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	9a 83       	std	Y+2, r25	; 0x02
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	9a 81       	ldd	r25, Y+2	; 0x02
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <__stack+0x355>
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(250); 
}
    255c:	c2 58       	subi	r28, 0x82	; 130
    255e:	df 4f       	sbci	r29, 0xFF	; 255
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	08 95       	ret

00002574 <even_A_servo_45>:

//--------------------------------------------------------------------------------
// function to move repective servos of even and odd arms by specified angle
//--------------------------------------------------------------------------------
void even_A_servo_45 (void) 
{ angle_2A(45); angle_4A(45); angle_6A(45); }
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	8d e2       	ldi	r24, 0x2D	; 45
    257e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <angle_2A>
    2582:	8d e2       	ldi	r24, 0x2D	; 45
    2584:	0e 94 40 06 	call	0xc80	; 0xc80 <angle_4A>
    2588:	8d e2       	ldi	r24, 0x2D	; 45
    258a:	0e 94 ca 06 	call	0xd94	; 0xd94 <angle_6A>
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <even_A_servo_135>:

void even_A_servo_135 (void)
{ angle_2A(135); angle_4A(135); angle_6A(135); }
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	87 e8       	ldi	r24, 0x87	; 135
    259e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <angle_2A>
    25a2:	87 e8       	ldi	r24, 0x87	; 135
    25a4:	0e 94 40 06 	call	0xc80	; 0xc80 <angle_4A>
    25a8:	87 e8       	ldi	r24, 0x87	; 135
    25aa:	0e 94 ca 06 	call	0xd94	; 0xd94 <angle_6A>
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <even_B_servo_up_90>:

void even_B_servo_up_90 (void)
{ angle_2B(90); angle_4B(90); angle_6B(90); }
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	8a e5       	ldi	r24, 0x5A	; 90
    25be:	0e 94 cd 05 	call	0xb9a	; 0xb9a <angle_2B>
    25c2:	8a e5       	ldi	r24, 0x5A	; 90
    25c4:	0e 94 57 06 	call	0xcae	; 0xcae <angle_4B>
    25c8:	8a e5       	ldi	r24, 0x5A	; 90
    25ca:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <angle_6B>
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <even_B_servo_down_125>:

void even_B_servo_down_125 (void)
{ angle_2B(125); angle_4B(55); angle_6B(55);}
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	8d e7       	ldi	r24, 0x7D	; 125
    25de:	0e 94 cd 05 	call	0xb9a	; 0xb9a <angle_2B>
    25e2:	87 e3       	ldi	r24, 0x37	; 55
    25e4:	0e 94 57 06 	call	0xcae	; 0xcae <angle_4B>
    25e8:	87 e3       	ldi	r24, 0x37	; 55
    25ea:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <angle_6B>
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <odd_A_servo_45>:

void odd_A_servo_45 (void)
{ angle_1A(45); angle_3A(45); angle_5A(45); }
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	8d e2       	ldi	r24, 0x2D	; 45
    25fe:	0e 94 71 05 	call	0xae2	; 0xae2 <angle_1A>
    2602:	8d e2       	ldi	r24, 0x2D	; 45
    2604:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <angle_3A>
    2608:	8d e2       	ldi	r24, 0x2D	; 45
    260a:	0e 94 85 06 	call	0xd0a	; 0xd0a <angle_5A>
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <odd_A_servo_135>:

void odd_A_servo_135 (void) 
{ angle_1A(135); angle_3A(135); angle_5A(135); }
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	87 e8       	ldi	r24, 0x87	; 135
    261e:	0e 94 71 05 	call	0xae2	; 0xae2 <angle_1A>
    2622:	87 e8       	ldi	r24, 0x87	; 135
    2624:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <angle_3A>
    2628:	87 e8       	ldi	r24, 0x87	; 135
    262a:	0e 94 85 06 	call	0xd0a	; 0xd0a <angle_5A>
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <odd_B_servo_up_90>:

void odd_B_servo_up_90 (void)
{ angle_1B(90); angle_3B(90); angle_5B(90); }
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	8a e5       	ldi	r24, 0x5A	; 90
    263e:	0e 94 88 05 	call	0xb10	; 0xb10 <angle_1B>
    2642:	8a e5       	ldi	r24, 0x5A	; 90
    2644:	0e 94 12 06 	call	0xc24	; 0xc24 <angle_3B>
    2648:	8a e5       	ldi	r24, 0x5A	; 90
    264a:	0e 94 9c 06 	call	0xd38	; 0xd38 <angle_5B>
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <odd_B_servo_down_55>:

void odd_B_servo_down_55 (void)
{ angle_1B(125); angle_3B(125); angle_5B(55); }
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	8d e7       	ldi	r24, 0x7D	; 125
    265e:	0e 94 88 05 	call	0xb10	; 0xb10 <angle_1B>
    2662:	8d e7       	ldi	r24, 0x7D	; 125
    2664:	0e 94 12 06 	call	0xc24	; 0xc24 <angle_3B>
    2668:	87 e3       	ldi	r24, 0x37	; 55
    266a:	0e 94 9c 06 	call	0xd38	; 0xd38 <angle_5B>
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <clock_wise_step>:
//--------------------------------------------------------------------------------
// This function is used for positioning robot's arms in clockwise direction just 
// before applying stroke to rotate the robot, clockwise.
//--------------------------------------------------------------------------------
void clock_wise_step(void)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	e8 97       	sbiw	r28, 0x38	; 56
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
 // legs are lifted and moved in the desired direction
 even_B_servo_up_90(); even_A_servo_45(); _delay_ms(250); 
    2688:	0e 94 da 12 	call	0x25b4	; 0x25b4 <even_B_servo_up_90>
    268c:	0e 94 ba 12 	call	0x2574	; 0x2574 <even_A_servo_45>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	aa e7       	ldi	r26, 0x7A	; 122
    2696:	b3 e4       	ldi	r27, 0x43	; 67
    2698:	8d ab       	std	Y+53, r24	; 0x35
    269a:	9e ab       	std	Y+54, r25	; 0x36
    269c:	af ab       	std	Y+55, r26	; 0x37
    269e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	6d a9       	ldd	r22, Y+53	; 0x35
    26a2:	7e a9       	ldd	r23, Y+54	; 0x36
    26a4:	8f a9       	ldd	r24, Y+55	; 0x37
    26a6:	98 ad       	ldd	r25, Y+56	; 0x38
    26a8:	26 e6       	ldi	r18, 0x66	; 102
    26aa:	36 e6       	ldi	r19, 0x66	; 102
    26ac:	46 e6       	ldi	r20, 0x66	; 102
    26ae:	55 e4       	ldi	r21, 0x45	; 69
    26b0:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	89 ab       	std	Y+49, r24	; 0x31
    26ba:	9a ab       	std	Y+50, r25	; 0x32
    26bc:	ab ab       	std	Y+51, r26	; 0x33
    26be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26c0:	69 a9       	ldd	r22, Y+49	; 0x31
    26c2:	7a a9       	ldd	r23, Y+50	; 0x32
    26c4:	8b a9       	ldd	r24, Y+51	; 0x33
    26c6:	9c a9       	ldd	r25, Y+52	; 0x34
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <clock_wise_step+0x6e>
		__ticks = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	98 ab       	std	Y+48, r25	; 0x30
    26de:	8f a7       	std	Y+47, r24	; 0x2f
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <clock_wise_step+0xec>
	else if (__tmp > 65535)
    26e2:	69 a9       	ldd	r22, Y+49	; 0x31
    26e4:	7a a9       	ldd	r23, Y+50	; 0x32
    26e6:	8b a9       	ldd	r24, Y+51	; 0x33
    26e8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	4c f5       	brge	.+82     	; 0x274c <clock_wise_step+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6d a9       	ldd	r22, Y+53	; 0x35
    26fc:	7e a9       	ldd	r23, Y+54	; 0x36
    26fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2700:	98 ad       	ldd	r25, Y+56	; 0x38
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	98 ab       	std	Y+48, r25	; 0x30
    2720:	8f a7       	std	Y+47, r24	; 0x2f
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <clock_wise_step+0xce>
    2724:	80 e7       	ldi	r24, 0x70	; 112
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	9e a7       	std	Y+46, r25	; 0x2e
    272a:	8d a7       	std	Y+45, r24	; 0x2d
    272c:	8d a5       	ldd	r24, Y+45	; 0x2d
    272e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <clock_wise_step+0xbc>
    2734:	9e a7       	std	Y+46, r25	; 0x2e
    2736:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	8f a5       	ldd	r24, Y+47	; 0x2f
    273a:	98 a9       	ldd	r25, Y+48	; 0x30
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	98 ab       	std	Y+48, r25	; 0x30
    2740:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	8f a5       	ldd	r24, Y+47	; 0x2f
    2744:	98 a9       	ldd	r25, Y+48	; 0x30
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <clock_wise_step+0xb0>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <clock_wise_step+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	69 a9       	ldd	r22, Y+49	; 0x31
    274e:	7a a9       	ldd	r23, Y+50	; 0x32
    2750:	8b a9       	ldd	r24, Y+51	; 0x33
    2752:	9c a9       	ldd	r25, Y+52	; 0x34
    2754:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	98 ab       	std	Y+48, r25	; 0x30
    275e:	8f a7       	std	Y+47, r24	; 0x2f
    2760:	8f a5       	ldd	r24, Y+47	; 0x2f
    2762:	98 a9       	ldd	r25, Y+48	; 0x30
    2764:	9c a7       	std	Y+44, r25	; 0x2c
    2766:	8b a7       	std	Y+43, r24	; 0x2b
    2768:	8b a5       	ldd	r24, Y+43	; 0x2b
    276a:	9c a5       	ldd	r25, Y+44	; 0x2c
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <clock_wise_step+0xf8>
    2770:	9c a7       	std	Y+44, r25	; 0x2c
    2772:	8b a7       	std	Y+43, r24	; 0x2b
 even_B_servo_down_125(); _delay_ms(250); 
    2774:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <even_B_servo_down_125>
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	aa e7       	ldi	r26, 0x7A	; 122
    277e:	b3 e4       	ldi	r27, 0x43	; 67
    2780:	8f a3       	std	Y+39, r24	; 0x27
    2782:	98 a7       	std	Y+40, r25	; 0x28
    2784:	a9 a7       	std	Y+41, r26	; 0x29
    2786:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2788:	6f a1       	ldd	r22, Y+39	; 0x27
    278a:	78 a5       	ldd	r23, Y+40	; 0x28
    278c:	89 a5       	ldd	r24, Y+41	; 0x29
    278e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2790:	26 e6       	ldi	r18, 0x66	; 102
    2792:	36 e6       	ldi	r19, 0x66	; 102
    2794:	46 e6       	ldi	r20, 0x66	; 102
    2796:	55 e4       	ldi	r21, 0x45	; 69
    2798:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	8b a3       	std	Y+35, r24	; 0x23
    27a2:	9c a3       	std	Y+36, r25	; 0x24
    27a4:	ad a3       	std	Y+37, r26	; 0x25
    27a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27a8:	6b a1       	ldd	r22, Y+35	; 0x23
    27aa:	7c a1       	ldd	r23, Y+36	; 0x24
    27ac:	8d a1       	ldd	r24, Y+37	; 0x25
    27ae:	9e a1       	ldd	r25, Y+38	; 0x26
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e8       	ldi	r20, 0x80	; 128
    27b6:	5f e3       	ldi	r21, 0x3F	; 63
    27b8:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    27bc:	88 23       	and	r24, r24
    27be:	2c f4       	brge	.+10     	; 0x27ca <clock_wise_step+0x156>
		__ticks = 1;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	9a a3       	std	Y+34, r25	; 0x22
    27c6:	89 a3       	std	Y+33, r24	; 0x21
    27c8:	3f c0       	rjmp	.+126    	; 0x2848 <clock_wise_step+0x1d4>
	else if (__tmp > 65535)
    27ca:	6b a1       	ldd	r22, Y+35	; 0x23
    27cc:	7c a1       	ldd	r23, Y+36	; 0x24
    27ce:	8d a1       	ldd	r24, Y+37	; 0x25
    27d0:	9e a1       	ldd	r25, Y+38	; 0x26
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	4f e7       	ldi	r20, 0x7F	; 127
    27d8:	57 e4       	ldi	r21, 0x47	; 71
    27da:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    27de:	18 16       	cp	r1, r24
    27e0:	4c f5       	brge	.+82     	; 0x2834 <clock_wise_step+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e2:	6f a1       	ldd	r22, Y+39	; 0x27
    27e4:	78 a5       	ldd	r23, Y+40	; 0x28
    27e6:	89 a5       	ldd	r24, Y+41	; 0x29
    27e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e2       	ldi	r20, 0x20	; 32
    27f0:	51 e4       	ldi	r21, 0x41	; 65
    27f2:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9a a3       	std	Y+34, r25	; 0x22
    2808:	89 a3       	std	Y+33, r24	; 0x21
    280a:	0f c0       	rjmp	.+30     	; 0x282a <clock_wise_step+0x1b6>
    280c:	80 e7       	ldi	r24, 0x70	; 112
    280e:	91 e0       	ldi	r25, 0x01	; 1
    2810:	98 a3       	std	Y+32, r25	; 0x20
    2812:	8f 8f       	std	Y+31, r24	; 0x1f
    2814:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2816:	98 a1       	ldd	r25, Y+32	; 0x20
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <clock_wise_step+0x1a4>
    281c:	98 a3       	std	Y+32, r25	; 0x20
    281e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2820:	89 a1       	ldd	r24, Y+33	; 0x21
    2822:	9a a1       	ldd	r25, Y+34	; 0x22
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	9a a3       	std	Y+34, r25	; 0x22
    2828:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282a:	89 a1       	ldd	r24, Y+33	; 0x21
    282c:	9a a1       	ldd	r25, Y+34	; 0x22
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	69 f7       	brne	.-38     	; 0x280c <clock_wise_step+0x198>
    2832:	14 c0       	rjmp	.+40     	; 0x285c <clock_wise_step+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2834:	6b a1       	ldd	r22, Y+35	; 0x23
    2836:	7c a1       	ldd	r23, Y+36	; 0x24
    2838:	8d a1       	ldd	r24, Y+37	; 0x25
    283a:	9e a1       	ldd	r25, Y+38	; 0x26
    283c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9a a3       	std	Y+34, r25	; 0x22
    2846:	89 a3       	std	Y+33, r24	; 0x21
    2848:	89 a1       	ldd	r24, Y+33	; 0x21
    284a:	9a a1       	ldd	r25, Y+34	; 0x22
    284c:	9e 8f       	std	Y+30, r25	; 0x1e
    284e:	8d 8f       	std	Y+29, r24	; 0x1d
    2850:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2852:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <clock_wise_step+0x1e0>
    2858:	9e 8f       	std	Y+30, r25	; 0x1e
    285a:	8d 8f       	std	Y+29, r24	; 0x1d
 odd_B_servo_up_90(); odd_A_servo_45(); _delay_ms(250);
    285c:	0e 94 1a 13 	call	0x2634	; 0x2634 <odd_B_servo_up_90>
    2860:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <odd_A_servo_45>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	aa e7       	ldi	r26, 0x7A	; 122
    286a:	b3 e4       	ldi	r27, 0x43	; 67
    286c:	89 8f       	std	Y+25, r24	; 0x19
    286e:	9a 8f       	std	Y+26, r25	; 0x1a
    2870:	ab 8f       	std	Y+27, r26	; 0x1b
    2872:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	69 8d       	ldd	r22, Y+25	; 0x19
    2876:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    287a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    287c:	26 e6       	ldi	r18, 0x66	; 102
    287e:	36 e6       	ldi	r19, 0x66	; 102
    2880:	46 e6       	ldi	r20, 0x66	; 102
    2882:	55 e4       	ldi	r21, 0x45	; 69
    2884:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	8d 8b       	std	Y+21, r24	; 0x15
    288e:	9e 8b       	std	Y+22, r25	; 0x16
    2890:	af 8b       	std	Y+23, r26	; 0x17
    2892:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2894:	6d 89       	ldd	r22, Y+21	; 0x15
    2896:	7e 89       	ldd	r23, Y+22	; 0x16
    2898:	8f 89       	ldd	r24, Y+23	; 0x17
    289a:	98 8d       	ldd	r25, Y+24	; 0x18
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e8       	ldi	r20, 0x80	; 128
    28a2:	5f e3       	ldi	r21, 0x3F	; 63
    28a4:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    28a8:	88 23       	and	r24, r24
    28aa:	2c f4       	brge	.+10     	; 0x28b6 <clock_wise_step+0x242>
		__ticks = 1;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9c 8b       	std	Y+20, r25	; 0x14
    28b2:	8b 8b       	std	Y+19, r24	; 0x13
    28b4:	3f c0       	rjmp	.+126    	; 0x2934 <clock_wise_step+0x2c0>
	else if (__tmp > 65535)
    28b6:	6d 89       	ldd	r22, Y+21	; 0x15
    28b8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ba:	8f 89       	ldd	r24, Y+23	; 0x17
    28bc:	98 8d       	ldd	r25, Y+24	; 0x18
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	3f ef       	ldi	r19, 0xFF	; 255
    28c2:	4f e7       	ldi	r20, 0x7F	; 127
    28c4:	57 e4       	ldi	r21, 0x47	; 71
    28c6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    28ca:	18 16       	cp	r1, r24
    28cc:	4c f5       	brge	.+82     	; 0x2920 <clock_wise_step+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ce:	69 8d       	ldd	r22, Y+25	; 0x19
    28d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e2       	ldi	r20, 0x20	; 32
    28dc:	51 e4       	ldi	r21, 0x41	; 65
    28de:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9c 8b       	std	Y+20, r25	; 0x14
    28f4:	8b 8b       	std	Y+19, r24	; 0x13
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <clock_wise_step+0x2a2>
    28f8:	80 e7       	ldi	r24, 0x70	; 112
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	9a 8b       	std	Y+18, r25	; 0x12
    28fe:	89 8b       	std	Y+17, r24	; 0x11
    2900:	89 89       	ldd	r24, Y+17	; 0x11
    2902:	9a 89       	ldd	r25, Y+18	; 0x12
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <clock_wise_step+0x290>
    2908:	9a 8b       	std	Y+18, r25	; 0x12
    290a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290c:	8b 89       	ldd	r24, Y+19	; 0x13
    290e:	9c 89       	ldd	r25, Y+20	; 0x14
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	9c 8b       	std	Y+20, r25	; 0x14
    2914:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2916:	8b 89       	ldd	r24, Y+19	; 0x13
    2918:	9c 89       	ldd	r25, Y+20	; 0x14
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	69 f7       	brne	.-38     	; 0x28f8 <clock_wise_step+0x284>
    291e:	14 c0       	rjmp	.+40     	; 0x2948 <clock_wise_step+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2920:	6d 89       	ldd	r22, Y+21	; 0x15
    2922:	7e 89       	ldd	r23, Y+22	; 0x16
    2924:	8f 89       	ldd	r24, Y+23	; 0x17
    2926:	98 8d       	ldd	r25, Y+24	; 0x18
    2928:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9c 8b       	std	Y+20, r25	; 0x14
    2932:	8b 8b       	std	Y+19, r24	; 0x13
    2934:	8b 89       	ldd	r24, Y+19	; 0x13
    2936:	9c 89       	ldd	r25, Y+20	; 0x14
    2938:	98 8b       	std	Y+16, r25	; 0x10
    293a:	8f 87       	std	Y+15, r24	; 0x0f
    293c:	8f 85       	ldd	r24, Y+15	; 0x0f
    293e:	98 89       	ldd	r25, Y+16	; 0x10
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <clock_wise_step+0x2cc>
    2944:	98 8b       	std	Y+16, r25	; 0x10
    2946:	8f 87       	std	Y+15, r24	; 0x0f
 odd_B_servo_down_55(); _delay_ms(250);
    2948:	0e 94 2a 13 	call	0x2654	; 0x2654 <odd_B_servo_down_55>
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	aa e7       	ldi	r26, 0x7A	; 122
    2952:	b3 e4       	ldi	r27, 0x43	; 67
    2954:	8b 87       	std	Y+11, r24	; 0x0b
    2956:	9c 87       	std	Y+12, r25	; 0x0c
    2958:	ad 87       	std	Y+13, r26	; 0x0d
    295a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295c:	6b 85       	ldd	r22, Y+11	; 0x0b
    295e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2960:	8d 85       	ldd	r24, Y+13	; 0x0d
    2962:	9e 85       	ldd	r25, Y+14	; 0x0e
    2964:	26 e6       	ldi	r18, 0x66	; 102
    2966:	36 e6       	ldi	r19, 0x66	; 102
    2968:	46 e6       	ldi	r20, 0x66	; 102
    296a:	55 e4       	ldi	r21, 0x45	; 69
    296c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	8f 83       	std	Y+7, r24	; 0x07
    2976:	98 87       	std	Y+8, r25	; 0x08
    2978:	a9 87       	std	Y+9, r26	; 0x09
    297a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    297c:	6f 81       	ldd	r22, Y+7	; 0x07
    297e:	78 85       	ldd	r23, Y+8	; 0x08
    2980:	89 85       	ldd	r24, Y+9	; 0x09
    2982:	9a 85       	ldd	r25, Y+10	; 0x0a
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e8       	ldi	r20, 0x80	; 128
    298a:	5f e3       	ldi	r21, 0x3F	; 63
    298c:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    2990:	88 23       	and	r24, r24
    2992:	2c f4       	brge	.+10     	; 0x299e <clock_wise_step+0x32a>
		__ticks = 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
    299c:	3f c0       	rjmp	.+126    	; 0x2a1c <clock_wise_step+0x3a8>
	else if (__tmp > 65535)
    299e:	6f 81       	ldd	r22, Y+7	; 0x07
    29a0:	78 85       	ldd	r23, Y+8	; 0x08
    29a2:	89 85       	ldd	r24, Y+9	; 0x09
    29a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	3f ef       	ldi	r19, 0xFF	; 255
    29aa:	4f e7       	ldi	r20, 0x7F	; 127
    29ac:	57 e4       	ldi	r21, 0x47	; 71
    29ae:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    29b2:	18 16       	cp	r1, r24
    29b4:	4c f5       	brge	.+82     	; 0x2a08 <clock_wise_step+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    29bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e2       	ldi	r20, 0x20	; 32
    29c4:	51 e4       	ldi	r21, 0x41	; 65
    29c6:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9e 83       	std	Y+6, r25	; 0x06
    29dc:	8d 83       	std	Y+5, r24	; 0x05
    29de:	0f c0       	rjmp	.+30     	; 0x29fe <clock_wise_step+0x38a>
    29e0:	80 e7       	ldi	r24, 0x70	; 112
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	9c 83       	std	Y+4, r25	; 0x04
    29e6:	8b 83       	std	Y+3, r24	; 0x03
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	9c 81       	ldd	r25, Y+4	; 0x04
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <clock_wise_step+0x378>
    29f0:	9c 83       	std	Y+4, r25	; 0x04
    29f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2a00:	9e 81       	ldd	r25, Y+6	; 0x06
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	69 f7       	brne	.-38     	; 0x29e0 <clock_wise_step+0x36c>
    2a06:	14 c0       	rjmp	.+40     	; 0x2a30 <clock_wise_step+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a08:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0a:	78 85       	ldd	r23, Y+8	; 0x08
    2a0c:	89 85       	ldd	r24, Y+9	; 0x09
    2a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a10:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a20:	9a 83       	std	Y+2, r25	; 0x02
    2a22:	89 83       	std	Y+1, r24	; 0x01
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <clock_wise_step+0x3b4>
    2a2c:	9a 83       	std	Y+2, r25	; 0x02
    2a2e:	89 83       	std	Y+1, r24	; 0x01
}
    2a30:	e8 96       	adiw	r28, 0x38	; 56
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <counter_clock_wise_step>:
//--------------------------------------------------------------------------------
// This function is used for positioning robot's arms in counterclockwise direction 
// just before applying stroke to rotate the robot, counterclockwise.
//--------------------------------------------------------------------------------
void counter_clock_wise_step(void)
{
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	e8 97       	sbiw	r28, 0x38	; 56
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
 // legs are lifted and moved in the desired direction 
 even_B_servo_up_90(); even_A_servo_135(); _delay_ms(250); 
    2a56:	0e 94 da 12 	call	0x25b4	; 0x25b4 <even_B_servo_up_90>
    2a5a:	0e 94 ca 12 	call	0x2594	; 0x2594 <even_A_servo_135>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	aa e7       	ldi	r26, 0x7A	; 122
    2a64:	b3 e4       	ldi	r27, 0x43	; 67
    2a66:	8d ab       	std	Y+53, r24	; 0x35
    2a68:	9e ab       	std	Y+54, r25	; 0x36
    2a6a:	af ab       	std	Y+55, r26	; 0x37
    2a6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a70:	7e a9       	ldd	r23, Y+54	; 0x36
    2a72:	8f a9       	ldd	r24, Y+55	; 0x37
    2a74:	98 ad       	ldd	r25, Y+56	; 0x38
    2a76:	26 e6       	ldi	r18, 0x66	; 102
    2a78:	36 e6       	ldi	r19, 0x66	; 102
    2a7a:	46 e6       	ldi	r20, 0x66	; 102
    2a7c:	55 e4       	ldi	r21, 0x45	; 69
    2a7e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	89 ab       	std	Y+49, r24	; 0x31
    2a88:	9a ab       	std	Y+50, r25	; 0x32
    2a8a:	ab ab       	std	Y+51, r26	; 0x33
    2a8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a8e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a90:	7a a9       	ldd	r23, Y+50	; 0x32
    2a92:	8b a9       	ldd	r24, Y+51	; 0x33
    2a94:	9c a9       	ldd	r25, Y+52	; 0x34
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <counter_clock_wise_step+0x6e>
		__ticks = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	98 ab       	std	Y+48, r25	; 0x30
    2aac:	8f a7       	std	Y+47, r24	; 0x2f
    2aae:	3f c0       	rjmp	.+126    	; 0x2b2e <counter_clock_wise_step+0xec>
	else if (__tmp > 65535)
    2ab0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ab6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	3f ef       	ldi	r19, 0xFF	; 255
    2abc:	4f e7       	ldi	r20, 0x7F	; 127
    2abe:	57 e4       	ldi	r21, 0x47	; 71
    2ac0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	4c f5       	brge	.+82     	; 0x2b1a <counter_clock_wise_step+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac8:	6d a9       	ldd	r22, Y+53	; 0x35
    2aca:	7e a9       	ldd	r23, Y+54	; 0x36
    2acc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ace:	98 ad       	ldd	r25, Y+56	; 0x38
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e2       	ldi	r20, 0x20	; 32
    2ad6:	51 e4       	ldi	r21, 0x41	; 65
    2ad8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	98 ab       	std	Y+48, r25	; 0x30
    2aee:	8f a7       	std	Y+47, r24	; 0x2f
    2af0:	0f c0       	rjmp	.+30     	; 0x2b10 <counter_clock_wise_step+0xce>
    2af2:	80 e7       	ldi	r24, 0x70	; 112
    2af4:	91 e0       	ldi	r25, 0x01	; 1
    2af6:	9e a7       	std	Y+46, r25	; 0x2e
    2af8:	8d a7       	std	Y+45, r24	; 0x2d
    2afa:	8d a5       	ldd	r24, Y+45	; 0x2d
    2afc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <counter_clock_wise_step+0xbc>
    2b02:	9e a7       	std	Y+46, r25	; 0x2e
    2b04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b08:	98 a9       	ldd	r25, Y+48	; 0x30
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	98 ab       	std	Y+48, r25	; 0x30
    2b0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b12:	98 a9       	ldd	r25, Y+48	; 0x30
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	69 f7       	brne	.-38     	; 0x2af2 <counter_clock_wise_step+0xb0>
    2b18:	14 c0       	rjmp	.+40     	; 0x2b42 <counter_clock_wise_step+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b20:	9c a9       	ldd	r25, Y+52	; 0x34
    2b22:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	98 ab       	std	Y+48, r25	; 0x30
    2b2c:	8f a7       	std	Y+47, r24	; 0x2f
    2b2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b30:	98 a9       	ldd	r25, Y+48	; 0x30
    2b32:	9c a7       	std	Y+44, r25	; 0x2c
    2b34:	8b a7       	std	Y+43, r24	; 0x2b
    2b36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b38:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <counter_clock_wise_step+0xf8>
    2b3e:	9c a7       	std	Y+44, r25	; 0x2c
    2b40:	8b a7       	std	Y+43, r24	; 0x2b
 even_B_servo_down_125(); _delay_ms(250); 
    2b42:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <even_B_servo_down_125>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	aa e7       	ldi	r26, 0x7A	; 122
    2b4c:	b3 e4       	ldi	r27, 0x43	; 67
    2b4e:	8f a3       	std	Y+39, r24	; 0x27
    2b50:	98 a7       	std	Y+40, r25	; 0x28
    2b52:	a9 a7       	std	Y+41, r26	; 0x29
    2b54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	6f a1       	ldd	r22, Y+39	; 0x27
    2b58:	78 a5       	ldd	r23, Y+40	; 0x28
    2b5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b5e:	26 e6       	ldi	r18, 0x66	; 102
    2b60:	36 e6       	ldi	r19, 0x66	; 102
    2b62:	46 e6       	ldi	r20, 0x66	; 102
    2b64:	55 e4       	ldi	r21, 0x45	; 69
    2b66:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8b a3       	std	Y+35, r24	; 0x23
    2b70:	9c a3       	std	Y+36, r25	; 0x24
    2b72:	ad a3       	std	Y+37, r26	; 0x25
    2b74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b76:	6b a1       	ldd	r22, Y+35	; 0x23
    2b78:	7c a1       	ldd	r23, Y+36	; 0x24
    2b7a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b7c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <counter_clock_wise_step+0x156>
		__ticks = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9a a3       	std	Y+34, r25	; 0x22
    2b94:	89 a3       	std	Y+33, r24	; 0x21
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <counter_clock_wise_step+0x1d4>
	else if (__tmp > 65535)
    2b98:	6b a1       	ldd	r22, Y+35	; 0x23
    2b9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f e7       	ldi	r20, 0x7F	; 127
    2ba6:	57 e4       	ldi	r21, 0x47	; 71
    2ba8:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    2bac:	18 16       	cp	r1, r24
    2bae:	4c f5       	brge	.+82     	; 0x2c02 <counter_clock_wise_step+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	6f a1       	ldd	r22, Y+39	; 0x27
    2bb2:	78 a5       	ldd	r23, Y+40	; 0x28
    2bb4:	89 a5       	ldd	r24, Y+41	; 0x29
    2bb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9a a3       	std	Y+34, r25	; 0x22
    2bd6:	89 a3       	std	Y+33, r24	; 0x21
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <counter_clock_wise_step+0x1b6>
    2bda:	80 e7       	ldi	r24, 0x70	; 112
    2bdc:	91 e0       	ldi	r25, 0x01	; 1
    2bde:	98 a3       	std	Y+32, r25	; 0x20
    2be0:	8f 8f       	std	Y+31, r24	; 0x1f
    2be2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be4:	98 a1       	ldd	r25, Y+32	; 0x20
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <counter_clock_wise_step+0x1a4>
    2bea:	98 a3       	std	Y+32, r25	; 0x20
    2bec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf0:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	9a a3       	std	Y+34, r25	; 0x22
    2bf6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <counter_clock_wise_step+0x198>
    2c00:	14 c0       	rjmp	.+40     	; 0x2c2a <counter_clock_wise_step+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c02:	6b a1       	ldd	r22, Y+35	; 0x23
    2c04:	7c a1       	ldd	r23, Y+36	; 0x24
    2c06:	8d a1       	ldd	r24, Y+37	; 0x25
    2c08:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0a:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9a a3       	std	Y+34, r25	; 0x22
    2c14:	89 a3       	std	Y+33, r24	; 0x21
    2c16:	89 a1       	ldd	r24, Y+33	; 0x21
    2c18:	9a a1       	ldd	r25, Y+34	; 0x22
    2c1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c1c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <counter_clock_wise_step+0x1e0>
    2c26:	9e 8f       	std	Y+30, r25	; 0x1e
    2c28:	8d 8f       	std	Y+29, r24	; 0x1d
 odd_B_servo_up_90(); odd_A_servo_135(); _delay_ms(250); 
    2c2a:	0e 94 1a 13 	call	0x2634	; 0x2634 <odd_B_servo_up_90>
    2c2e:	0e 94 0a 13 	call	0x2614	; 0x2614 <odd_A_servo_135>
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	aa e7       	ldi	r26, 0x7A	; 122
    2c38:	b3 e4       	ldi	r27, 0x43	; 67
    2c3a:	89 8f       	std	Y+25, r24	; 0x19
    2c3c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c3e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c42:	69 8d       	ldd	r22, Y+25	; 0x19
    2c44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c4a:	26 e6       	ldi	r18, 0x66	; 102
    2c4c:	36 e6       	ldi	r19, 0x66	; 102
    2c4e:	46 e6       	ldi	r20, 0x66	; 102
    2c50:	55 e4       	ldi	r21, 0x45	; 69
    2c52:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	8d 8b       	std	Y+21, r24	; 0x15
    2c5c:	9e 8b       	std	Y+22, r25	; 0x16
    2c5e:	af 8b       	std	Y+23, r26	; 0x17
    2c60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c62:	6d 89       	ldd	r22, Y+21	; 0x15
    2c64:	7e 89       	ldd	r23, Y+22	; 0x16
    2c66:	8f 89       	ldd	r24, Y+23	; 0x17
    2c68:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e8       	ldi	r20, 0x80	; 128
    2c70:	5f e3       	ldi	r21, 0x3F	; 63
    2c72:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    2c76:	88 23       	and	r24, r24
    2c78:	2c f4       	brge	.+10     	; 0x2c84 <counter_clock_wise_step+0x242>
		__ticks = 1;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	9c 8b       	std	Y+20, r25	; 0x14
    2c80:	8b 8b       	std	Y+19, r24	; 0x13
    2c82:	3f c0       	rjmp	.+126    	; 0x2d02 <counter_clock_wise_step+0x2c0>
	else if (__tmp > 65535)
    2c84:	6d 89       	ldd	r22, Y+21	; 0x15
    2c86:	7e 89       	ldd	r23, Y+22	; 0x16
    2c88:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	3f ef       	ldi	r19, 0xFF	; 255
    2c90:	4f e7       	ldi	r20, 0x7F	; 127
    2c92:	57 e4       	ldi	r21, 0x47	; 71
    2c94:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    2c98:	18 16       	cp	r1, r24
    2c9a:	4c f5       	brge	.+82     	; 0x2cee <counter_clock_wise_step+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e2       	ldi	r20, 0x20	; 32
    2caa:	51 e4       	ldi	r21, 0x41	; 65
    2cac:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	9c 8b       	std	Y+20, r25	; 0x14
    2cc2:	8b 8b       	std	Y+19, r24	; 0x13
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <counter_clock_wise_step+0x2a2>
    2cc6:	80 e7       	ldi	r24, 0x70	; 112
    2cc8:	91 e0       	ldi	r25, 0x01	; 1
    2cca:	9a 8b       	std	Y+18, r25	; 0x12
    2ccc:	89 8b       	std	Y+17, r24	; 0x11
    2cce:	89 89       	ldd	r24, Y+17	; 0x11
    2cd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <counter_clock_wise_step+0x290>
    2cd6:	9a 8b       	std	Y+18, r25	; 0x12
    2cd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cda:	8b 89       	ldd	r24, Y+19	; 0x13
    2cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	9c 8b       	std	Y+20, r25	; 0x14
    2ce2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	69 f7       	brne	.-38     	; 0x2cc6 <counter_clock_wise_step+0x284>
    2cec:	14 c0       	rjmp	.+40     	; 0x2d16 <counter_clock_wise_step+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cee:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf6:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	9c 8b       	std	Y+20, r25	; 0x14
    2d00:	8b 8b       	std	Y+19, r24	; 0x13
    2d02:	8b 89       	ldd	r24, Y+19	; 0x13
    2d04:	9c 89       	ldd	r25, Y+20	; 0x14
    2d06:	98 8b       	std	Y+16, r25	; 0x10
    2d08:	8f 87       	std	Y+15, r24	; 0x0f
    2d0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d0c:	98 89       	ldd	r25, Y+16	; 0x10
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <counter_clock_wise_step+0x2cc>
    2d12:	98 8b       	std	Y+16, r25	; 0x10
    2d14:	8f 87       	std	Y+15, r24	; 0x0f
 odd_B_servo_down_55(); _delay_ms(250); 
    2d16:	0e 94 2a 13 	call	0x2654	; 0x2654 <odd_B_servo_down_55>
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	aa e7       	ldi	r26, 0x7A	; 122
    2d20:	b3 e4       	ldi	r27, 0x43	; 67
    2d22:	8b 87       	std	Y+11, r24	; 0x0b
    2d24:	9c 87       	std	Y+12, r25	; 0x0c
    2d26:	ad 87       	std	Y+13, r26	; 0x0d
    2d28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d32:	26 e6       	ldi	r18, 0x66	; 102
    2d34:	36 e6       	ldi	r19, 0x66	; 102
    2d36:	46 e6       	ldi	r20, 0x66	; 102
    2d38:	55 e4       	ldi	r21, 0x45	; 69
    2d3a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	8f 83       	std	Y+7, r24	; 0x07
    2d44:	98 87       	std	Y+8, r25	; 0x08
    2d46:	a9 87       	std	Y+9, r26	; 0x09
    2d48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4c:	78 85       	ldd	r23, Y+8	; 0x08
    2d4e:	89 85       	ldd	r24, Y+9	; 0x09
    2d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e8       	ldi	r20, 0x80	; 128
    2d58:	5f e3       	ldi	r21, 0x3F	; 63
    2d5a:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    2d5e:	88 23       	and	r24, r24
    2d60:	2c f4       	brge	.+10     	; 0x2d6c <counter_clock_wise_step+0x32a>
		__ticks = 1;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	9e 83       	std	Y+6, r25	; 0x06
    2d68:	8d 83       	std	Y+5, r24	; 0x05
    2d6a:	3f c0       	rjmp	.+126    	; 0x2dea <counter_clock_wise_step+0x3a8>
	else if (__tmp > 65535)
    2d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6e:	78 85       	ldd	r23, Y+8	; 0x08
    2d70:	89 85       	ldd	r24, Y+9	; 0x09
    2d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	3f ef       	ldi	r19, 0xFF	; 255
    2d78:	4f e7       	ldi	r20, 0x7F	; 127
    2d7a:	57 e4       	ldi	r21, 0x47	; 71
    2d7c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    2d80:	18 16       	cp	r1, r24
    2d82:	4c f5       	brge	.+82     	; 0x2dd6 <counter_clock_wise_step+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e2       	ldi	r20, 0x20	; 32
    2d92:	51 e4       	ldi	r21, 0x41	; 65
    2d94:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	cd 01       	movw	r24, r26
    2da0:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9e 83       	std	Y+6, r25	; 0x06
    2daa:	8d 83       	std	Y+5, r24	; 0x05
    2dac:	0f c0       	rjmp	.+30     	; 0x2dcc <counter_clock_wise_step+0x38a>
    2dae:	80 e7       	ldi	r24, 0x70	; 112
    2db0:	91 e0       	ldi	r25, 0x01	; 1
    2db2:	9c 83       	std	Y+4, r25	; 0x04
    2db4:	8b 83       	std	Y+3, r24	; 0x03
    2db6:	8b 81       	ldd	r24, Y+3	; 0x03
    2db8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <counter_clock_wise_step+0x378>
    2dbe:	9c 83       	std	Y+4, r25	; 0x04
    2dc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	9e 83       	std	Y+6, r25	; 0x06
    2dca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dce:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	69 f7       	brne	.-38     	; 0x2dae <counter_clock_wise_step+0x36c>
    2dd4:	14 c0       	rjmp	.+40     	; 0x2dfe <counter_clock_wise_step+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd8:	78 85       	ldd	r23, Y+8	; 0x08
    2dda:	89 85       	ldd	r24, Y+9	; 0x09
    2ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dde:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	9e 83       	std	Y+6, r25	; 0x06
    2de8:	8d 83       	std	Y+5, r24	; 0x05
    2dea:	8d 81       	ldd	r24, Y+5	; 0x05
    2dec:	9e 81       	ldd	r25, Y+6	; 0x06
    2dee:	9a 83       	std	Y+2, r25	; 0x02
    2df0:	89 83       	std	Y+1, r24	; 0x01
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	9a 81       	ldd	r25, Y+2	; 0x02
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <counter_clock_wise_step+0x3b4>
    2dfa:	9a 83       	std	Y+2, r25	; 0x02
    2dfc:	89 83       	std	Y+1, r24	; 0x01
}
    2dfe:	e8 96       	adiw	r28, 0x38	; 56
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	08 95       	ret

00002e10 <robot_rotate_clockwise>:
//--------------------------------------------------------------------------------
// function to turn right by single step in clockwise direction
//--------------------------------------------------------------------------------
void robot_rotate_clockwise (void)
{
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	2e 97       	sbiw	r28, 0x0e	; 14
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	cd bf       	out	0x3d, r28	; 61
 motion_busy = 1; 
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	80 93 0c 02 	sts	0x020C, r24
 
 clock_wise_step();                       // move legs to desire direction
    2e2a:	0e 94 3a 13 	call	0x2674	; 0x2674 <clock_wise_step>
 robot_stand_position(); _delay_ms(250);  // apply rotation stroke
    2e2e:	0e 94 89 07 	call	0xf12	; 0xf12 <robot_stand_position>
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	aa e7       	ldi	r26, 0x7A	; 122
    2e38:	b3 e4       	ldi	r27, 0x43	; 67
    2e3a:	8b 87       	std	Y+11, r24	; 0x0b
    2e3c:	9c 87       	std	Y+12, r25	; 0x0c
    2e3e:	ad 87       	std	Y+13, r26	; 0x0d
    2e40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4a:	26 e6       	ldi	r18, 0x66	; 102
    2e4c:	36 e6       	ldi	r19, 0x66	; 102
    2e4e:	46 e6       	ldi	r20, 0x66	; 102
    2e50:	55 e4       	ldi	r21, 0x45	; 69
    2e52:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	8f 83       	std	Y+7, r24	; 0x07
    2e5c:	98 87       	std	Y+8, r25	; 0x08
    2e5e:	a9 87       	std	Y+9, r26	; 0x09
    2e60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e62:	6f 81       	ldd	r22, Y+7	; 0x07
    2e64:	78 85       	ldd	r23, Y+8	; 0x08
    2e66:	89 85       	ldd	r24, Y+9	; 0x09
    2e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e8       	ldi	r20, 0x80	; 128
    2e70:	5f e3       	ldi	r21, 0x3F	; 63
    2e72:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    2e76:	88 23       	and	r24, r24
    2e78:	2c f4       	brge	.+10     	; 0x2e84 <robot_rotate_clockwise+0x74>
		__ticks = 1;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	9e 83       	std	Y+6, r25	; 0x06
    2e80:	8d 83       	std	Y+5, r24	; 0x05
    2e82:	3f c0       	rjmp	.+126    	; 0x2f02 <robot_rotate_clockwise+0xf2>
	else if (__tmp > 65535)
    2e84:	6f 81       	ldd	r22, Y+7	; 0x07
    2e86:	78 85       	ldd	r23, Y+8	; 0x08
    2e88:	89 85       	ldd	r24, Y+9	; 0x09
    2e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	3f ef       	ldi	r19, 0xFF	; 255
    2e90:	4f e7       	ldi	r20, 0x7F	; 127
    2e92:	57 e4       	ldi	r21, 0x47	; 71
    2e94:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    2e98:	18 16       	cp	r1, r24
    2e9a:	4c f5       	brge	.+82     	; 0x2eee <robot_rotate_clockwise+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e2       	ldi	r20, 0x20	; 32
    2eaa:	51 e4       	ldi	r21, 0x41	; 65
    2eac:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	cd 01       	movw	r24, r26
    2eb8:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	9e 83       	std	Y+6, r25	; 0x06
    2ec2:	8d 83       	std	Y+5, r24	; 0x05
    2ec4:	0f c0       	rjmp	.+30     	; 0x2ee4 <robot_rotate_clockwise+0xd4>
    2ec6:	80 e7       	ldi	r24, 0x70	; 112
    2ec8:	91 e0       	ldi	r25, 0x01	; 1
    2eca:	9c 83       	std	Y+4, r25	; 0x04
    2ecc:	8b 83       	std	Y+3, r24	; 0x03
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <robot_rotate_clockwise+0xc2>
    2ed6:	9c 83       	std	Y+4, r25	; 0x04
    2ed8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eda:	8d 81       	ldd	r24, Y+5	; 0x05
    2edc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	9e 83       	std	Y+6, r25	; 0x06
    2ee2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	69 f7       	brne	.-38     	; 0x2ec6 <robot_rotate_clockwise+0xb6>
    2eec:	14 c0       	rjmp	.+40     	; 0x2f16 <robot_rotate_clockwise+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef0:	78 85       	ldd	r23, Y+8	; 0x08
    2ef2:	89 85       	ldd	r24, Y+9	; 0x09
    2ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef6:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	9e 83       	std	Y+6, r25	; 0x06
    2f00:	8d 83       	std	Y+5, r24	; 0x05
    2f02:	8d 81       	ldd	r24, Y+5	; 0x05
    2f04:	9e 81       	ldd	r25, Y+6	; 0x06
    2f06:	9a 83       	std	Y+2, r25	; 0x02
    2f08:	89 83       	std	Y+1, r24	; 0x01
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <robot_rotate_clockwise+0xfe>
    2f12:	9a 83       	std	Y+2, r25	; 0x02
    2f14:	89 83       	std	Y+1, r24	; 0x01
  
 motion_busy = 0; 
    2f16:	10 92 0c 02 	sts	0x020C, r1
}
    2f1a:	2e 96       	adiw	r28, 0x0e	; 14
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <robot_rotate_counterclockwise>:

//--------------------------------------------------------------------------------
// function to turn left by single step  in counterclockwise direction
//--------------------------------------------------------------------------------
void robot_rotate_counterclockwise (void)
{
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	2e 97       	sbiw	r28, 0x0e	; 14
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
 motion_busy = 1; 
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	80 93 0c 02 	sts	0x020C, r24
 
 counter_clock_wise_step();              // move legs to desire direction
    2f46:	0e 94 21 15 	call	0x2a42	; 0x2a42 <counter_clock_wise_step>
 robot_stand_position(); _delay_ms(250); // apply rotation stroke
    2f4a:	0e 94 89 07 	call	0xf12	; 0xf12 <robot_stand_position>
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	aa e7       	ldi	r26, 0x7A	; 122
    2f54:	b3 e4       	ldi	r27, 0x43	; 67
    2f56:	8b 87       	std	Y+11, r24	; 0x0b
    2f58:	9c 87       	std	Y+12, r25	; 0x0c
    2f5a:	ad 87       	std	Y+13, r26	; 0x0d
    2f5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f66:	26 e6       	ldi	r18, 0x66	; 102
    2f68:	36 e6       	ldi	r19, 0x66	; 102
    2f6a:	46 e6       	ldi	r20, 0x66	; 102
    2f6c:	55 e4       	ldi	r21, 0x45	; 69
    2f6e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	8f 83       	std	Y+7, r24	; 0x07
    2f78:	98 87       	std	Y+8, r25	; 0x08
    2f7a:	a9 87       	std	Y+9, r26	; 0x09
    2f7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f80:	78 85       	ldd	r23, Y+8	; 0x08
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e8       	ldi	r20, 0x80	; 128
    2f8c:	5f e3       	ldi	r21, 0x3F	; 63
    2f8e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    2f92:	88 23       	and	r24, r24
    2f94:	2c f4       	brge	.+10     	; 0x2fa0 <robot_rotate_counterclockwise+0x74>
		__ticks = 1;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	9e 83       	std	Y+6, r25	; 0x06
    2f9c:	8d 83       	std	Y+5, r24	; 0x05
    2f9e:	3f c0       	rjmp	.+126    	; 0x301e <robot_rotate_counterclockwise+0xf2>
	else if (__tmp > 65535)
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	3f ef       	ldi	r19, 0xFF	; 255
    2fac:	4f e7       	ldi	r20, 0x7F	; 127
    2fae:	57 e4       	ldi	r21, 0x47	; 71
    2fb0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    2fb4:	18 16       	cp	r1, r24
    2fb6:	4c f5       	brge	.+82     	; 0x300a <robot_rotate_counterclockwise+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e2       	ldi	r20, 0x20	; 32
    2fc6:	51 e4       	ldi	r21, 0x41	; 65
    2fc8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	8d 83       	std	Y+5, r24	; 0x05
    2fe0:	0f c0       	rjmp	.+30     	; 0x3000 <robot_rotate_counterclockwise+0xd4>
    2fe2:	80 e7       	ldi	r24, 0x70	; 112
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	9c 83       	std	Y+4, r25	; 0x04
    2fe8:	8b 83       	std	Y+3, r24	; 0x03
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	9c 81       	ldd	r25, Y+4	; 0x04
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <robot_rotate_counterclockwise+0xc2>
    2ff2:	9c 83       	std	Y+4, r25	; 0x04
    2ff4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	9e 83       	std	Y+6, r25	; 0x06
    2ffe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3000:	8d 81       	ldd	r24, Y+5	; 0x05
    3002:	9e 81       	ldd	r25, Y+6	; 0x06
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	69 f7       	brne	.-38     	; 0x2fe2 <robot_rotate_counterclockwise+0xb6>
    3008:	14 c0       	rjmp	.+40     	; 0x3032 <robot_rotate_counterclockwise+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300a:	6f 81       	ldd	r22, Y+7	; 0x07
    300c:	78 85       	ldd	r23, Y+8	; 0x08
    300e:	89 85       	ldd	r24, Y+9	; 0x09
    3010:	9a 85       	ldd	r25, Y+10	; 0x0a
    3012:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	9e 83       	std	Y+6, r25	; 0x06
    301c:	8d 83       	std	Y+5, r24	; 0x05
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	9e 81       	ldd	r25, Y+6	; 0x06
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <robot_rotate_counterclockwise+0xfe>
    302e:	9a 83       	std	Y+2, r25	; 0x02
    3030:	89 83       	std	Y+1, r24	; 0x01

 motion_busy = 0; 
    3032:	10 92 0c 02 	sts	0x020C, r1
}
    3036:	2e 96       	adiw	r28, 0x0e	; 14
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	cf 91       	pop	r28
    3044:	df 91       	pop	r29
    3046:	08 95       	ret

00003048 <forward>:

//--------------------------------------------------------------------------------
// function to move robot forward
//--------------------------------------------------------------------------------
void forward (void)
{
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
 motion_busy = 1; 
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	80 93 0c 02 	sts	0x020C, r24
 fwd_front_step();         // move legs to desire direction
    3056:	0e 94 c6 07 	call	0xf8c	; 0xf8c <fwd_front_step>
 wlalk_stroke();            // apply backward stroke
    305a:	0e 94 4c 07 	call	0xe98	; 0xe98 <wlalk_stroke>
 motion_busy = 0; 
    305e:	10 92 0c 02 	sts	0x020C, r1
}
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <back>:

//--------------------------------------------------------------------------------
// function to move robot back
//--------------------------------------------------------------------------------
void back (void)
{
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
 motion_busy = 1; 
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	80 93 0c 02 	sts	0x020C, r24
 back_front_step();        // move legs to desire direction
    3076:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <back_front_step>
 wlalk_stroke();            // apply backward stroke
    307a:	0e 94 4c 07 	call	0xe98	; 0xe98 <wlalk_stroke>
 motion_busy = 0; 
    307e:	10 92 0c 02 	sts	0x020C, r1
}
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <init_devices>:

//--------------------------------------------------------------------------------
//call this routine to initialize all peripherals
//--------------------------------------------------------------------------------
void init_devices(void)
{
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli();                                // disable all interrupts
    3090:	f8 94       	cli
 servo_pin_config();                   // servo configuration 
    3092:	0e 94 95 00 	call	0x12a	; 0x12a <servo_pin_config>
 timer1_init();                        // initilize timer1
    3096:	0e 94 da 02 	call	0x5b4	; 0x5b4 <timer1_init>

 TIMSK1 = 0x0F;                        // timer1 interrupt sources
    309a:	ef e6       	ldi	r30, 0x6F	; 111
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	8f e0       	ldi	r24, 0x0F	; 15
    30a0:	80 83       	st	Z, r24
 
 sei(); //re-enable interrupts
    30a2:	78 94       	sei
 //all peripherals are now initialized
}
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	08 95       	ret

000030aa <main>:

//--------------------------------------------------------------------------------
//main fuction starts here
//--------------------------------------------------------------------------------
int main(void) 
{
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	c6 54       	subi	r28, 0x46	; 70
    30b8:	d0 40       	sbci	r29, 0x00	; 0
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
 init_devices();
    30c4:	0e 94 44 18 	call	0x3088	; 0x3088 <init_devices>
 
 servo_on ();                     //turning on the servo supply
    30c8:	0e 94 c6 00 	call	0x18c	; 0x18c <servo_on>
 
 //robot_arm_calibration();         //call while replacing any servo or calibrating 
 //_delay_ms(1500);                 //each arm 

 
 robot_stand_position();  		  //must be called as the first instruction
    30cc:	0e 94 89 07 	call	0xf12	; 0xf12 <robot_stand_position>
    30d0:	fe 01       	movw	r30, r28
    30d2:	ed 5b       	subi	r30, 0xBD	; 189
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	90 e8       	ldi	r25, 0x80	; 128
    30da:	ab e3       	ldi	r26, 0x3B	; 59
    30dc:	b5 e4       	ldi	r27, 0x45	; 69
    30de:	80 83       	st	Z, r24
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	a2 83       	std	Z+2, r26	; 0x02
    30e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e6:	8e 01       	movw	r16, r28
    30e8:	01 5c       	subi	r16, 0xC1	; 193
    30ea:	1f 4f       	sbci	r17, 0xFF	; 255
    30ec:	fe 01       	movw	r30, r28
    30ee:	ed 5b       	subi	r30, 0xBD	; 189
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	60 81       	ld	r22, Z
    30f4:	71 81       	ldd	r23, Z+1	; 0x01
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	26 e6       	ldi	r18, 0x66	; 102
    30fc:	36 e6       	ldi	r19, 0x66	; 102
    30fe:	46 e6       	ldi	r20, 0x66	; 102
    3100:	55 e4       	ldi	r21, 0x45	; 69
    3102:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	f8 01       	movw	r30, r16
    310c:	80 83       	st	Z, r24
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	a2 83       	std	Z+2, r26	; 0x02
    3112:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3114:	fe 01       	movw	r30, r28
    3116:	ff 96       	adiw	r30, 0x3f	; 63
    3118:	60 81       	ld	r22, Z
    311a:	71 81       	ldd	r23, Z+1	; 0x01
    311c:	82 81       	ldd	r24, Z+2	; 0x02
    311e:	93 81       	ldd	r25, Z+3	; 0x03
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e8       	ldi	r20, 0x80	; 128
    3126:	5f e3       	ldi	r21, 0x3F	; 63
    3128:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    312c:	88 23       	and	r24, r24
    312e:	2c f4       	brge	.+10     	; 0x313a <main+0x90>
		__ticks = 1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	9e af       	std	Y+62, r25	; 0x3e
    3136:	8d af       	std	Y+61, r24	; 0x3d
    3138:	46 c0       	rjmp	.+140    	; 0x31c6 <main+0x11c>
	else if (__tmp > 65535)
    313a:	fe 01       	movw	r30, r28
    313c:	ff 96       	adiw	r30, 0x3f	; 63
    313e:	60 81       	ld	r22, Z
    3140:	71 81       	ldd	r23, Z+1	; 0x01
    3142:	82 81       	ldd	r24, Z+2	; 0x02
    3144:	93 81       	ldd	r25, Z+3	; 0x03
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	3f ef       	ldi	r19, 0xFF	; 255
    314a:	4f e7       	ldi	r20, 0x7F	; 127
    314c:	57 e4       	ldi	r21, 0x47	; 71
    314e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    3152:	18 16       	cp	r1, r24
    3154:	64 f5       	brge	.+88     	; 0x31ae <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3156:	fe 01       	movw	r30, r28
    3158:	ed 5b       	subi	r30, 0xBD	; 189
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	60 81       	ld	r22, Z
    315e:	71 81       	ldd	r23, Z+1	; 0x01
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e2       	ldi	r20, 0x20	; 32
    316a:	51 e4       	ldi	r21, 0x41	; 65
    316c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9e af       	std	Y+62, r25	; 0x3e
    3182:	8d af       	std	Y+61, r24	; 0x3d
    3184:	0f c0       	rjmp	.+30     	; 0x31a4 <main+0xfa>
    3186:	80 e7       	ldi	r24, 0x70	; 112
    3188:	91 e0       	ldi	r25, 0x01	; 1
    318a:	9c af       	std	Y+60, r25	; 0x3c
    318c:	8b af       	std	Y+59, r24	; 0x3b
    318e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3190:	9c ad       	ldd	r25, Y+60	; 0x3c
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <main+0xe8>
    3196:	9c af       	std	Y+60, r25	; 0x3c
    3198:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319a:	8d ad       	ldd	r24, Y+61	; 0x3d
    319c:	9e ad       	ldd	r25, Y+62	; 0x3e
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	9e af       	std	Y+62, r25	; 0x3e
    31a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    31a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	69 f7       	brne	.-38     	; 0x3186 <main+0xdc>
    31ac:	16 c0       	rjmp	.+44     	; 0x31da <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ae:	fe 01       	movw	r30, r28
    31b0:	ff 96       	adiw	r30, 0x3f	; 63
    31b2:	60 81       	ld	r22, Z
    31b4:	71 81       	ldd	r23, Z+1	; 0x01
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	93 81       	ldd	r25, Z+3	; 0x03
    31ba:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	9e af       	std	Y+62, r25	; 0x3e
    31c4:	8d af       	std	Y+61, r24	; 0x3d
    31c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    31c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    31ca:	9a af       	std	Y+58, r25	; 0x3a
    31cc:	89 af       	std	Y+57, r24	; 0x39
    31ce:	89 ad       	ldd	r24, Y+57	; 0x39
    31d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <main+0x128>
    31d6:	9a af       	std	Y+58, r25	; 0x3a
    31d8:	89 af       	std	Y+57, r24	; 0x39
 _delay_ms(3000);

// call the robot movement sequence here 
// move backward three step 
 forward();
    31da:	0e 94 24 18 	call	0x3048	; 0x3048 <forward>
 while(motion_busy == 1);
    31de:	80 91 0c 02 	lds	r24, 0x020C
    31e2:	81 30       	cpi	r24, 0x01	; 1
    31e4:	e1 f3       	breq	.-8      	; 0x31de <main+0x134>
 forward();
    31e6:	0e 94 24 18 	call	0x3048	; 0x3048 <forward>
 while(motion_busy == 1);
    31ea:	80 91 0c 02 	lds	r24, 0x020C
    31ee:	81 30       	cpi	r24, 0x01	; 1
    31f0:	e1 f3       	breq	.-8      	; 0x31ea <main+0x140>
 forward();
    31f2:	0e 94 24 18 	call	0x3048	; 0x3048 <forward>
 while(motion_busy == 1); 
    31f6:	80 91 0c 02 	lds	r24, 0x020C
    31fa:	81 30       	cpi	r24, 0x01	; 1
    31fc:	e1 f3       	breq	.-8      	; 0x31f6 <main+0x14c>
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e8       	ldi	r25, 0x80	; 128
    3202:	ab e3       	ldi	r26, 0x3B	; 59
    3204:	b5 e4       	ldi	r27, 0x45	; 69
    3206:	8d ab       	std	Y+53, r24	; 0x35
    3208:	9e ab       	std	Y+54, r25	; 0x36
    320a:	af ab       	std	Y+55, r26	; 0x37
    320c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320e:	6d a9       	ldd	r22, Y+53	; 0x35
    3210:	7e a9       	ldd	r23, Y+54	; 0x36
    3212:	8f a9       	ldd	r24, Y+55	; 0x37
    3214:	98 ad       	ldd	r25, Y+56	; 0x38
    3216:	26 e6       	ldi	r18, 0x66	; 102
    3218:	36 e6       	ldi	r19, 0x66	; 102
    321a:	46 e6       	ldi	r20, 0x66	; 102
    321c:	55 e4       	ldi	r21, 0x45	; 69
    321e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	89 ab       	std	Y+49, r24	; 0x31
    3228:	9a ab       	std	Y+50, r25	; 0x32
    322a:	ab ab       	std	Y+51, r26	; 0x33
    322c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    322e:	69 a9       	ldd	r22, Y+49	; 0x31
    3230:	7a a9       	ldd	r23, Y+50	; 0x32
    3232:	8b a9       	ldd	r24, Y+51	; 0x33
    3234:	9c a9       	ldd	r25, Y+52	; 0x34
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e8       	ldi	r20, 0x80	; 128
    323c:	5f e3       	ldi	r21, 0x3F	; 63
    323e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    3242:	88 23       	and	r24, r24
    3244:	2c f4       	brge	.+10     	; 0x3250 <main+0x1a6>
		__ticks = 1;
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	98 ab       	std	Y+48, r25	; 0x30
    324c:	8f a7       	std	Y+47, r24	; 0x2f
    324e:	3f c0       	rjmp	.+126    	; 0x32ce <main+0x224>
	else if (__tmp > 65535)
    3250:	69 a9       	ldd	r22, Y+49	; 0x31
    3252:	7a a9       	ldd	r23, Y+50	; 0x32
    3254:	8b a9       	ldd	r24, Y+51	; 0x33
    3256:	9c a9       	ldd	r25, Y+52	; 0x34
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	3f ef       	ldi	r19, 0xFF	; 255
    325c:	4f e7       	ldi	r20, 0x7F	; 127
    325e:	57 e4       	ldi	r21, 0x47	; 71
    3260:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    3264:	18 16       	cp	r1, r24
    3266:	4c f5       	brge	.+82     	; 0x32ba <main+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3268:	6d a9       	ldd	r22, Y+53	; 0x35
    326a:	7e a9       	ldd	r23, Y+54	; 0x36
    326c:	8f a9       	ldd	r24, Y+55	; 0x37
    326e:	98 ad       	ldd	r25, Y+56	; 0x38
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e2       	ldi	r20, 0x20	; 32
    3276:	51 e4       	ldi	r21, 0x41	; 65
    3278:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	bc 01       	movw	r22, r24
    3282:	cd 01       	movw	r24, r26
    3284:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	98 ab       	std	Y+48, r25	; 0x30
    328e:	8f a7       	std	Y+47, r24	; 0x2f
    3290:	0f c0       	rjmp	.+30     	; 0x32b0 <main+0x206>
    3292:	80 e7       	ldi	r24, 0x70	; 112
    3294:	91 e0       	ldi	r25, 0x01	; 1
    3296:	9e a7       	std	Y+46, r25	; 0x2e
    3298:	8d a7       	std	Y+45, r24	; 0x2d
    329a:	8d a5       	ldd	r24, Y+45	; 0x2d
    329c:	9e a5       	ldd	r25, Y+46	; 0x2e
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <main+0x1f4>
    32a2:	9e a7       	std	Y+46, r25	; 0x2e
    32a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a8:	98 a9       	ldd	r25, Y+48	; 0x30
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	98 ab       	std	Y+48, r25	; 0x30
    32ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    32b2:	98 a9       	ldd	r25, Y+48	; 0x30
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	69 f7       	brne	.-38     	; 0x3292 <main+0x1e8>
    32b8:	14 c0       	rjmp	.+40     	; 0x32e2 <main+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ba:	69 a9       	ldd	r22, Y+49	; 0x31
    32bc:	7a a9       	ldd	r23, Y+50	; 0x32
    32be:	8b a9       	ldd	r24, Y+51	; 0x33
    32c0:	9c a9       	ldd	r25, Y+52	; 0x34
    32c2:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	98 ab       	std	Y+48, r25	; 0x30
    32cc:	8f a7       	std	Y+47, r24	; 0x2f
    32ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d0:	98 a9       	ldd	r25, Y+48	; 0x30
    32d2:	9c a7       	std	Y+44, r25	; 0x2c
    32d4:	8b a7       	std	Y+43, r24	; 0x2b
    32d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    32d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <main+0x230>
    32de:	9c a7       	std	Y+44, r25	; 0x2c
    32e0:	8b a7       	std	Y+43, r24	; 0x2b

 _delay_ms(3000);
// move backward three step 
 back();
    32e2:	0e 94 34 18 	call	0x3068	; 0x3068 <back>
 while(motion_busy == 1);
    32e6:	80 91 0c 02 	lds	r24, 0x020C
    32ea:	81 30       	cpi	r24, 0x01	; 1
    32ec:	e1 f3       	breq	.-8      	; 0x32e6 <main+0x23c>
 back();
    32ee:	0e 94 34 18 	call	0x3068	; 0x3068 <back>
 while(motion_busy == 1);
    32f2:	80 91 0c 02 	lds	r24, 0x020C
    32f6:	81 30       	cpi	r24, 0x01	; 1
    32f8:	e1 f3       	breq	.-8      	; 0x32f2 <main+0x248>
 back(); 
    32fa:	0e 94 34 18 	call	0x3068	; 0x3068 <back>
 while(motion_busy == 1);
    32fe:	80 91 0c 02 	lds	r24, 0x020C
    3302:	81 30       	cpi	r24, 0x01	; 1
    3304:	e1 f3       	breq	.-8      	; 0x32fe <main+0x254>
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e8       	ldi	r25, 0x80	; 128
    330a:	ab e3       	ldi	r26, 0x3B	; 59
    330c:	b5 e4       	ldi	r27, 0x45	; 69
    330e:	8f a3       	std	Y+39, r24	; 0x27
    3310:	98 a7       	std	Y+40, r25	; 0x28
    3312:	a9 a7       	std	Y+41, r26	; 0x29
    3314:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3316:	6f a1       	ldd	r22, Y+39	; 0x27
    3318:	78 a5       	ldd	r23, Y+40	; 0x28
    331a:	89 a5       	ldd	r24, Y+41	; 0x29
    331c:	9a a5       	ldd	r25, Y+42	; 0x2a
    331e:	26 e6       	ldi	r18, 0x66	; 102
    3320:	36 e6       	ldi	r19, 0x66	; 102
    3322:	46 e6       	ldi	r20, 0x66	; 102
    3324:	55 e4       	ldi	r21, 0x45	; 69
    3326:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	8b a3       	std	Y+35, r24	; 0x23
    3330:	9c a3       	std	Y+36, r25	; 0x24
    3332:	ad a3       	std	Y+37, r26	; 0x25
    3334:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3336:	6b a1       	ldd	r22, Y+35	; 0x23
    3338:	7c a1       	ldd	r23, Y+36	; 0x24
    333a:	8d a1       	ldd	r24, Y+37	; 0x25
    333c:	9e a1       	ldd	r25, Y+38	; 0x26
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e8       	ldi	r20, 0x80	; 128
    3344:	5f e3       	ldi	r21, 0x3F	; 63
    3346:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    334a:	88 23       	and	r24, r24
    334c:	2c f4       	brge	.+10     	; 0x3358 <main+0x2ae>
		__ticks = 1;
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	9a a3       	std	Y+34, r25	; 0x22
    3354:	89 a3       	std	Y+33, r24	; 0x21
    3356:	3f c0       	rjmp	.+126    	; 0x33d6 <main+0x32c>
	else if (__tmp > 65535)
    3358:	6b a1       	ldd	r22, Y+35	; 0x23
    335a:	7c a1       	ldd	r23, Y+36	; 0x24
    335c:	8d a1       	ldd	r24, Y+37	; 0x25
    335e:	9e a1       	ldd	r25, Y+38	; 0x26
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	3f ef       	ldi	r19, 0xFF	; 255
    3364:	4f e7       	ldi	r20, 0x7F	; 127
    3366:	57 e4       	ldi	r21, 0x47	; 71
    3368:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    336c:	18 16       	cp	r1, r24
    336e:	4c f5       	brge	.+82     	; 0x33c2 <main+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3370:	6f a1       	ldd	r22, Y+39	; 0x27
    3372:	78 a5       	ldd	r23, Y+40	; 0x28
    3374:	89 a5       	ldd	r24, Y+41	; 0x29
    3376:	9a a5       	ldd	r25, Y+42	; 0x2a
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e2       	ldi	r20, 0x20	; 32
    337e:	51 e4       	ldi	r21, 0x41	; 65
    3380:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	9a a3       	std	Y+34, r25	; 0x22
    3396:	89 a3       	std	Y+33, r24	; 0x21
    3398:	0f c0       	rjmp	.+30     	; 0x33b8 <main+0x30e>
    339a:	80 e7       	ldi	r24, 0x70	; 112
    339c:	91 e0       	ldi	r25, 0x01	; 1
    339e:	98 a3       	std	Y+32, r25	; 0x20
    33a0:	8f 8f       	std	Y+31, r24	; 0x1f
    33a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33a4:	98 a1       	ldd	r25, Y+32	; 0x20
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <main+0x2fc>
    33aa:	98 a3       	std	Y+32, r25	; 0x20
    33ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ae:	89 a1       	ldd	r24, Y+33	; 0x21
    33b0:	9a a1       	ldd	r25, Y+34	; 0x22
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	9a a3       	std	Y+34, r25	; 0x22
    33b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b8:	89 a1       	ldd	r24, Y+33	; 0x21
    33ba:	9a a1       	ldd	r25, Y+34	; 0x22
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	69 f7       	brne	.-38     	; 0x339a <main+0x2f0>
    33c0:	14 c0       	rjmp	.+40     	; 0x33ea <main+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c2:	6b a1       	ldd	r22, Y+35	; 0x23
    33c4:	7c a1       	ldd	r23, Y+36	; 0x24
    33c6:	8d a1       	ldd	r24, Y+37	; 0x25
    33c8:	9e a1       	ldd	r25, Y+38	; 0x26
    33ca:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	9a a3       	std	Y+34, r25	; 0x22
    33d4:	89 a3       	std	Y+33, r24	; 0x21
    33d6:	89 a1       	ldd	r24, Y+33	; 0x21
    33d8:	9a a1       	ldd	r25, Y+34	; 0x22
    33da:	9e 8f       	std	Y+30, r25	; 0x1e
    33dc:	8d 8f       	std	Y+29, r24	; 0x1d
    33de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <main+0x338>
    33e6:	9e 8f       	std	Y+30, r25	; 0x1e
    33e8:	8d 8f       	std	Y+29, r24	; 0x1d

 _delay_ms(3000);

 // rotate counter-clockwise by three step
 robot_rotate_counterclockwise(); 
    33ea:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <robot_rotate_counterclockwise>
 while(motion_busy == 1);
    33ee:	80 91 0c 02 	lds	r24, 0x020C
    33f2:	81 30       	cpi	r24, 0x01	; 1
    33f4:	e1 f3       	breq	.-8      	; 0x33ee <main+0x344>
 robot_rotate_counterclockwise(); 
    33f6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <robot_rotate_counterclockwise>
 while(motion_busy == 1);
    33fa:	80 91 0c 02 	lds	r24, 0x020C
    33fe:	81 30       	cpi	r24, 0x01	; 1
    3400:	e1 f3       	breq	.-8      	; 0x33fa <main+0x350>
 robot_rotate_counterclockwise(); 
    3402:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <robot_rotate_counterclockwise>
 while(motion_busy == 1); 
    3406:	80 91 0c 02 	lds	r24, 0x020C
    340a:	81 30       	cpi	r24, 0x01	; 1
    340c:	e1 f3       	breq	.-8      	; 0x3406 <main+0x35c>
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	90 e8       	ldi	r25, 0x80	; 128
    3412:	ab e3       	ldi	r26, 0x3B	; 59
    3414:	b5 e4       	ldi	r27, 0x45	; 69
    3416:	89 8f       	std	Y+25, r24	; 0x19
    3418:	9a 8f       	std	Y+26, r25	; 0x1a
    341a:	ab 8f       	std	Y+27, r26	; 0x1b
    341c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341e:	69 8d       	ldd	r22, Y+25	; 0x19
    3420:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3422:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3424:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3426:	26 e6       	ldi	r18, 0x66	; 102
    3428:	36 e6       	ldi	r19, 0x66	; 102
    342a:	46 e6       	ldi	r20, 0x66	; 102
    342c:	55 e4       	ldi	r21, 0x45	; 69
    342e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	8d 8b       	std	Y+21, r24	; 0x15
    3438:	9e 8b       	std	Y+22, r25	; 0x16
    343a:	af 8b       	std	Y+23, r26	; 0x17
    343c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    343e:	6d 89       	ldd	r22, Y+21	; 0x15
    3440:	7e 89       	ldd	r23, Y+22	; 0x16
    3442:	8f 89       	ldd	r24, Y+23	; 0x17
    3444:	98 8d       	ldd	r25, Y+24	; 0x18
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	40 e8       	ldi	r20, 0x80	; 128
    344c:	5f e3       	ldi	r21, 0x3F	; 63
    344e:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    3452:	88 23       	and	r24, r24
    3454:	2c f4       	brge	.+10     	; 0x3460 <main+0x3b6>
		__ticks = 1;
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	9c 8b       	std	Y+20, r25	; 0x14
    345c:	8b 8b       	std	Y+19, r24	; 0x13
    345e:	3f c0       	rjmp	.+126    	; 0x34de <main+0x434>
	else if (__tmp > 65535)
    3460:	6d 89       	ldd	r22, Y+21	; 0x15
    3462:	7e 89       	ldd	r23, Y+22	; 0x16
    3464:	8f 89       	ldd	r24, Y+23	; 0x17
    3466:	98 8d       	ldd	r25, Y+24	; 0x18
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	3f ef       	ldi	r19, 0xFF	; 255
    346c:	4f e7       	ldi	r20, 0x7F	; 127
    346e:	57 e4       	ldi	r21, 0x47	; 71
    3470:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    3474:	18 16       	cp	r1, r24
    3476:	4c f5       	brge	.+82     	; 0x34ca <main+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3478:	69 8d       	ldd	r22, Y+25	; 0x19
    347a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    347c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	40 e2       	ldi	r20, 0x20	; 32
    3486:	51 e4       	ldi	r21, 0x41	; 65
    3488:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	bc 01       	movw	r22, r24
    3492:	cd 01       	movw	r24, r26
    3494:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	9c 8b       	std	Y+20, r25	; 0x14
    349e:	8b 8b       	std	Y+19, r24	; 0x13
    34a0:	0f c0       	rjmp	.+30     	; 0x34c0 <main+0x416>
    34a2:	80 e7       	ldi	r24, 0x70	; 112
    34a4:	91 e0       	ldi	r25, 0x01	; 1
    34a6:	9a 8b       	std	Y+18, r25	; 0x12
    34a8:	89 8b       	std	Y+17, r24	; 0x11
    34aa:	89 89       	ldd	r24, Y+17	; 0x11
    34ac:	9a 89       	ldd	r25, Y+18	; 0x12
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	f1 f7       	brne	.-4      	; 0x34ae <main+0x404>
    34b2:	9a 8b       	std	Y+18, r25	; 0x12
    34b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b6:	8b 89       	ldd	r24, Y+19	; 0x13
    34b8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	9c 8b       	std	Y+20, r25	; 0x14
    34be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c0:	8b 89       	ldd	r24, Y+19	; 0x13
    34c2:	9c 89       	ldd	r25, Y+20	; 0x14
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	69 f7       	brne	.-38     	; 0x34a2 <main+0x3f8>
    34c8:	14 c0       	rjmp	.+40     	; 0x34f2 <main+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ca:	6d 89       	ldd	r22, Y+21	; 0x15
    34cc:	7e 89       	ldd	r23, Y+22	; 0x16
    34ce:	8f 89       	ldd	r24, Y+23	; 0x17
    34d0:	98 8d       	ldd	r25, Y+24	; 0x18
    34d2:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	9c 8b       	std	Y+20, r25	; 0x14
    34dc:	8b 8b       	std	Y+19, r24	; 0x13
    34de:	8b 89       	ldd	r24, Y+19	; 0x13
    34e0:	9c 89       	ldd	r25, Y+20	; 0x14
    34e2:	98 8b       	std	Y+16, r25	; 0x10
    34e4:	8f 87       	std	Y+15, r24	; 0x0f
    34e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e8:	98 89       	ldd	r25, Y+16	; 0x10
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	f1 f7       	brne	.-4      	; 0x34ea <main+0x440>
    34ee:	98 8b       	std	Y+16, r25	; 0x10
    34f0:	8f 87       	std	Y+15, r24	; 0x0f

 _delay_ms(3000);

// rotate clockwise by three syep
 robot_rotate_clockwise();
    34f2:	0e 94 08 17 	call	0x2e10	; 0x2e10 <robot_rotate_clockwise>
 while(motion_busy == 1);
    34f6:	80 91 0c 02 	lds	r24, 0x020C
    34fa:	81 30       	cpi	r24, 0x01	; 1
    34fc:	e1 f3       	breq	.-8      	; 0x34f6 <main+0x44c>
 robot_rotate_clockwise();
    34fe:	0e 94 08 17 	call	0x2e10	; 0x2e10 <robot_rotate_clockwise>
 while(motion_busy == 1);
    3502:	80 91 0c 02 	lds	r24, 0x020C
    3506:	81 30       	cpi	r24, 0x01	; 1
    3508:	e1 f3       	breq	.-8      	; 0x3502 <main+0x458>
 robot_rotate_clockwise();
    350a:	0e 94 08 17 	call	0x2e10	; 0x2e10 <robot_rotate_clockwise>
 while(motion_busy == 1); 
    350e:	80 91 0c 02 	lds	r24, 0x020C
    3512:	81 30       	cpi	r24, 0x01	; 1
    3514:	e1 f3       	breq	.-8      	; 0x350e <main+0x464>
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	90 e8       	ldi	r25, 0x80	; 128
    351a:	ab e3       	ldi	r26, 0x3B	; 59
    351c:	b5 e4       	ldi	r27, 0x45	; 69
    351e:	8b 87       	std	Y+11, r24	; 0x0b
    3520:	9c 87       	std	Y+12, r25	; 0x0c
    3522:	ad 87       	std	Y+13, r26	; 0x0d
    3524:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3526:	6b 85       	ldd	r22, Y+11	; 0x0b
    3528:	7c 85       	ldd	r23, Y+12	; 0x0c
    352a:	8d 85       	ldd	r24, Y+13	; 0x0d
    352c:	9e 85       	ldd	r25, Y+14	; 0x0e
    352e:	26 e6       	ldi	r18, 0x66	; 102
    3530:	36 e6       	ldi	r19, 0x66	; 102
    3532:	46 e6       	ldi	r20, 0x66	; 102
    3534:	55 e4       	ldi	r21, 0x45	; 69
    3536:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	8f 83       	std	Y+7, r24	; 0x07
    3540:	98 87       	std	Y+8, r25	; 0x08
    3542:	a9 87       	std	Y+9, r26	; 0x09
    3544:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3546:	6f 81       	ldd	r22, Y+7	; 0x07
    3548:	78 85       	ldd	r23, Y+8	; 0x08
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	9a 85       	ldd	r25, Y+10	; 0x0a
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e8       	ldi	r20, 0x80	; 128
    3554:	5f e3       	ldi	r21, 0x3F	; 63
    3556:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__ltsf2>
    355a:	88 23       	and	r24, r24
    355c:	2c f4       	brge	.+10     	; 0x3568 <main+0x4be>
		__ticks = 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	9e 83       	std	Y+6, r25	; 0x06
    3564:	8d 83       	std	Y+5, r24	; 0x05
    3566:	3f c0       	rjmp	.+126    	; 0x35e6 <main+0x53c>
	else if (__tmp > 65535)
    3568:	6f 81       	ldd	r22, Y+7	; 0x07
    356a:	78 85       	ldd	r23, Y+8	; 0x08
    356c:	89 85       	ldd	r24, Y+9	; 0x09
    356e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	3f ef       	ldi	r19, 0xFF	; 255
    3574:	4f e7       	ldi	r20, 0x7F	; 127
    3576:	57 e4       	ldi	r21, 0x47	; 71
    3578:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__gtsf2>
    357c:	18 16       	cp	r1, r24
    357e:	4c f5       	brge	.+82     	; 0x35d2 <main+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3580:	6b 85       	ldd	r22, Y+11	; 0x0b
    3582:	7c 85       	ldd	r23, Y+12	; 0x0c
    3584:	8d 85       	ldd	r24, Y+13	; 0x0d
    3586:	9e 85       	ldd	r25, Y+14	; 0x0e
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e2       	ldi	r20, 0x20	; 32
    358e:	51 e4       	ldi	r21, 0x41	; 65
    3590:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	9e 83       	std	Y+6, r25	; 0x06
    35a6:	8d 83       	std	Y+5, r24	; 0x05
    35a8:	0f c0       	rjmp	.+30     	; 0x35c8 <main+0x51e>
    35aa:	80 e7       	ldi	r24, 0x70	; 112
    35ac:	91 e0       	ldi	r25, 0x01	; 1
    35ae:	9c 83       	std	Y+4, r25	; 0x04
    35b0:	8b 83       	std	Y+3, r24	; 0x03
    35b2:	8b 81       	ldd	r24, Y+3	; 0x03
    35b4:	9c 81       	ldd	r25, Y+4	; 0x04
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <main+0x50c>
    35ba:	9c 83       	std	Y+4, r25	; 0x04
    35bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35be:	8d 81       	ldd	r24, Y+5	; 0x05
    35c0:	9e 81       	ldd	r25, Y+6	; 0x06
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	9e 83       	std	Y+6, r25	; 0x06
    35c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ca:	9e 81       	ldd	r25, Y+6	; 0x06
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	69 f7       	brne	.-38     	; 0x35aa <main+0x500>
    35d0:	14 c0       	rjmp	.+40     	; 0x35fa <main+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d2:	6f 81       	ldd	r22, Y+7	; 0x07
    35d4:	78 85       	ldd	r23, Y+8	; 0x08
    35d6:	89 85       	ldd	r24, Y+9	; 0x09
    35d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35da:	0e 94 00 1b 	call	0x3600	; 0x3600 <__fixunssfsi>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	9e 83       	std	Y+6, r25	; 0x06
    35e4:	8d 83       	std	Y+5, r24	; 0x05
    35e6:	8d 81       	ldd	r24, Y+5	; 0x05
    35e8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ea:	9a 83       	std	Y+2, r25	; 0x02
    35ec:	89 83       	std	Y+1, r24	; 0x01
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	9a 81       	ldd	r25, Y+2	; 0x02
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <main+0x548>
    35f6:	9a 83       	std	Y+2, r25	; 0x02
    35f8:	89 83       	std	Y+1, r24	; 0x01

 _delay_ms(3000);

 servo_off ();
    35fa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <servo_off>
    35fe:	ff cf       	rjmp	.-2      	; 0x35fe <main+0x554>

00003600 <__fixunssfsi>:
    3600:	ef 92       	push	r14
    3602:	ff 92       	push	r15
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	7b 01       	movw	r14, r22
    360a:	8c 01       	movw	r16, r24
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e0       	ldi	r20, 0x00	; 0
    3612:	5f e4       	ldi	r21, 0x4F	; 79
    3614:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__gesf2>
    3618:	88 23       	and	r24, r24
    361a:	8c f0       	brlt	.+34     	; 0x363e <__fixunssfsi+0x3e>
    361c:	c8 01       	movw	r24, r16
    361e:	b7 01       	movw	r22, r14
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	40 e0       	ldi	r20, 0x00	; 0
    3626:	5f e4       	ldi	r21, 0x4F	; 79
    3628:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__subsf3>
    362c:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <__fixsfsi>
    3630:	9b 01       	movw	r18, r22
    3632:	ac 01       	movw	r20, r24
    3634:	20 50       	subi	r18, 0x00	; 0
    3636:	30 40       	sbci	r19, 0x00	; 0
    3638:	40 40       	sbci	r20, 0x00	; 0
    363a:	50 48       	sbci	r21, 0x80	; 128
    363c:	06 c0       	rjmp	.+12     	; 0x364a <__fixunssfsi+0x4a>
    363e:	c8 01       	movw	r24, r16
    3640:	b7 01       	movw	r22, r14
    3642:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <__fixsfsi>
    3646:	9b 01       	movw	r18, r22
    3648:	ac 01       	movw	r20, r24
    364a:	b9 01       	movw	r22, r18
    364c:	ca 01       	movw	r24, r20
    364e:	1f 91       	pop	r17
    3650:	0f 91       	pop	r16
    3652:	ff 90       	pop	r15
    3654:	ef 90       	pop	r14
    3656:	08 95       	ret

00003658 <_fpadd_parts>:
    3658:	a0 e0       	ldi	r26, 0x00	; 0
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	e2 e3       	ldi	r30, 0x32	; 50
    365e:	fb e1       	ldi	r31, 0x1B	; 27
    3660:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__prologue_saves__>
    3664:	dc 01       	movw	r26, r24
    3666:	2b 01       	movw	r4, r22
    3668:	fa 01       	movw	r30, r20
    366a:	9c 91       	ld	r25, X
    366c:	92 30       	cpi	r25, 0x02	; 2
    366e:	08 f4       	brcc	.+2      	; 0x3672 <_fpadd_parts+0x1a>
    3670:	39 c1       	rjmp	.+626    	; 0x38e4 <_fpadd_parts+0x28c>
    3672:	eb 01       	movw	r28, r22
    3674:	88 81       	ld	r24, Y
    3676:	82 30       	cpi	r24, 0x02	; 2
    3678:	08 f4       	brcc	.+2      	; 0x367c <_fpadd_parts+0x24>
    367a:	33 c1       	rjmp	.+614    	; 0x38e2 <_fpadd_parts+0x28a>
    367c:	94 30       	cpi	r25, 0x04	; 4
    367e:	69 f4       	brne	.+26     	; 0x369a <_fpadd_parts+0x42>
    3680:	84 30       	cpi	r24, 0x04	; 4
    3682:	09 f0       	breq	.+2      	; 0x3686 <_fpadd_parts+0x2e>
    3684:	2f c1       	rjmp	.+606    	; 0x38e4 <_fpadd_parts+0x28c>
    3686:	11 96       	adiw	r26, 0x01	; 1
    3688:	9c 91       	ld	r25, X
    368a:	11 97       	sbiw	r26, 0x01	; 1
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	98 17       	cp	r25, r24
    3690:	09 f4       	brne	.+2      	; 0x3694 <_fpadd_parts+0x3c>
    3692:	28 c1       	rjmp	.+592    	; 0x38e4 <_fpadd_parts+0x28c>
    3694:	a0 e0       	ldi	r26, 0x00	; 0
    3696:	b2 e0       	ldi	r27, 0x02	; 2
    3698:	25 c1       	rjmp	.+586    	; 0x38e4 <_fpadd_parts+0x28c>
    369a:	84 30       	cpi	r24, 0x04	; 4
    369c:	09 f4       	brne	.+2      	; 0x36a0 <_fpadd_parts+0x48>
    369e:	21 c1       	rjmp	.+578    	; 0x38e2 <_fpadd_parts+0x28a>
    36a0:	82 30       	cpi	r24, 0x02	; 2
    36a2:	a9 f4       	brne	.+42     	; 0x36ce <_fpadd_parts+0x76>
    36a4:	92 30       	cpi	r25, 0x02	; 2
    36a6:	09 f0       	breq	.+2      	; 0x36aa <_fpadd_parts+0x52>
    36a8:	1d c1       	rjmp	.+570    	; 0x38e4 <_fpadd_parts+0x28c>
    36aa:	9a 01       	movw	r18, r20
    36ac:	ad 01       	movw	r20, r26
    36ae:	88 e0       	ldi	r24, 0x08	; 8
    36b0:	ea 01       	movw	r28, r20
    36b2:	09 90       	ld	r0, Y+
    36b4:	ae 01       	movw	r20, r28
    36b6:	e9 01       	movw	r28, r18
    36b8:	09 92       	st	Y+, r0
    36ba:	9e 01       	movw	r18, r28
    36bc:	81 50       	subi	r24, 0x01	; 1
    36be:	c1 f7       	brne	.-16     	; 0x36b0 <_fpadd_parts+0x58>
    36c0:	e2 01       	movw	r28, r4
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	11 96       	adiw	r26, 0x01	; 1
    36c6:	9c 91       	ld	r25, X
    36c8:	89 23       	and	r24, r25
    36ca:	81 83       	std	Z+1, r24	; 0x01
    36cc:	08 c1       	rjmp	.+528    	; 0x38de <_fpadd_parts+0x286>
    36ce:	92 30       	cpi	r25, 0x02	; 2
    36d0:	09 f4       	brne	.+2      	; 0x36d4 <_fpadd_parts+0x7c>
    36d2:	07 c1       	rjmp	.+526    	; 0x38e2 <_fpadd_parts+0x28a>
    36d4:	12 96       	adiw	r26, 0x02	; 2
    36d6:	2d 90       	ld	r2, X+
    36d8:	3c 90       	ld	r3, X
    36da:	13 97       	sbiw	r26, 0x03	; 3
    36dc:	eb 01       	movw	r28, r22
    36de:	8a 81       	ldd	r24, Y+2	; 0x02
    36e0:	9b 81       	ldd	r25, Y+3	; 0x03
    36e2:	14 96       	adiw	r26, 0x04	; 4
    36e4:	ad 90       	ld	r10, X+
    36e6:	bd 90       	ld	r11, X+
    36e8:	cd 90       	ld	r12, X+
    36ea:	dc 90       	ld	r13, X
    36ec:	17 97       	sbiw	r26, 0x07	; 7
    36ee:	ec 80       	ldd	r14, Y+4	; 0x04
    36f0:	fd 80       	ldd	r15, Y+5	; 0x05
    36f2:	0e 81       	ldd	r16, Y+6	; 0x06
    36f4:	1f 81       	ldd	r17, Y+7	; 0x07
    36f6:	91 01       	movw	r18, r2
    36f8:	28 1b       	sub	r18, r24
    36fa:	39 0b       	sbc	r19, r25
    36fc:	b9 01       	movw	r22, r18
    36fe:	37 ff       	sbrs	r19, 7
    3700:	04 c0       	rjmp	.+8      	; 0x370a <_fpadd_parts+0xb2>
    3702:	66 27       	eor	r22, r22
    3704:	77 27       	eor	r23, r23
    3706:	62 1b       	sub	r22, r18
    3708:	73 0b       	sbc	r23, r19
    370a:	60 32       	cpi	r22, 0x20	; 32
    370c:	71 05       	cpc	r23, r1
    370e:	0c f0       	brlt	.+2      	; 0x3712 <_fpadd_parts+0xba>
    3710:	61 c0       	rjmp	.+194    	; 0x37d4 <_fpadd_parts+0x17c>
    3712:	12 16       	cp	r1, r18
    3714:	13 06       	cpc	r1, r19
    3716:	6c f5       	brge	.+90     	; 0x3772 <_fpadd_parts+0x11a>
    3718:	37 01       	movw	r6, r14
    371a:	48 01       	movw	r8, r16
    371c:	06 2e       	mov	r0, r22
    371e:	04 c0       	rjmp	.+8      	; 0x3728 <_fpadd_parts+0xd0>
    3720:	96 94       	lsr	r9
    3722:	87 94       	ror	r8
    3724:	77 94       	ror	r7
    3726:	67 94       	ror	r6
    3728:	0a 94       	dec	r0
    372a:	d2 f7       	brpl	.-12     	; 0x3720 <_fpadd_parts+0xc8>
    372c:	21 e0       	ldi	r18, 0x01	; 1
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e0       	ldi	r20, 0x00	; 0
    3732:	50 e0       	ldi	r21, 0x00	; 0
    3734:	04 c0       	rjmp	.+8      	; 0x373e <_fpadd_parts+0xe6>
    3736:	22 0f       	add	r18, r18
    3738:	33 1f       	adc	r19, r19
    373a:	44 1f       	adc	r20, r20
    373c:	55 1f       	adc	r21, r21
    373e:	6a 95       	dec	r22
    3740:	d2 f7       	brpl	.-12     	; 0x3736 <_fpadd_parts+0xde>
    3742:	21 50       	subi	r18, 0x01	; 1
    3744:	30 40       	sbci	r19, 0x00	; 0
    3746:	40 40       	sbci	r20, 0x00	; 0
    3748:	50 40       	sbci	r21, 0x00	; 0
    374a:	2e 21       	and	r18, r14
    374c:	3f 21       	and	r19, r15
    374e:	40 23       	and	r20, r16
    3750:	51 23       	and	r21, r17
    3752:	21 15       	cp	r18, r1
    3754:	31 05       	cpc	r19, r1
    3756:	41 05       	cpc	r20, r1
    3758:	51 05       	cpc	r21, r1
    375a:	21 f0       	breq	.+8      	; 0x3764 <_fpadd_parts+0x10c>
    375c:	21 e0       	ldi	r18, 0x01	; 1
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e0       	ldi	r20, 0x00	; 0
    3762:	50 e0       	ldi	r21, 0x00	; 0
    3764:	79 01       	movw	r14, r18
    3766:	8a 01       	movw	r16, r20
    3768:	e6 28       	or	r14, r6
    376a:	f7 28       	or	r15, r7
    376c:	08 29       	or	r16, r8
    376e:	19 29       	or	r17, r9
    3770:	3c c0       	rjmp	.+120    	; 0x37ea <_fpadd_parts+0x192>
    3772:	23 2b       	or	r18, r19
    3774:	d1 f1       	breq	.+116    	; 0x37ea <_fpadd_parts+0x192>
    3776:	26 0e       	add	r2, r22
    3778:	37 1e       	adc	r3, r23
    377a:	35 01       	movw	r6, r10
    377c:	46 01       	movw	r8, r12
    377e:	06 2e       	mov	r0, r22
    3780:	04 c0       	rjmp	.+8      	; 0x378a <_fpadd_parts+0x132>
    3782:	96 94       	lsr	r9
    3784:	87 94       	ror	r8
    3786:	77 94       	ror	r7
    3788:	67 94       	ror	r6
    378a:	0a 94       	dec	r0
    378c:	d2 f7       	brpl	.-12     	; 0x3782 <_fpadd_parts+0x12a>
    378e:	21 e0       	ldi	r18, 0x01	; 1
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e0       	ldi	r20, 0x00	; 0
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	04 c0       	rjmp	.+8      	; 0x37a0 <_fpadd_parts+0x148>
    3798:	22 0f       	add	r18, r18
    379a:	33 1f       	adc	r19, r19
    379c:	44 1f       	adc	r20, r20
    379e:	55 1f       	adc	r21, r21
    37a0:	6a 95       	dec	r22
    37a2:	d2 f7       	brpl	.-12     	; 0x3798 <_fpadd_parts+0x140>
    37a4:	21 50       	subi	r18, 0x01	; 1
    37a6:	30 40       	sbci	r19, 0x00	; 0
    37a8:	40 40       	sbci	r20, 0x00	; 0
    37aa:	50 40       	sbci	r21, 0x00	; 0
    37ac:	2a 21       	and	r18, r10
    37ae:	3b 21       	and	r19, r11
    37b0:	4c 21       	and	r20, r12
    37b2:	5d 21       	and	r21, r13
    37b4:	21 15       	cp	r18, r1
    37b6:	31 05       	cpc	r19, r1
    37b8:	41 05       	cpc	r20, r1
    37ba:	51 05       	cpc	r21, r1
    37bc:	21 f0       	breq	.+8      	; 0x37c6 <_fpadd_parts+0x16e>
    37be:	21 e0       	ldi	r18, 0x01	; 1
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e0       	ldi	r20, 0x00	; 0
    37c4:	50 e0       	ldi	r21, 0x00	; 0
    37c6:	59 01       	movw	r10, r18
    37c8:	6a 01       	movw	r12, r20
    37ca:	a6 28       	or	r10, r6
    37cc:	b7 28       	or	r11, r7
    37ce:	c8 28       	or	r12, r8
    37d0:	d9 28       	or	r13, r9
    37d2:	0b c0       	rjmp	.+22     	; 0x37ea <_fpadd_parts+0x192>
    37d4:	82 15       	cp	r24, r2
    37d6:	93 05       	cpc	r25, r3
    37d8:	2c f0       	brlt	.+10     	; 0x37e4 <_fpadd_parts+0x18c>
    37da:	1c 01       	movw	r2, r24
    37dc:	aa 24       	eor	r10, r10
    37de:	bb 24       	eor	r11, r11
    37e0:	65 01       	movw	r12, r10
    37e2:	03 c0       	rjmp	.+6      	; 0x37ea <_fpadd_parts+0x192>
    37e4:	ee 24       	eor	r14, r14
    37e6:	ff 24       	eor	r15, r15
    37e8:	87 01       	movw	r16, r14
    37ea:	11 96       	adiw	r26, 0x01	; 1
    37ec:	9c 91       	ld	r25, X
    37ee:	d2 01       	movw	r26, r4
    37f0:	11 96       	adiw	r26, 0x01	; 1
    37f2:	8c 91       	ld	r24, X
    37f4:	98 17       	cp	r25, r24
    37f6:	09 f4       	brne	.+2      	; 0x37fa <_fpadd_parts+0x1a2>
    37f8:	45 c0       	rjmp	.+138    	; 0x3884 <_fpadd_parts+0x22c>
    37fa:	99 23       	and	r25, r25
    37fc:	39 f0       	breq	.+14     	; 0x380c <_fpadd_parts+0x1b4>
    37fe:	a8 01       	movw	r20, r16
    3800:	97 01       	movw	r18, r14
    3802:	2a 19       	sub	r18, r10
    3804:	3b 09       	sbc	r19, r11
    3806:	4c 09       	sbc	r20, r12
    3808:	5d 09       	sbc	r21, r13
    380a:	06 c0       	rjmp	.+12     	; 0x3818 <_fpadd_parts+0x1c0>
    380c:	a6 01       	movw	r20, r12
    380e:	95 01       	movw	r18, r10
    3810:	2e 19       	sub	r18, r14
    3812:	3f 09       	sbc	r19, r15
    3814:	40 0b       	sbc	r20, r16
    3816:	51 0b       	sbc	r21, r17
    3818:	57 fd       	sbrc	r21, 7
    381a:	08 c0       	rjmp	.+16     	; 0x382c <_fpadd_parts+0x1d4>
    381c:	11 82       	std	Z+1, r1	; 0x01
    381e:	33 82       	std	Z+3, r3	; 0x03
    3820:	22 82       	std	Z+2, r2	; 0x02
    3822:	24 83       	std	Z+4, r18	; 0x04
    3824:	35 83       	std	Z+5, r19	; 0x05
    3826:	46 83       	std	Z+6, r20	; 0x06
    3828:	57 83       	std	Z+7, r21	; 0x07
    382a:	1d c0       	rjmp	.+58     	; 0x3866 <_fpadd_parts+0x20e>
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	81 83       	std	Z+1, r24	; 0x01
    3830:	33 82       	std	Z+3, r3	; 0x03
    3832:	22 82       	std	Z+2, r2	; 0x02
    3834:	88 27       	eor	r24, r24
    3836:	99 27       	eor	r25, r25
    3838:	dc 01       	movw	r26, r24
    383a:	82 1b       	sub	r24, r18
    383c:	93 0b       	sbc	r25, r19
    383e:	a4 0b       	sbc	r26, r20
    3840:	b5 0b       	sbc	r27, r21
    3842:	84 83       	std	Z+4, r24	; 0x04
    3844:	95 83       	std	Z+5, r25	; 0x05
    3846:	a6 83       	std	Z+6, r26	; 0x06
    3848:	b7 83       	std	Z+7, r27	; 0x07
    384a:	0d c0       	rjmp	.+26     	; 0x3866 <_fpadd_parts+0x20e>
    384c:	22 0f       	add	r18, r18
    384e:	33 1f       	adc	r19, r19
    3850:	44 1f       	adc	r20, r20
    3852:	55 1f       	adc	r21, r21
    3854:	24 83       	std	Z+4, r18	; 0x04
    3856:	35 83       	std	Z+5, r19	; 0x05
    3858:	46 83       	std	Z+6, r20	; 0x06
    385a:	57 83       	std	Z+7, r21	; 0x07
    385c:	82 81       	ldd	r24, Z+2	; 0x02
    385e:	93 81       	ldd	r25, Z+3	; 0x03
    3860:	01 97       	sbiw	r24, 0x01	; 1
    3862:	93 83       	std	Z+3, r25	; 0x03
    3864:	82 83       	std	Z+2, r24	; 0x02
    3866:	24 81       	ldd	r18, Z+4	; 0x04
    3868:	35 81       	ldd	r19, Z+5	; 0x05
    386a:	46 81       	ldd	r20, Z+6	; 0x06
    386c:	57 81       	ldd	r21, Z+7	; 0x07
    386e:	da 01       	movw	r26, r20
    3870:	c9 01       	movw	r24, r18
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	a1 09       	sbc	r26, r1
    3876:	b1 09       	sbc	r27, r1
    3878:	8f 5f       	subi	r24, 0xFF	; 255
    387a:	9f 4f       	sbci	r25, 0xFF	; 255
    387c:	af 4f       	sbci	r26, 0xFF	; 255
    387e:	bf 43       	sbci	r27, 0x3F	; 63
    3880:	28 f3       	brcs	.-54     	; 0x384c <_fpadd_parts+0x1f4>
    3882:	0b c0       	rjmp	.+22     	; 0x389a <_fpadd_parts+0x242>
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	33 82       	std	Z+3, r3	; 0x03
    3888:	22 82       	std	Z+2, r2	; 0x02
    388a:	ea 0c       	add	r14, r10
    388c:	fb 1c       	adc	r15, r11
    388e:	0c 1d       	adc	r16, r12
    3890:	1d 1d       	adc	r17, r13
    3892:	e4 82       	std	Z+4, r14	; 0x04
    3894:	f5 82       	std	Z+5, r15	; 0x05
    3896:	06 83       	std	Z+6, r16	; 0x06
    3898:	17 83       	std	Z+7, r17	; 0x07
    389a:	83 e0       	ldi	r24, 0x03	; 3
    389c:	80 83       	st	Z, r24
    389e:	24 81       	ldd	r18, Z+4	; 0x04
    38a0:	35 81       	ldd	r19, Z+5	; 0x05
    38a2:	46 81       	ldd	r20, Z+6	; 0x06
    38a4:	57 81       	ldd	r21, Z+7	; 0x07
    38a6:	57 ff       	sbrs	r21, 7
    38a8:	1a c0       	rjmp	.+52     	; 0x38de <_fpadd_parts+0x286>
    38aa:	c9 01       	movw	r24, r18
    38ac:	aa 27       	eor	r26, r26
    38ae:	97 fd       	sbrc	r25, 7
    38b0:	a0 95       	com	r26
    38b2:	ba 2f       	mov	r27, r26
    38b4:	81 70       	andi	r24, 0x01	; 1
    38b6:	90 70       	andi	r25, 0x00	; 0
    38b8:	a0 70       	andi	r26, 0x00	; 0
    38ba:	b0 70       	andi	r27, 0x00	; 0
    38bc:	56 95       	lsr	r21
    38be:	47 95       	ror	r20
    38c0:	37 95       	ror	r19
    38c2:	27 95       	ror	r18
    38c4:	82 2b       	or	r24, r18
    38c6:	93 2b       	or	r25, r19
    38c8:	a4 2b       	or	r26, r20
    38ca:	b5 2b       	or	r27, r21
    38cc:	84 83       	std	Z+4, r24	; 0x04
    38ce:	95 83       	std	Z+5, r25	; 0x05
    38d0:	a6 83       	std	Z+6, r26	; 0x06
    38d2:	b7 83       	std	Z+7, r27	; 0x07
    38d4:	82 81       	ldd	r24, Z+2	; 0x02
    38d6:	93 81       	ldd	r25, Z+3	; 0x03
    38d8:	01 96       	adiw	r24, 0x01	; 1
    38da:	93 83       	std	Z+3, r25	; 0x03
    38dc:	82 83       	std	Z+2, r24	; 0x02
    38de:	df 01       	movw	r26, r30
    38e0:	01 c0       	rjmp	.+2      	; 0x38e4 <_fpadd_parts+0x28c>
    38e2:	d2 01       	movw	r26, r4
    38e4:	cd 01       	movw	r24, r26
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	e2 e1       	ldi	r30, 0x12	; 18
    38ec:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__epilogue_restores__>

000038f0 <__subsf3>:
    38f0:	a0 e2       	ldi	r26, 0x20	; 32
    38f2:	b0 e0       	ldi	r27, 0x00	; 0
    38f4:	ee e7       	ldi	r30, 0x7E	; 126
    38f6:	fc e1       	ldi	r31, 0x1C	; 28
    38f8:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <__prologue_saves__+0x18>
    38fc:	69 83       	std	Y+1, r22	; 0x01
    38fe:	7a 83       	std	Y+2, r23	; 0x02
    3900:	8b 83       	std	Y+3, r24	; 0x03
    3902:	9c 83       	std	Y+4, r25	; 0x04
    3904:	2d 83       	std	Y+5, r18	; 0x05
    3906:	3e 83       	std	Y+6, r19	; 0x06
    3908:	4f 83       	std	Y+7, r20	; 0x07
    390a:	58 87       	std	Y+8, r21	; 0x08
    390c:	e9 e0       	ldi	r30, 0x09	; 9
    390e:	ee 2e       	mov	r14, r30
    3910:	f1 2c       	mov	r15, r1
    3912:	ec 0e       	add	r14, r28
    3914:	fd 1e       	adc	r15, r29
    3916:	ce 01       	movw	r24, r28
    3918:	01 96       	adiw	r24, 0x01	; 1
    391a:	b7 01       	movw	r22, r14
    391c:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3920:	8e 01       	movw	r16, r28
    3922:	0f 5e       	subi	r16, 0xEF	; 239
    3924:	1f 4f       	sbci	r17, 0xFF	; 255
    3926:	ce 01       	movw	r24, r28
    3928:	05 96       	adiw	r24, 0x05	; 5
    392a:	b8 01       	movw	r22, r16
    392c:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3930:	8a 89       	ldd	r24, Y+18	; 0x12
    3932:	91 e0       	ldi	r25, 0x01	; 1
    3934:	89 27       	eor	r24, r25
    3936:	8a 8b       	std	Y+18, r24	; 0x12
    3938:	c7 01       	movw	r24, r14
    393a:	b8 01       	movw	r22, r16
    393c:	ae 01       	movw	r20, r28
    393e:	47 5e       	subi	r20, 0xE7	; 231
    3940:	5f 4f       	sbci	r21, 0xFF	; 255
    3942:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_fpadd_parts>
    3946:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__pack_f>
    394a:	a0 96       	adiw	r28, 0x20	; 32
    394c:	e6 e0       	ldi	r30, 0x06	; 6
    394e:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__epilogue_restores__+0x18>

00003952 <__addsf3>:
    3952:	a0 e2       	ldi	r26, 0x20	; 32
    3954:	b0 e0       	ldi	r27, 0x00	; 0
    3956:	ef ea       	ldi	r30, 0xAF	; 175
    3958:	fc e1       	ldi	r31, 0x1C	; 28
    395a:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <__prologue_saves__+0x18>
    395e:	69 83       	std	Y+1, r22	; 0x01
    3960:	7a 83       	std	Y+2, r23	; 0x02
    3962:	8b 83       	std	Y+3, r24	; 0x03
    3964:	9c 83       	std	Y+4, r25	; 0x04
    3966:	2d 83       	std	Y+5, r18	; 0x05
    3968:	3e 83       	std	Y+6, r19	; 0x06
    396a:	4f 83       	std	Y+7, r20	; 0x07
    396c:	58 87       	std	Y+8, r21	; 0x08
    396e:	f9 e0       	ldi	r31, 0x09	; 9
    3970:	ef 2e       	mov	r14, r31
    3972:	f1 2c       	mov	r15, r1
    3974:	ec 0e       	add	r14, r28
    3976:	fd 1e       	adc	r15, r29
    3978:	ce 01       	movw	r24, r28
    397a:	01 96       	adiw	r24, 0x01	; 1
    397c:	b7 01       	movw	r22, r14
    397e:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3982:	8e 01       	movw	r16, r28
    3984:	0f 5e       	subi	r16, 0xEF	; 239
    3986:	1f 4f       	sbci	r17, 0xFF	; 255
    3988:	ce 01       	movw	r24, r28
    398a:	05 96       	adiw	r24, 0x05	; 5
    398c:	b8 01       	movw	r22, r16
    398e:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3992:	c7 01       	movw	r24, r14
    3994:	b8 01       	movw	r22, r16
    3996:	ae 01       	movw	r20, r28
    3998:	47 5e       	subi	r20, 0xE7	; 231
    399a:	5f 4f       	sbci	r21, 0xFF	; 255
    399c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_fpadd_parts>
    39a0:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__pack_f>
    39a4:	a0 96       	adiw	r28, 0x20	; 32
    39a6:	e6 e0       	ldi	r30, 0x06	; 6
    39a8:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__epilogue_restores__+0x18>

000039ac <__mulsf3>:
    39ac:	a0 e2       	ldi	r26, 0x20	; 32
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	ec ed       	ldi	r30, 0xDC	; 220
    39b2:	fc e1       	ldi	r31, 0x1C	; 28
    39b4:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <__prologue_saves__>
    39b8:	69 83       	std	Y+1, r22	; 0x01
    39ba:	7a 83       	std	Y+2, r23	; 0x02
    39bc:	8b 83       	std	Y+3, r24	; 0x03
    39be:	9c 83       	std	Y+4, r25	; 0x04
    39c0:	2d 83       	std	Y+5, r18	; 0x05
    39c2:	3e 83       	std	Y+6, r19	; 0x06
    39c4:	4f 83       	std	Y+7, r20	; 0x07
    39c6:	58 87       	std	Y+8, r21	; 0x08
    39c8:	ce 01       	movw	r24, r28
    39ca:	01 96       	adiw	r24, 0x01	; 1
    39cc:	be 01       	movw	r22, r28
    39ce:	67 5f       	subi	r22, 0xF7	; 247
    39d0:	7f 4f       	sbci	r23, 0xFF	; 255
    39d2:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    39d6:	ce 01       	movw	r24, r28
    39d8:	05 96       	adiw	r24, 0x05	; 5
    39da:	be 01       	movw	r22, r28
    39dc:	6f 5e       	subi	r22, 0xEF	; 239
    39de:	7f 4f       	sbci	r23, 0xFF	; 255
    39e0:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    39e4:	99 85       	ldd	r25, Y+9	; 0x09
    39e6:	92 30       	cpi	r25, 0x02	; 2
    39e8:	88 f0       	brcs	.+34     	; 0x3a0c <__mulsf3+0x60>
    39ea:	89 89       	ldd	r24, Y+17	; 0x11
    39ec:	82 30       	cpi	r24, 0x02	; 2
    39ee:	c8 f0       	brcs	.+50     	; 0x3a22 <__mulsf3+0x76>
    39f0:	94 30       	cpi	r25, 0x04	; 4
    39f2:	19 f4       	brne	.+6      	; 0x39fa <__mulsf3+0x4e>
    39f4:	82 30       	cpi	r24, 0x02	; 2
    39f6:	51 f4       	brne	.+20     	; 0x3a0c <__mulsf3+0x60>
    39f8:	04 c0       	rjmp	.+8      	; 0x3a02 <__mulsf3+0x56>
    39fa:	84 30       	cpi	r24, 0x04	; 4
    39fc:	29 f4       	brne	.+10     	; 0x3a08 <__mulsf3+0x5c>
    39fe:	92 30       	cpi	r25, 0x02	; 2
    3a00:	81 f4       	brne	.+32     	; 0x3a22 <__mulsf3+0x76>
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	92 e0       	ldi	r25, 0x02	; 2
    3a06:	c6 c0       	rjmp	.+396    	; 0x3b94 <__mulsf3+0x1e8>
    3a08:	92 30       	cpi	r25, 0x02	; 2
    3a0a:	49 f4       	brne	.+18     	; 0x3a1e <__mulsf3+0x72>
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a10:	8a 89       	ldd	r24, Y+18	; 0x12
    3a12:	98 13       	cpse	r25, r24
    3a14:	21 e0       	ldi	r18, 0x01	; 1
    3a16:	2a 87       	std	Y+10, r18	; 0x0a
    3a18:	ce 01       	movw	r24, r28
    3a1a:	09 96       	adiw	r24, 0x09	; 9
    3a1c:	bb c0       	rjmp	.+374    	; 0x3b94 <__mulsf3+0x1e8>
    3a1e:	82 30       	cpi	r24, 0x02	; 2
    3a20:	49 f4       	brne	.+18     	; 0x3a34 <__mulsf3+0x88>
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a26:	8a 89       	ldd	r24, Y+18	; 0x12
    3a28:	98 13       	cpse	r25, r24
    3a2a:	21 e0       	ldi	r18, 0x01	; 1
    3a2c:	2a 8b       	std	Y+18, r18	; 0x12
    3a2e:	ce 01       	movw	r24, r28
    3a30:	41 96       	adiw	r24, 0x11	; 17
    3a32:	b0 c0       	rjmp	.+352    	; 0x3b94 <__mulsf3+0x1e8>
    3a34:	2d 84       	ldd	r2, Y+13	; 0x0d
    3a36:	3e 84       	ldd	r3, Y+14	; 0x0e
    3a38:	4f 84       	ldd	r4, Y+15	; 0x0f
    3a3a:	58 88       	ldd	r5, Y+16	; 0x10
    3a3c:	6d 88       	ldd	r6, Y+21	; 0x15
    3a3e:	7e 88       	ldd	r7, Y+22	; 0x16
    3a40:	8f 88       	ldd	r8, Y+23	; 0x17
    3a42:	98 8c       	ldd	r9, Y+24	; 0x18
    3a44:	ee 24       	eor	r14, r14
    3a46:	ff 24       	eor	r15, r15
    3a48:	87 01       	movw	r16, r14
    3a4a:	aa 24       	eor	r10, r10
    3a4c:	bb 24       	eor	r11, r11
    3a4e:	65 01       	movw	r12, r10
    3a50:	40 e0       	ldi	r20, 0x00	; 0
    3a52:	50 e0       	ldi	r21, 0x00	; 0
    3a54:	60 e0       	ldi	r22, 0x00	; 0
    3a56:	70 e0       	ldi	r23, 0x00	; 0
    3a58:	e0 e0       	ldi	r30, 0x00	; 0
    3a5a:	f0 e0       	ldi	r31, 0x00	; 0
    3a5c:	c1 01       	movw	r24, r2
    3a5e:	81 70       	andi	r24, 0x01	; 1
    3a60:	90 70       	andi	r25, 0x00	; 0
    3a62:	89 2b       	or	r24, r25
    3a64:	e9 f0       	breq	.+58     	; 0x3aa0 <__mulsf3+0xf4>
    3a66:	e6 0c       	add	r14, r6
    3a68:	f7 1c       	adc	r15, r7
    3a6a:	08 1d       	adc	r16, r8
    3a6c:	19 1d       	adc	r17, r9
    3a6e:	9a 01       	movw	r18, r20
    3a70:	ab 01       	movw	r20, r22
    3a72:	2a 0d       	add	r18, r10
    3a74:	3b 1d       	adc	r19, r11
    3a76:	4c 1d       	adc	r20, r12
    3a78:	5d 1d       	adc	r21, r13
    3a7a:	80 e0       	ldi	r24, 0x00	; 0
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	a0 e0       	ldi	r26, 0x00	; 0
    3a80:	b0 e0       	ldi	r27, 0x00	; 0
    3a82:	e6 14       	cp	r14, r6
    3a84:	f7 04       	cpc	r15, r7
    3a86:	08 05       	cpc	r16, r8
    3a88:	19 05       	cpc	r17, r9
    3a8a:	20 f4       	brcc	.+8      	; 0x3a94 <__mulsf3+0xe8>
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	a0 e0       	ldi	r26, 0x00	; 0
    3a92:	b0 e0       	ldi	r27, 0x00	; 0
    3a94:	ba 01       	movw	r22, r20
    3a96:	a9 01       	movw	r20, r18
    3a98:	48 0f       	add	r20, r24
    3a9a:	59 1f       	adc	r21, r25
    3a9c:	6a 1f       	adc	r22, r26
    3a9e:	7b 1f       	adc	r23, r27
    3aa0:	aa 0c       	add	r10, r10
    3aa2:	bb 1c       	adc	r11, r11
    3aa4:	cc 1c       	adc	r12, r12
    3aa6:	dd 1c       	adc	r13, r13
    3aa8:	97 fe       	sbrs	r9, 7
    3aaa:	08 c0       	rjmp	.+16     	; 0x3abc <__mulsf3+0x110>
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	a0 e0       	ldi	r26, 0x00	; 0
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	a8 2a       	or	r10, r24
    3ab6:	b9 2a       	or	r11, r25
    3ab8:	ca 2a       	or	r12, r26
    3aba:	db 2a       	or	r13, r27
    3abc:	31 96       	adiw	r30, 0x01	; 1
    3abe:	e0 32       	cpi	r30, 0x20	; 32
    3ac0:	f1 05       	cpc	r31, r1
    3ac2:	49 f0       	breq	.+18     	; 0x3ad6 <__mulsf3+0x12a>
    3ac4:	66 0c       	add	r6, r6
    3ac6:	77 1c       	adc	r7, r7
    3ac8:	88 1c       	adc	r8, r8
    3aca:	99 1c       	adc	r9, r9
    3acc:	56 94       	lsr	r5
    3ace:	47 94       	ror	r4
    3ad0:	37 94       	ror	r3
    3ad2:	27 94       	ror	r2
    3ad4:	c3 cf       	rjmp	.-122    	; 0x3a5c <__mulsf3+0xb0>
    3ad6:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ad8:	ea 89       	ldd	r30, Y+18	; 0x12
    3ada:	2b 89       	ldd	r18, Y+19	; 0x13
    3adc:	3c 89       	ldd	r19, Y+20	; 0x14
    3ade:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ae0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ae2:	28 0f       	add	r18, r24
    3ae4:	39 1f       	adc	r19, r25
    3ae6:	2e 5f       	subi	r18, 0xFE	; 254
    3ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aea:	17 c0       	rjmp	.+46     	; 0x3b1a <__mulsf3+0x16e>
    3aec:	ca 01       	movw	r24, r20
    3aee:	81 70       	andi	r24, 0x01	; 1
    3af0:	90 70       	andi	r25, 0x00	; 0
    3af2:	89 2b       	or	r24, r25
    3af4:	61 f0       	breq	.+24     	; 0x3b0e <__mulsf3+0x162>
    3af6:	16 95       	lsr	r17
    3af8:	07 95       	ror	r16
    3afa:	f7 94       	ror	r15
    3afc:	e7 94       	ror	r14
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	a0 e0       	ldi	r26, 0x00	; 0
    3b04:	b0 e8       	ldi	r27, 0x80	; 128
    3b06:	e8 2a       	or	r14, r24
    3b08:	f9 2a       	or	r15, r25
    3b0a:	0a 2b       	or	r16, r26
    3b0c:	1b 2b       	or	r17, r27
    3b0e:	76 95       	lsr	r23
    3b10:	67 95       	ror	r22
    3b12:	57 95       	ror	r21
    3b14:	47 95       	ror	r20
    3b16:	2f 5f       	subi	r18, 0xFF	; 255
    3b18:	3f 4f       	sbci	r19, 0xFF	; 255
    3b1a:	77 fd       	sbrc	r23, 7
    3b1c:	e7 cf       	rjmp	.-50     	; 0x3aec <__mulsf3+0x140>
    3b1e:	0c c0       	rjmp	.+24     	; 0x3b38 <__mulsf3+0x18c>
    3b20:	44 0f       	add	r20, r20
    3b22:	55 1f       	adc	r21, r21
    3b24:	66 1f       	adc	r22, r22
    3b26:	77 1f       	adc	r23, r23
    3b28:	17 fd       	sbrc	r17, 7
    3b2a:	41 60       	ori	r20, 0x01	; 1
    3b2c:	ee 0c       	add	r14, r14
    3b2e:	ff 1c       	adc	r15, r15
    3b30:	00 1f       	adc	r16, r16
    3b32:	11 1f       	adc	r17, r17
    3b34:	21 50       	subi	r18, 0x01	; 1
    3b36:	30 40       	sbci	r19, 0x00	; 0
    3b38:	40 30       	cpi	r20, 0x00	; 0
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	59 07       	cpc	r21, r25
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	69 07       	cpc	r22, r25
    3b42:	90 e4       	ldi	r25, 0x40	; 64
    3b44:	79 07       	cpc	r23, r25
    3b46:	60 f3       	brcs	.-40     	; 0x3b20 <__mulsf3+0x174>
    3b48:	2b 8f       	std	Y+27, r18	; 0x1b
    3b4a:	3c 8f       	std	Y+28, r19	; 0x1c
    3b4c:	db 01       	movw	r26, r22
    3b4e:	ca 01       	movw	r24, r20
    3b50:	8f 77       	andi	r24, 0x7F	; 127
    3b52:	90 70       	andi	r25, 0x00	; 0
    3b54:	a0 70       	andi	r26, 0x00	; 0
    3b56:	b0 70       	andi	r27, 0x00	; 0
    3b58:	80 34       	cpi	r24, 0x40	; 64
    3b5a:	91 05       	cpc	r25, r1
    3b5c:	a1 05       	cpc	r26, r1
    3b5e:	b1 05       	cpc	r27, r1
    3b60:	61 f4       	brne	.+24     	; 0x3b7a <__mulsf3+0x1ce>
    3b62:	47 fd       	sbrc	r20, 7
    3b64:	0a c0       	rjmp	.+20     	; 0x3b7a <__mulsf3+0x1ce>
    3b66:	e1 14       	cp	r14, r1
    3b68:	f1 04       	cpc	r15, r1
    3b6a:	01 05       	cpc	r16, r1
    3b6c:	11 05       	cpc	r17, r1
    3b6e:	29 f0       	breq	.+10     	; 0x3b7a <__mulsf3+0x1ce>
    3b70:	40 5c       	subi	r20, 0xC0	; 192
    3b72:	5f 4f       	sbci	r21, 0xFF	; 255
    3b74:	6f 4f       	sbci	r22, 0xFF	; 255
    3b76:	7f 4f       	sbci	r23, 0xFF	; 255
    3b78:	40 78       	andi	r20, 0x80	; 128
    3b7a:	1a 8e       	std	Y+26, r1	; 0x1a
    3b7c:	fe 17       	cp	r31, r30
    3b7e:	11 f0       	breq	.+4      	; 0x3b84 <__mulsf3+0x1d8>
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	8a 8f       	std	Y+26, r24	; 0x1a
    3b84:	4d 8f       	std	Y+29, r20	; 0x1d
    3b86:	5e 8f       	std	Y+30, r21	; 0x1e
    3b88:	6f 8f       	std	Y+31, r22	; 0x1f
    3b8a:	78 a3       	std	Y+32, r23	; 0x20
    3b8c:	83 e0       	ldi	r24, 0x03	; 3
    3b8e:	89 8f       	std	Y+25, r24	; 0x19
    3b90:	ce 01       	movw	r24, r28
    3b92:	49 96       	adiw	r24, 0x19	; 25
    3b94:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__pack_f>
    3b98:	a0 96       	adiw	r28, 0x20	; 32
    3b9a:	e2 e1       	ldi	r30, 0x12	; 18
    3b9c:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <__epilogue_restores__>

00003ba0 <__gtsf2>:
    3ba0:	a8 e1       	ldi	r26, 0x18	; 24
    3ba2:	b0 e0       	ldi	r27, 0x00	; 0
    3ba4:	e6 ed       	ldi	r30, 0xD6	; 214
    3ba6:	fd e1       	ldi	r31, 0x1D	; 29
    3ba8:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <__prologue_saves__+0x18>
    3bac:	69 83       	std	Y+1, r22	; 0x01
    3bae:	7a 83       	std	Y+2, r23	; 0x02
    3bb0:	8b 83       	std	Y+3, r24	; 0x03
    3bb2:	9c 83       	std	Y+4, r25	; 0x04
    3bb4:	2d 83       	std	Y+5, r18	; 0x05
    3bb6:	3e 83       	std	Y+6, r19	; 0x06
    3bb8:	4f 83       	std	Y+7, r20	; 0x07
    3bba:	58 87       	std	Y+8, r21	; 0x08
    3bbc:	89 e0       	ldi	r24, 0x09	; 9
    3bbe:	e8 2e       	mov	r14, r24
    3bc0:	f1 2c       	mov	r15, r1
    3bc2:	ec 0e       	add	r14, r28
    3bc4:	fd 1e       	adc	r15, r29
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	01 96       	adiw	r24, 0x01	; 1
    3bca:	b7 01       	movw	r22, r14
    3bcc:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3bd0:	8e 01       	movw	r16, r28
    3bd2:	0f 5e       	subi	r16, 0xEF	; 239
    3bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	05 96       	adiw	r24, 0x05	; 5
    3bda:	b8 01       	movw	r22, r16
    3bdc:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3be0:	89 85       	ldd	r24, Y+9	; 0x09
    3be2:	82 30       	cpi	r24, 0x02	; 2
    3be4:	40 f0       	brcs	.+16     	; 0x3bf6 <__gtsf2+0x56>
    3be6:	89 89       	ldd	r24, Y+17	; 0x11
    3be8:	82 30       	cpi	r24, 0x02	; 2
    3bea:	28 f0       	brcs	.+10     	; 0x3bf6 <__gtsf2+0x56>
    3bec:	c7 01       	movw	r24, r14
    3bee:	b8 01       	movw	r22, r16
    3bf0:	0e 94 01 20 	call	0x4002	; 0x4002 <__fpcmp_parts_f>
    3bf4:	01 c0       	rjmp	.+2      	; 0x3bf8 <__gtsf2+0x58>
    3bf6:	8f ef       	ldi	r24, 0xFF	; 255
    3bf8:	68 96       	adiw	r28, 0x18	; 24
    3bfa:	e6 e0       	ldi	r30, 0x06	; 6
    3bfc:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__epilogue_restores__+0x18>

00003c00 <__gesf2>:
    3c00:	a8 e1       	ldi	r26, 0x18	; 24
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	e6 e0       	ldi	r30, 0x06	; 6
    3c06:	fe e1       	ldi	r31, 0x1E	; 30
    3c08:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <__prologue_saves__+0x18>
    3c0c:	69 83       	std	Y+1, r22	; 0x01
    3c0e:	7a 83       	std	Y+2, r23	; 0x02
    3c10:	8b 83       	std	Y+3, r24	; 0x03
    3c12:	9c 83       	std	Y+4, r25	; 0x04
    3c14:	2d 83       	std	Y+5, r18	; 0x05
    3c16:	3e 83       	std	Y+6, r19	; 0x06
    3c18:	4f 83       	std	Y+7, r20	; 0x07
    3c1a:	58 87       	std	Y+8, r21	; 0x08
    3c1c:	89 e0       	ldi	r24, 0x09	; 9
    3c1e:	e8 2e       	mov	r14, r24
    3c20:	f1 2c       	mov	r15, r1
    3c22:	ec 0e       	add	r14, r28
    3c24:	fd 1e       	adc	r15, r29
    3c26:	ce 01       	movw	r24, r28
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	b7 01       	movw	r22, r14
    3c2c:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3c30:	8e 01       	movw	r16, r28
    3c32:	0f 5e       	subi	r16, 0xEF	; 239
    3c34:	1f 4f       	sbci	r17, 0xFF	; 255
    3c36:	ce 01       	movw	r24, r28
    3c38:	05 96       	adiw	r24, 0x05	; 5
    3c3a:	b8 01       	movw	r22, r16
    3c3c:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3c40:	89 85       	ldd	r24, Y+9	; 0x09
    3c42:	82 30       	cpi	r24, 0x02	; 2
    3c44:	40 f0       	brcs	.+16     	; 0x3c56 <__gesf2+0x56>
    3c46:	89 89       	ldd	r24, Y+17	; 0x11
    3c48:	82 30       	cpi	r24, 0x02	; 2
    3c4a:	28 f0       	brcs	.+10     	; 0x3c56 <__gesf2+0x56>
    3c4c:	c7 01       	movw	r24, r14
    3c4e:	b8 01       	movw	r22, r16
    3c50:	0e 94 01 20 	call	0x4002	; 0x4002 <__fpcmp_parts_f>
    3c54:	01 c0       	rjmp	.+2      	; 0x3c58 <__gesf2+0x58>
    3c56:	8f ef       	ldi	r24, 0xFF	; 255
    3c58:	68 96       	adiw	r28, 0x18	; 24
    3c5a:	e6 e0       	ldi	r30, 0x06	; 6
    3c5c:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__epilogue_restores__+0x18>

00003c60 <__ltsf2>:
    3c60:	a8 e1       	ldi	r26, 0x18	; 24
    3c62:	b0 e0       	ldi	r27, 0x00	; 0
    3c64:	e6 e3       	ldi	r30, 0x36	; 54
    3c66:	fe e1       	ldi	r31, 0x1E	; 30
    3c68:	0c 94 66 20 	jmp	0x40cc	; 0x40cc <__prologue_saves__+0x18>
    3c6c:	69 83       	std	Y+1, r22	; 0x01
    3c6e:	7a 83       	std	Y+2, r23	; 0x02
    3c70:	8b 83       	std	Y+3, r24	; 0x03
    3c72:	9c 83       	std	Y+4, r25	; 0x04
    3c74:	2d 83       	std	Y+5, r18	; 0x05
    3c76:	3e 83       	std	Y+6, r19	; 0x06
    3c78:	4f 83       	std	Y+7, r20	; 0x07
    3c7a:	58 87       	std	Y+8, r21	; 0x08
    3c7c:	89 e0       	ldi	r24, 0x09	; 9
    3c7e:	e8 2e       	mov	r14, r24
    3c80:	f1 2c       	mov	r15, r1
    3c82:	ec 0e       	add	r14, r28
    3c84:	fd 1e       	adc	r15, r29
    3c86:	ce 01       	movw	r24, r28
    3c88:	01 96       	adiw	r24, 0x01	; 1
    3c8a:	b7 01       	movw	r22, r14
    3c8c:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3c90:	8e 01       	movw	r16, r28
    3c92:	0f 5e       	subi	r16, 0xEF	; 239
    3c94:	1f 4f       	sbci	r17, 0xFF	; 255
    3c96:	ce 01       	movw	r24, r28
    3c98:	05 96       	adiw	r24, 0x05	; 5
    3c9a:	b8 01       	movw	r22, r16
    3c9c:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3ca0:	89 85       	ldd	r24, Y+9	; 0x09
    3ca2:	82 30       	cpi	r24, 0x02	; 2
    3ca4:	40 f0       	brcs	.+16     	; 0x3cb6 <__ltsf2+0x56>
    3ca6:	89 89       	ldd	r24, Y+17	; 0x11
    3ca8:	82 30       	cpi	r24, 0x02	; 2
    3caa:	28 f0       	brcs	.+10     	; 0x3cb6 <__ltsf2+0x56>
    3cac:	c7 01       	movw	r24, r14
    3cae:	b8 01       	movw	r22, r16
    3cb0:	0e 94 01 20 	call	0x4002	; 0x4002 <__fpcmp_parts_f>
    3cb4:	01 c0       	rjmp	.+2      	; 0x3cb8 <__ltsf2+0x58>
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	68 96       	adiw	r28, 0x18	; 24
    3cba:	e6 e0       	ldi	r30, 0x06	; 6
    3cbc:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__epilogue_restores__+0x18>

00003cc0 <__fixsfsi>:
    3cc0:	ac e0       	ldi	r26, 0x0C	; 12
    3cc2:	b0 e0       	ldi	r27, 0x00	; 0
    3cc4:	e6 e6       	ldi	r30, 0x66	; 102
    3cc6:	fe e1       	ldi	r31, 0x1E	; 30
    3cc8:	0c 94 6a 20 	jmp	0x40d4	; 0x40d4 <__prologue_saves__+0x20>
    3ccc:	69 83       	std	Y+1, r22	; 0x01
    3cce:	7a 83       	std	Y+2, r23	; 0x02
    3cd0:	8b 83       	std	Y+3, r24	; 0x03
    3cd2:	9c 83       	std	Y+4, r25	; 0x04
    3cd4:	ce 01       	movw	r24, r28
    3cd6:	01 96       	adiw	r24, 0x01	; 1
    3cd8:	be 01       	movw	r22, r28
    3cda:	6b 5f       	subi	r22, 0xFB	; 251
    3cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cde:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__unpack_f>
    3ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce4:	82 30       	cpi	r24, 0x02	; 2
    3ce6:	61 f1       	breq	.+88     	; 0x3d40 <__fixsfsi+0x80>
    3ce8:	82 30       	cpi	r24, 0x02	; 2
    3cea:	50 f1       	brcs	.+84     	; 0x3d40 <__fixsfsi+0x80>
    3cec:	84 30       	cpi	r24, 0x04	; 4
    3cee:	21 f4       	brne	.+8      	; 0x3cf8 <__fixsfsi+0x38>
    3cf0:	8e 81       	ldd	r24, Y+6	; 0x06
    3cf2:	88 23       	and	r24, r24
    3cf4:	51 f1       	breq	.+84     	; 0x3d4a <__fixsfsi+0x8a>
    3cf6:	2e c0       	rjmp	.+92     	; 0x3d54 <__fixsfsi+0x94>
    3cf8:	2f 81       	ldd	r18, Y+7	; 0x07
    3cfa:	38 85       	ldd	r19, Y+8	; 0x08
    3cfc:	37 fd       	sbrc	r19, 7
    3cfe:	20 c0       	rjmp	.+64     	; 0x3d40 <__fixsfsi+0x80>
    3d00:	6e 81       	ldd	r22, Y+6	; 0x06
    3d02:	2f 31       	cpi	r18, 0x1F	; 31
    3d04:	31 05       	cpc	r19, r1
    3d06:	1c f0       	brlt	.+6      	; 0x3d0e <__fixsfsi+0x4e>
    3d08:	66 23       	and	r22, r22
    3d0a:	f9 f0       	breq	.+62     	; 0x3d4a <__fixsfsi+0x8a>
    3d0c:	23 c0       	rjmp	.+70     	; 0x3d54 <__fixsfsi+0x94>
    3d0e:	8e e1       	ldi	r24, 0x1E	; 30
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	82 1b       	sub	r24, r18
    3d14:	93 0b       	sbc	r25, r19
    3d16:	29 85       	ldd	r18, Y+9	; 0x09
    3d18:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d1a:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d1c:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d1e:	04 c0       	rjmp	.+8      	; 0x3d28 <__fixsfsi+0x68>
    3d20:	56 95       	lsr	r21
    3d22:	47 95       	ror	r20
    3d24:	37 95       	ror	r19
    3d26:	27 95       	ror	r18
    3d28:	8a 95       	dec	r24
    3d2a:	d2 f7       	brpl	.-12     	; 0x3d20 <__fixsfsi+0x60>
    3d2c:	66 23       	and	r22, r22
    3d2e:	b1 f0       	breq	.+44     	; 0x3d5c <__fixsfsi+0x9c>
    3d30:	50 95       	com	r21
    3d32:	40 95       	com	r20
    3d34:	30 95       	com	r19
    3d36:	21 95       	neg	r18
    3d38:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3a:	4f 4f       	sbci	r20, 0xFF	; 255
    3d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d3e:	0e c0       	rjmp	.+28     	; 0x3d5c <__fixsfsi+0x9c>
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e0       	ldi	r20, 0x00	; 0
    3d46:	50 e0       	ldi	r21, 0x00	; 0
    3d48:	09 c0       	rjmp	.+18     	; 0x3d5c <__fixsfsi+0x9c>
    3d4a:	2f ef       	ldi	r18, 0xFF	; 255
    3d4c:	3f ef       	ldi	r19, 0xFF	; 255
    3d4e:	4f ef       	ldi	r20, 0xFF	; 255
    3d50:	5f e7       	ldi	r21, 0x7F	; 127
    3d52:	04 c0       	rjmp	.+8      	; 0x3d5c <__fixsfsi+0x9c>
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e0       	ldi	r20, 0x00	; 0
    3d5a:	50 e8       	ldi	r21, 0x80	; 128
    3d5c:	b9 01       	movw	r22, r18
    3d5e:	ca 01       	movw	r24, r20
    3d60:	2c 96       	adiw	r28, 0x0c	; 12
    3d62:	e2 e0       	ldi	r30, 0x02	; 2
    3d64:	0c 94 86 20 	jmp	0x410c	; 0x410c <__epilogue_restores__+0x20>

00003d68 <__pack_f>:
    3d68:	df 92       	push	r13
    3d6a:	ef 92       	push	r14
    3d6c:	ff 92       	push	r15
    3d6e:	0f 93       	push	r16
    3d70:	1f 93       	push	r17
    3d72:	fc 01       	movw	r30, r24
    3d74:	e4 80       	ldd	r14, Z+4	; 0x04
    3d76:	f5 80       	ldd	r15, Z+5	; 0x05
    3d78:	06 81       	ldd	r16, Z+6	; 0x06
    3d7a:	17 81       	ldd	r17, Z+7	; 0x07
    3d7c:	d1 80       	ldd	r13, Z+1	; 0x01
    3d7e:	80 81       	ld	r24, Z
    3d80:	82 30       	cpi	r24, 0x02	; 2
    3d82:	48 f4       	brcc	.+18     	; 0x3d96 <__pack_f+0x2e>
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	a0 e1       	ldi	r26, 0x10	; 16
    3d8a:	b0 e0       	ldi	r27, 0x00	; 0
    3d8c:	e8 2a       	or	r14, r24
    3d8e:	f9 2a       	or	r15, r25
    3d90:	0a 2b       	or	r16, r26
    3d92:	1b 2b       	or	r17, r27
    3d94:	a5 c0       	rjmp	.+330    	; 0x3ee0 <__pack_f+0x178>
    3d96:	84 30       	cpi	r24, 0x04	; 4
    3d98:	09 f4       	brne	.+2      	; 0x3d9c <__pack_f+0x34>
    3d9a:	9f c0       	rjmp	.+318    	; 0x3eda <__pack_f+0x172>
    3d9c:	82 30       	cpi	r24, 0x02	; 2
    3d9e:	21 f4       	brne	.+8      	; 0x3da8 <__pack_f+0x40>
    3da0:	ee 24       	eor	r14, r14
    3da2:	ff 24       	eor	r15, r15
    3da4:	87 01       	movw	r16, r14
    3da6:	05 c0       	rjmp	.+10     	; 0x3db2 <__pack_f+0x4a>
    3da8:	e1 14       	cp	r14, r1
    3daa:	f1 04       	cpc	r15, r1
    3dac:	01 05       	cpc	r16, r1
    3dae:	11 05       	cpc	r17, r1
    3db0:	19 f4       	brne	.+6      	; 0x3db8 <__pack_f+0x50>
    3db2:	e0 e0       	ldi	r30, 0x00	; 0
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	96 c0       	rjmp	.+300    	; 0x3ee4 <__pack_f+0x17c>
    3db8:	62 81       	ldd	r22, Z+2	; 0x02
    3dba:	73 81       	ldd	r23, Z+3	; 0x03
    3dbc:	9f ef       	ldi	r25, 0xFF	; 255
    3dbe:	62 38       	cpi	r22, 0x82	; 130
    3dc0:	79 07       	cpc	r23, r25
    3dc2:	0c f0       	brlt	.+2      	; 0x3dc6 <__pack_f+0x5e>
    3dc4:	5b c0       	rjmp	.+182    	; 0x3e7c <__pack_f+0x114>
    3dc6:	22 e8       	ldi	r18, 0x82	; 130
    3dc8:	3f ef       	ldi	r19, 0xFF	; 255
    3dca:	26 1b       	sub	r18, r22
    3dcc:	37 0b       	sbc	r19, r23
    3dce:	2a 31       	cpi	r18, 0x1A	; 26
    3dd0:	31 05       	cpc	r19, r1
    3dd2:	2c f0       	brlt	.+10     	; 0x3dde <__pack_f+0x76>
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e0       	ldi	r20, 0x00	; 0
    3dda:	50 e0       	ldi	r21, 0x00	; 0
    3ddc:	2a c0       	rjmp	.+84     	; 0x3e32 <__pack_f+0xca>
    3dde:	b8 01       	movw	r22, r16
    3de0:	a7 01       	movw	r20, r14
    3de2:	02 2e       	mov	r0, r18
    3de4:	04 c0       	rjmp	.+8      	; 0x3dee <__pack_f+0x86>
    3de6:	76 95       	lsr	r23
    3de8:	67 95       	ror	r22
    3dea:	57 95       	ror	r21
    3dec:	47 95       	ror	r20
    3dee:	0a 94       	dec	r0
    3df0:	d2 f7       	brpl	.-12     	; 0x3de6 <__pack_f+0x7e>
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	a0 e0       	ldi	r26, 0x00	; 0
    3df8:	b0 e0       	ldi	r27, 0x00	; 0
    3dfa:	04 c0       	rjmp	.+8      	; 0x3e04 <__pack_f+0x9c>
    3dfc:	88 0f       	add	r24, r24
    3dfe:	99 1f       	adc	r25, r25
    3e00:	aa 1f       	adc	r26, r26
    3e02:	bb 1f       	adc	r27, r27
    3e04:	2a 95       	dec	r18
    3e06:	d2 f7       	brpl	.-12     	; 0x3dfc <__pack_f+0x94>
    3e08:	01 97       	sbiw	r24, 0x01	; 1
    3e0a:	a1 09       	sbc	r26, r1
    3e0c:	b1 09       	sbc	r27, r1
    3e0e:	8e 21       	and	r24, r14
    3e10:	9f 21       	and	r25, r15
    3e12:	a0 23       	and	r26, r16
    3e14:	b1 23       	and	r27, r17
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	a1 05       	cpc	r26, r1
    3e1a:	b1 05       	cpc	r27, r1
    3e1c:	21 f0       	breq	.+8      	; 0x3e26 <__pack_f+0xbe>
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	a0 e0       	ldi	r26, 0x00	; 0
    3e24:	b0 e0       	ldi	r27, 0x00	; 0
    3e26:	9a 01       	movw	r18, r20
    3e28:	ab 01       	movw	r20, r22
    3e2a:	28 2b       	or	r18, r24
    3e2c:	39 2b       	or	r19, r25
    3e2e:	4a 2b       	or	r20, r26
    3e30:	5b 2b       	or	r21, r27
    3e32:	da 01       	movw	r26, r20
    3e34:	c9 01       	movw	r24, r18
    3e36:	8f 77       	andi	r24, 0x7F	; 127
    3e38:	90 70       	andi	r25, 0x00	; 0
    3e3a:	a0 70       	andi	r26, 0x00	; 0
    3e3c:	b0 70       	andi	r27, 0x00	; 0
    3e3e:	80 34       	cpi	r24, 0x40	; 64
    3e40:	91 05       	cpc	r25, r1
    3e42:	a1 05       	cpc	r26, r1
    3e44:	b1 05       	cpc	r27, r1
    3e46:	39 f4       	brne	.+14     	; 0x3e56 <__pack_f+0xee>
    3e48:	27 ff       	sbrs	r18, 7
    3e4a:	09 c0       	rjmp	.+18     	; 0x3e5e <__pack_f+0xf6>
    3e4c:	20 5c       	subi	r18, 0xC0	; 192
    3e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e50:	4f 4f       	sbci	r20, 0xFF	; 255
    3e52:	5f 4f       	sbci	r21, 0xFF	; 255
    3e54:	04 c0       	rjmp	.+8      	; 0x3e5e <__pack_f+0xf6>
    3e56:	21 5c       	subi	r18, 0xC1	; 193
    3e58:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5a:	4f 4f       	sbci	r20, 0xFF	; 255
    3e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e5e:	e0 e0       	ldi	r30, 0x00	; 0
    3e60:	f0 e0       	ldi	r31, 0x00	; 0
    3e62:	20 30       	cpi	r18, 0x00	; 0
    3e64:	a0 e0       	ldi	r26, 0x00	; 0
    3e66:	3a 07       	cpc	r19, r26
    3e68:	a0 e0       	ldi	r26, 0x00	; 0
    3e6a:	4a 07       	cpc	r20, r26
    3e6c:	a0 e4       	ldi	r26, 0x40	; 64
    3e6e:	5a 07       	cpc	r21, r26
    3e70:	10 f0       	brcs	.+4      	; 0x3e76 <__pack_f+0x10e>
    3e72:	e1 e0       	ldi	r30, 0x01	; 1
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	79 01       	movw	r14, r18
    3e78:	8a 01       	movw	r16, r20
    3e7a:	27 c0       	rjmp	.+78     	; 0x3eca <__pack_f+0x162>
    3e7c:	60 38       	cpi	r22, 0x80	; 128
    3e7e:	71 05       	cpc	r23, r1
    3e80:	64 f5       	brge	.+88     	; 0x3eda <__pack_f+0x172>
    3e82:	fb 01       	movw	r30, r22
    3e84:	e1 58       	subi	r30, 0x81	; 129
    3e86:	ff 4f       	sbci	r31, 0xFF	; 255
    3e88:	d8 01       	movw	r26, r16
    3e8a:	c7 01       	movw	r24, r14
    3e8c:	8f 77       	andi	r24, 0x7F	; 127
    3e8e:	90 70       	andi	r25, 0x00	; 0
    3e90:	a0 70       	andi	r26, 0x00	; 0
    3e92:	b0 70       	andi	r27, 0x00	; 0
    3e94:	80 34       	cpi	r24, 0x40	; 64
    3e96:	91 05       	cpc	r25, r1
    3e98:	a1 05       	cpc	r26, r1
    3e9a:	b1 05       	cpc	r27, r1
    3e9c:	39 f4       	brne	.+14     	; 0x3eac <__pack_f+0x144>
    3e9e:	e7 fe       	sbrs	r14, 7
    3ea0:	0d c0       	rjmp	.+26     	; 0x3ebc <__pack_f+0x154>
    3ea2:	80 e4       	ldi	r24, 0x40	; 64
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	a0 e0       	ldi	r26, 0x00	; 0
    3ea8:	b0 e0       	ldi	r27, 0x00	; 0
    3eaa:	04 c0       	rjmp	.+8      	; 0x3eb4 <__pack_f+0x14c>
    3eac:	8f e3       	ldi	r24, 0x3F	; 63
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	a0 e0       	ldi	r26, 0x00	; 0
    3eb2:	b0 e0       	ldi	r27, 0x00	; 0
    3eb4:	e8 0e       	add	r14, r24
    3eb6:	f9 1e       	adc	r15, r25
    3eb8:	0a 1f       	adc	r16, r26
    3eba:	1b 1f       	adc	r17, r27
    3ebc:	17 ff       	sbrs	r17, 7
    3ebe:	05 c0       	rjmp	.+10     	; 0x3eca <__pack_f+0x162>
    3ec0:	16 95       	lsr	r17
    3ec2:	07 95       	ror	r16
    3ec4:	f7 94       	ror	r15
    3ec6:	e7 94       	ror	r14
    3ec8:	31 96       	adiw	r30, 0x01	; 1
    3eca:	87 e0       	ldi	r24, 0x07	; 7
    3ecc:	16 95       	lsr	r17
    3ece:	07 95       	ror	r16
    3ed0:	f7 94       	ror	r15
    3ed2:	e7 94       	ror	r14
    3ed4:	8a 95       	dec	r24
    3ed6:	d1 f7       	brne	.-12     	; 0x3ecc <__pack_f+0x164>
    3ed8:	05 c0       	rjmp	.+10     	; 0x3ee4 <__pack_f+0x17c>
    3eda:	ee 24       	eor	r14, r14
    3edc:	ff 24       	eor	r15, r15
    3ede:	87 01       	movw	r16, r14
    3ee0:	ef ef       	ldi	r30, 0xFF	; 255
    3ee2:	f0 e0       	ldi	r31, 0x00	; 0
    3ee4:	6e 2f       	mov	r22, r30
    3ee6:	67 95       	ror	r22
    3ee8:	66 27       	eor	r22, r22
    3eea:	67 95       	ror	r22
    3eec:	90 2f       	mov	r25, r16
    3eee:	9f 77       	andi	r25, 0x7F	; 127
    3ef0:	d7 94       	ror	r13
    3ef2:	dd 24       	eor	r13, r13
    3ef4:	d7 94       	ror	r13
    3ef6:	8e 2f       	mov	r24, r30
    3ef8:	86 95       	lsr	r24
    3efa:	49 2f       	mov	r20, r25
    3efc:	46 2b       	or	r20, r22
    3efe:	58 2f       	mov	r21, r24
    3f00:	5d 29       	or	r21, r13
    3f02:	b7 01       	movw	r22, r14
    3f04:	ca 01       	movw	r24, r20
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	ff 90       	pop	r15
    3f0c:	ef 90       	pop	r14
    3f0e:	df 90       	pop	r13
    3f10:	08 95       	ret

00003f12 <__unpack_f>:
    3f12:	fc 01       	movw	r30, r24
    3f14:	db 01       	movw	r26, r22
    3f16:	40 81       	ld	r20, Z
    3f18:	51 81       	ldd	r21, Z+1	; 0x01
    3f1a:	22 81       	ldd	r18, Z+2	; 0x02
    3f1c:	62 2f       	mov	r22, r18
    3f1e:	6f 77       	andi	r22, 0x7F	; 127
    3f20:	70 e0       	ldi	r23, 0x00	; 0
    3f22:	22 1f       	adc	r18, r18
    3f24:	22 27       	eor	r18, r18
    3f26:	22 1f       	adc	r18, r18
    3f28:	93 81       	ldd	r25, Z+3	; 0x03
    3f2a:	89 2f       	mov	r24, r25
    3f2c:	88 0f       	add	r24, r24
    3f2e:	82 2b       	or	r24, r18
    3f30:	28 2f       	mov	r18, r24
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	99 1f       	adc	r25, r25
    3f36:	99 27       	eor	r25, r25
    3f38:	99 1f       	adc	r25, r25
    3f3a:	11 96       	adiw	r26, 0x01	; 1
    3f3c:	9c 93       	st	X, r25
    3f3e:	11 97       	sbiw	r26, 0x01	; 1
    3f40:	21 15       	cp	r18, r1
    3f42:	31 05       	cpc	r19, r1
    3f44:	a9 f5       	brne	.+106    	; 0x3fb0 <__unpack_f+0x9e>
    3f46:	41 15       	cp	r20, r1
    3f48:	51 05       	cpc	r21, r1
    3f4a:	61 05       	cpc	r22, r1
    3f4c:	71 05       	cpc	r23, r1
    3f4e:	11 f4       	brne	.+4      	; 0x3f54 <__unpack_f+0x42>
    3f50:	82 e0       	ldi	r24, 0x02	; 2
    3f52:	37 c0       	rjmp	.+110    	; 0x3fc2 <__unpack_f+0xb0>
    3f54:	82 e8       	ldi	r24, 0x82	; 130
    3f56:	9f ef       	ldi	r25, 0xFF	; 255
    3f58:	13 96       	adiw	r26, 0x03	; 3
    3f5a:	9c 93       	st	X, r25
    3f5c:	8e 93       	st	-X, r24
    3f5e:	12 97       	sbiw	r26, 0x02	; 2
    3f60:	9a 01       	movw	r18, r20
    3f62:	ab 01       	movw	r20, r22
    3f64:	67 e0       	ldi	r22, 0x07	; 7
    3f66:	22 0f       	add	r18, r18
    3f68:	33 1f       	adc	r19, r19
    3f6a:	44 1f       	adc	r20, r20
    3f6c:	55 1f       	adc	r21, r21
    3f6e:	6a 95       	dec	r22
    3f70:	d1 f7       	brne	.-12     	; 0x3f66 <__unpack_f+0x54>
    3f72:	83 e0       	ldi	r24, 0x03	; 3
    3f74:	8c 93       	st	X, r24
    3f76:	0d c0       	rjmp	.+26     	; 0x3f92 <__unpack_f+0x80>
    3f78:	22 0f       	add	r18, r18
    3f7a:	33 1f       	adc	r19, r19
    3f7c:	44 1f       	adc	r20, r20
    3f7e:	55 1f       	adc	r21, r21
    3f80:	12 96       	adiw	r26, 0x02	; 2
    3f82:	8d 91       	ld	r24, X+
    3f84:	9c 91       	ld	r25, X
    3f86:	13 97       	sbiw	r26, 0x03	; 3
    3f88:	01 97       	sbiw	r24, 0x01	; 1
    3f8a:	13 96       	adiw	r26, 0x03	; 3
    3f8c:	9c 93       	st	X, r25
    3f8e:	8e 93       	st	-X, r24
    3f90:	12 97       	sbiw	r26, 0x02	; 2
    3f92:	20 30       	cpi	r18, 0x00	; 0
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	38 07       	cpc	r19, r24
    3f98:	80 e0       	ldi	r24, 0x00	; 0
    3f9a:	48 07       	cpc	r20, r24
    3f9c:	80 e4       	ldi	r24, 0x40	; 64
    3f9e:	58 07       	cpc	r21, r24
    3fa0:	58 f3       	brcs	.-42     	; 0x3f78 <__unpack_f+0x66>
    3fa2:	14 96       	adiw	r26, 0x04	; 4
    3fa4:	2d 93       	st	X+, r18
    3fa6:	3d 93       	st	X+, r19
    3fa8:	4d 93       	st	X+, r20
    3faa:	5c 93       	st	X, r21
    3fac:	17 97       	sbiw	r26, 0x07	; 7
    3fae:	08 95       	ret
    3fb0:	2f 3f       	cpi	r18, 0xFF	; 255
    3fb2:	31 05       	cpc	r19, r1
    3fb4:	79 f4       	brne	.+30     	; 0x3fd4 <__unpack_f+0xc2>
    3fb6:	41 15       	cp	r20, r1
    3fb8:	51 05       	cpc	r21, r1
    3fba:	61 05       	cpc	r22, r1
    3fbc:	71 05       	cpc	r23, r1
    3fbe:	19 f4       	brne	.+6      	; 0x3fc6 <__unpack_f+0xb4>
    3fc0:	84 e0       	ldi	r24, 0x04	; 4
    3fc2:	8c 93       	st	X, r24
    3fc4:	08 95       	ret
    3fc6:	64 ff       	sbrs	r22, 4
    3fc8:	03 c0       	rjmp	.+6      	; 0x3fd0 <__unpack_f+0xbe>
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	8c 93       	st	X, r24
    3fce:	12 c0       	rjmp	.+36     	; 0x3ff4 <__unpack_f+0xe2>
    3fd0:	1c 92       	st	X, r1
    3fd2:	10 c0       	rjmp	.+32     	; 0x3ff4 <__unpack_f+0xe2>
    3fd4:	2f 57       	subi	r18, 0x7F	; 127
    3fd6:	30 40       	sbci	r19, 0x00	; 0
    3fd8:	13 96       	adiw	r26, 0x03	; 3
    3fda:	3c 93       	st	X, r19
    3fdc:	2e 93       	st	-X, r18
    3fde:	12 97       	sbiw	r26, 0x02	; 2
    3fe0:	83 e0       	ldi	r24, 0x03	; 3
    3fe2:	8c 93       	st	X, r24
    3fe4:	87 e0       	ldi	r24, 0x07	; 7
    3fe6:	44 0f       	add	r20, r20
    3fe8:	55 1f       	adc	r21, r21
    3fea:	66 1f       	adc	r22, r22
    3fec:	77 1f       	adc	r23, r23
    3fee:	8a 95       	dec	r24
    3ff0:	d1 f7       	brne	.-12     	; 0x3fe6 <__unpack_f+0xd4>
    3ff2:	70 64       	ori	r23, 0x40	; 64
    3ff4:	14 96       	adiw	r26, 0x04	; 4
    3ff6:	4d 93       	st	X+, r20
    3ff8:	5d 93       	st	X+, r21
    3ffa:	6d 93       	st	X+, r22
    3ffc:	7c 93       	st	X, r23
    3ffe:	17 97       	sbiw	r26, 0x07	; 7
    4000:	08 95       	ret

00004002 <__fpcmp_parts_f>:
    4002:	1f 93       	push	r17
    4004:	dc 01       	movw	r26, r24
    4006:	fb 01       	movw	r30, r22
    4008:	9c 91       	ld	r25, X
    400a:	92 30       	cpi	r25, 0x02	; 2
    400c:	08 f4       	brcc	.+2      	; 0x4010 <__fpcmp_parts_f+0xe>
    400e:	47 c0       	rjmp	.+142    	; 0x409e <__fpcmp_parts_f+0x9c>
    4010:	80 81       	ld	r24, Z
    4012:	82 30       	cpi	r24, 0x02	; 2
    4014:	08 f4       	brcc	.+2      	; 0x4018 <__fpcmp_parts_f+0x16>
    4016:	43 c0       	rjmp	.+134    	; 0x409e <__fpcmp_parts_f+0x9c>
    4018:	94 30       	cpi	r25, 0x04	; 4
    401a:	51 f4       	brne	.+20     	; 0x4030 <__fpcmp_parts_f+0x2e>
    401c:	11 96       	adiw	r26, 0x01	; 1
    401e:	1c 91       	ld	r17, X
    4020:	84 30       	cpi	r24, 0x04	; 4
    4022:	99 f5       	brne	.+102    	; 0x408a <__fpcmp_parts_f+0x88>
    4024:	81 81       	ldd	r24, Z+1	; 0x01
    4026:	68 2f       	mov	r22, r24
    4028:	70 e0       	ldi	r23, 0x00	; 0
    402a:	61 1b       	sub	r22, r17
    402c:	71 09       	sbc	r23, r1
    402e:	3f c0       	rjmp	.+126    	; 0x40ae <__fpcmp_parts_f+0xac>
    4030:	84 30       	cpi	r24, 0x04	; 4
    4032:	21 f0       	breq	.+8      	; 0x403c <__fpcmp_parts_f+0x3a>
    4034:	92 30       	cpi	r25, 0x02	; 2
    4036:	31 f4       	brne	.+12     	; 0x4044 <__fpcmp_parts_f+0x42>
    4038:	82 30       	cpi	r24, 0x02	; 2
    403a:	b9 f1       	breq	.+110    	; 0x40aa <__fpcmp_parts_f+0xa8>
    403c:	81 81       	ldd	r24, Z+1	; 0x01
    403e:	88 23       	and	r24, r24
    4040:	89 f1       	breq	.+98     	; 0x40a4 <__fpcmp_parts_f+0xa2>
    4042:	2d c0       	rjmp	.+90     	; 0x409e <__fpcmp_parts_f+0x9c>
    4044:	11 96       	adiw	r26, 0x01	; 1
    4046:	1c 91       	ld	r17, X
    4048:	11 97       	sbiw	r26, 0x01	; 1
    404a:	82 30       	cpi	r24, 0x02	; 2
    404c:	f1 f0       	breq	.+60     	; 0x408a <__fpcmp_parts_f+0x88>
    404e:	81 81       	ldd	r24, Z+1	; 0x01
    4050:	18 17       	cp	r17, r24
    4052:	d9 f4       	brne	.+54     	; 0x408a <__fpcmp_parts_f+0x88>
    4054:	12 96       	adiw	r26, 0x02	; 2
    4056:	2d 91       	ld	r18, X+
    4058:	3c 91       	ld	r19, X
    405a:	13 97       	sbiw	r26, 0x03	; 3
    405c:	82 81       	ldd	r24, Z+2	; 0x02
    405e:	93 81       	ldd	r25, Z+3	; 0x03
    4060:	82 17       	cp	r24, r18
    4062:	93 07       	cpc	r25, r19
    4064:	94 f0       	brlt	.+36     	; 0x408a <__fpcmp_parts_f+0x88>
    4066:	28 17       	cp	r18, r24
    4068:	39 07       	cpc	r19, r25
    406a:	bc f0       	brlt	.+46     	; 0x409a <__fpcmp_parts_f+0x98>
    406c:	14 96       	adiw	r26, 0x04	; 4
    406e:	8d 91       	ld	r24, X+
    4070:	9d 91       	ld	r25, X+
    4072:	0d 90       	ld	r0, X+
    4074:	bc 91       	ld	r27, X
    4076:	a0 2d       	mov	r26, r0
    4078:	24 81       	ldd	r18, Z+4	; 0x04
    407a:	35 81       	ldd	r19, Z+5	; 0x05
    407c:	46 81       	ldd	r20, Z+6	; 0x06
    407e:	57 81       	ldd	r21, Z+7	; 0x07
    4080:	28 17       	cp	r18, r24
    4082:	39 07       	cpc	r19, r25
    4084:	4a 07       	cpc	r20, r26
    4086:	5b 07       	cpc	r21, r27
    4088:	18 f4       	brcc	.+6      	; 0x4090 <__fpcmp_parts_f+0x8e>
    408a:	11 23       	and	r17, r17
    408c:	41 f0       	breq	.+16     	; 0x409e <__fpcmp_parts_f+0x9c>
    408e:	0a c0       	rjmp	.+20     	; 0x40a4 <__fpcmp_parts_f+0xa2>
    4090:	82 17       	cp	r24, r18
    4092:	93 07       	cpc	r25, r19
    4094:	a4 07       	cpc	r26, r20
    4096:	b5 07       	cpc	r27, r21
    4098:	40 f4       	brcc	.+16     	; 0x40aa <__fpcmp_parts_f+0xa8>
    409a:	11 23       	and	r17, r17
    409c:	19 f0       	breq	.+6      	; 0x40a4 <__fpcmp_parts_f+0xa2>
    409e:	61 e0       	ldi	r22, 0x01	; 1
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	05 c0       	rjmp	.+10     	; 0x40ae <__fpcmp_parts_f+0xac>
    40a4:	6f ef       	ldi	r22, 0xFF	; 255
    40a6:	7f ef       	ldi	r23, 0xFF	; 255
    40a8:	02 c0       	rjmp	.+4      	; 0x40ae <__fpcmp_parts_f+0xac>
    40aa:	60 e0       	ldi	r22, 0x00	; 0
    40ac:	70 e0       	ldi	r23, 0x00	; 0
    40ae:	cb 01       	movw	r24, r22
    40b0:	1f 91       	pop	r17
    40b2:	08 95       	ret

000040b4 <__prologue_saves__>:
    40b4:	2f 92       	push	r2
    40b6:	3f 92       	push	r3
    40b8:	4f 92       	push	r4
    40ba:	5f 92       	push	r5
    40bc:	6f 92       	push	r6
    40be:	7f 92       	push	r7
    40c0:	8f 92       	push	r8
    40c2:	9f 92       	push	r9
    40c4:	af 92       	push	r10
    40c6:	bf 92       	push	r11
    40c8:	cf 92       	push	r12
    40ca:	df 92       	push	r13
    40cc:	ef 92       	push	r14
    40ce:	ff 92       	push	r15
    40d0:	0f 93       	push	r16
    40d2:	1f 93       	push	r17
    40d4:	cf 93       	push	r28
    40d6:	df 93       	push	r29
    40d8:	cd b7       	in	r28, 0x3d	; 61
    40da:	de b7       	in	r29, 0x3e	; 62
    40dc:	ca 1b       	sub	r28, r26
    40de:	db 0b       	sbc	r29, r27
    40e0:	0f b6       	in	r0, 0x3f	; 63
    40e2:	f8 94       	cli
    40e4:	de bf       	out	0x3e, r29	; 62
    40e6:	0f be       	out	0x3f, r0	; 63
    40e8:	cd bf       	out	0x3d, r28	; 61
    40ea:	19 94       	eijmp

000040ec <__epilogue_restores__>:
    40ec:	2a 88       	ldd	r2, Y+18	; 0x12
    40ee:	39 88       	ldd	r3, Y+17	; 0x11
    40f0:	48 88       	ldd	r4, Y+16	; 0x10
    40f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    40f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    40f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    40f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    40fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    40fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    40fe:	b9 84       	ldd	r11, Y+9	; 0x09
    4100:	c8 84       	ldd	r12, Y+8	; 0x08
    4102:	df 80       	ldd	r13, Y+7	; 0x07
    4104:	ee 80       	ldd	r14, Y+6	; 0x06
    4106:	fd 80       	ldd	r15, Y+5	; 0x05
    4108:	0c 81       	ldd	r16, Y+4	; 0x04
    410a:	1b 81       	ldd	r17, Y+3	; 0x03
    410c:	aa 81       	ldd	r26, Y+2	; 0x02
    410e:	b9 81       	ldd	r27, Y+1	; 0x01
    4110:	ce 0f       	add	r28, r30
    4112:	d1 1d       	adc	r29, r1
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	ed 01       	movw	r28, r26
    4120:	08 95       	ret

00004122 <_exit>:
    4122:	f8 94       	cli

00004124 <__stop_program>:
    4124:	ff cf       	rjmp	.-2      	; 0x4124 <__stop_program>

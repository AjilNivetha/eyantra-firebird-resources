
hexapod_remote_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800200  000047bc  00004850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  0080030c  0080030c  0000495c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000495c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000aa4  00000000  00000000  0000497c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001873  00000000  00000000  00005420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000182  00000000  00000000  00006c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e78  00000000  00000000  00006e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000610  00000000  00000000  00008c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008fb  00000000  00000000  000092a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_17>
      48:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__vector_18>
      4c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__vector_19>
      50:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_20>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec eb       	ldi	r30, 0xBC	; 188
      fc:	f7 e4       	ldi	r31, 0x47	; 71
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 30       	cpi	r26, 0x0C	; 12
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	ac e0       	ldi	r26, 0x0C	; 12
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 34       	cpi	r26, 0x48	; 72
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 38 1a 	call	0x3470	; 0x3470 <main>
     122:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <servo_pin_config>:

//--------------------------------------------------------------------------------
//port initialisation for Servos i/p'sand relay											
//--------------------------------------------------------------------------------																			
void servo_pin_config (void)
{ 
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 DDRB  = 0x60;    //PB 5,6 as output
     132:	e4 e2       	ldi	r30, 0x24	; 36
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 e6       	ldi	r24, 0x60	; 96
     138:	80 83       	st	Z, r24
 PORTB = 0x00;
     13a:	e5 e2       	ldi	r30, 0x25	; 37
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	10 82       	st	Z, r1
 DDRD  = 0xF1;    //PD 1,4,5,6,7 as output
     140:	ea e2       	ldi	r30, 0x2A	; 42
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	81 ef       	ldi	r24, 0xF1	; 241
     146:	80 83       	st	Z, r24
 PORTD = 0x00;
     148:	eb e2       	ldi	r30, 0x2B	; 43
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	10 82       	st	Z, r1
 DDRG  = 0x03;    //PG 0,1 as output
     14e:	e3 e3       	ldi	r30, 0x33	; 51
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	80 83       	st	Z, r24
 PORTG = 0x00;
     156:	e4 e3       	ldi	r30, 0x34	; 52
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	10 82       	st	Z, r1
 DDRH  = 0x70;    //PH 4,5,6 as output
     15c:	e1 e0       	ldi	r30, 0x01	; 1
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	80 e7       	ldi	r24, 0x70	; 112
     162:	80 83       	st	Z, r24
 PORTH = 0x00;
     164:	e2 e0       	ldi	r30, 0x02	; 2
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	10 82       	st	Z, r1
 DDRJ  = 0xFE;    //PJ 1,2,3,4,5,6,7 as output
     16a:	e4 e0       	ldi	r30, 0x04	; 4
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	8e ef       	ldi	r24, 0xFE	; 254
     170:	80 83       	st	Z, r24
 PORTJ = 0x00;
     172:	e5 e0       	ldi	r30, 0x05	; 5
     174:	f1 e0       	ldi	r31, 0x01	; 1
     176:	10 82       	st	Z, r1
 DDRL  = 0xC7;    //PL 1,2,3,6,7 as output
     178:	ea e0       	ldi	r30, 0x0A	; 10
     17a:	f1 e0       	ldi	r31, 0x01	; 1
     17c:	87 ec       	ldi	r24, 0xC7	; 199
     17e:	80 83       	st	Z, r24
 PORTL = 0x00;
     180:	eb e0       	ldi	r30, 0x0B	; 11
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	10 82       	st	Z, r1
}
     186:	cf 91       	pop	r28
     188:	df 91       	pop	r29
     18a:	08 95       	ret

0000018c <buzzer_pin_config>:

//--------------------------------------------------------------------------------
//Function to initialize Buzzer 
//--------------------------------------------------------------------------------
void buzzer_pin_config (void)
{
     18c:	df 93       	push	r29
     18e:	cf 93       	push	r28
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;   //Setting PORTC 3 as output
     194:	a7 e2       	ldi	r26, 0x27	; 39
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	e7 e2       	ldi	r30, 0x27	; 39
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	88 60       	ori	r24, 0x08	; 8
     1a0:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7; //Setting PORTC 3 logic low to turnoff buzzer
     1a2:	a8 e2       	ldi	r26, 0x28	; 40
     1a4:	b0 e0       	ldi	r27, 0x00	; 0
     1a6:	e8 e2       	ldi	r30, 0x28	; 40
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	87 7f       	andi	r24, 0xF7	; 247
     1ae:	8c 93       	st	X, r24
}
     1b0:	cf 91       	pop	r28
     1b2:	df 91       	pop	r29
     1b4:	08 95       	ret

000001b6 <buzzer_on>:

void buzzer_on (void)
{
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	0f 92       	push	r0
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
     1c0:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
     1c2:	e6 e2       	ldi	r30, 0x26	; 38
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	88 60       	ori	r24, 0x08	; 8
     1ce:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
     1d0:	e8 e2       	ldi	r30, 0x28	; 40
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	80 83       	st	Z, r24
}
     1d8:	0f 90       	pop	r0
     1da:	cf 91       	pop	r28
     1dc:	df 91       	pop	r29
     1de:	08 95       	ret

000001e0 <buzzer_off>:

void buzzer_off (void)
{
     1e0:	df 93       	push	r29
     1e2:	cf 93       	push	r28
     1e4:	0f 92       	push	r0
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
     1ea:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
     1ec:	e6 e2       	ldi	r30, 0x26	; 38
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	87 7f       	andi	r24, 0xF7	; 247
     1f8:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
     1fa:	e8 e2       	ldi	r30, 0x28	; 40
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	80 83       	st	Z, r24
}
     202:	0f 90       	pop	r0
     204:	cf 91       	pop	r28
     206:	df 91       	pop	r29
     208:	08 95       	ret

0000020a <timer1_init>:
// WGM: 0) Normal, TOP=0xFFFF
// desired value: 400Hz
// actual value: 400.007Hz (0.0%)
//--------------------------------------------------------------------------------
void timer1_init(void)
{
     20a:	df 93       	push	r29
     20c:	cf 93       	push	r28
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
     212:	e1 e8       	ldi	r30, 0x81	; 129
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	10 82       	st	Z, r1
 TCNT1H = 0x70; //setup
     218:	e5 e8       	ldi	r30, 0x85	; 133
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 e7       	ldi	r24, 0x70	; 112
     21e:	80 83       	st	Z, r24
 TCNT1L = 0x01;
     220:	e4 e8       	ldi	r30, 0x84	; 132
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	80 83       	st	Z, r24
 OCR1AH = 0x8F;
     228:	e9 e8       	ldi	r30, 0x89	; 137
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	8f e8       	ldi	r24, 0x8F	; 143
     22e:	80 83       	st	Z, r24
 OCR1AL = 0xFF;
     230:	e8 e8       	ldi	r30, 0x88	; 136
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	80 83       	st	Z, r24
 OCR1BH = 0x8F;
     238:	eb e8       	ldi	r30, 0x8B	; 139
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	8f e8       	ldi	r24, 0x8F	; 143
     23e:	80 83       	st	Z, r24
 OCR1BL = 0xFF;
     240:	ea e8       	ldi	r30, 0x8A	; 138
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	8f ef       	ldi	r24, 0xFF	; 255
     246:	80 83       	st	Z, r24
 OCR1CH = 0x8F;
     248:	ed e8       	ldi	r30, 0x8D	; 141
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	8f e8       	ldi	r24, 0x8F	; 143
     24e:	80 83       	st	Z, r24
 OCR1CL = 0xFF;
     250:	ec e8       	ldi	r30, 0x8C	; 140
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	80 83       	st	Z, r24
 TCCR1A = 0x00;
     258:	e0 e8       	ldi	r30, 0x80	; 128
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	10 82       	st	Z, r1
 TCCR1C = 0x00;
     25e:	e2 e8       	ldi	r30, 0x82	; 130
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	10 82       	st	Z, r1
 TCCR1B = 0x01; //start Timer
     264:	e1 e8       	ldi	r30, 0x81	; 129
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 83       	st	Z, r24
}
     26c:	cf 91       	pop	r28
     26e:	df 91       	pop	r29
     270:	08 95       	ret

00000272 <uart0_init>:
// actual baud rate:115200 (error 0.0%)
// char size: 8 bit
// parity: Disabled
//--------------------------------------------------------------------------------
void uart0_init(void)
{
     272:	df 93       	push	r29
     274:	cf 93       	push	r28
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
     27a:	e1 ec       	ldi	r30, 0xC1	; 193
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     280:	e0 ec       	ldi	r30, 0xC0	; 192
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	10 82       	st	Z, r1
 UCSR0C = 0x06;
     286:	e2 ec       	ldi	r30, 0xC2	; 194
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	86 e0       	ldi	r24, 0x06	; 6
     28c:	80 83       	st	Z, r24
 UBRR0L = 0x07; //set baud rate lo
     28e:	e4 ec       	ldi	r30, 0xC4	; 196
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	87 e0       	ldi	r24, 0x07	; 7
     294:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
     296:	e5 ec       	ldi	r30, 0xC5	; 197
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	10 82       	st	Z, r1
 UCSR0B = 0x98;
     29c:	e1 ec       	ldi	r30, 0xC1	; 193
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	88 e9       	ldi	r24, 0x98	; 152
     2a2:	80 83       	st	Z, r24
}
     2a4:	cf 91       	pop	r28
     2a6:	df 91       	pop	r29
     2a8:	08 95       	ret

000002aa <servo_on>:
//--------------------------------------------------------------------------------
// funcion for all servos on and servos off (relay on/off)
//--------------------------------------------------------------------------------
void servo_on (void)                    
{ PORTD = PORTD | 0x01; }
     2aa:	df 93       	push	r29
     2ac:	cf 93       	push	r28
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	ab e2       	ldi	r26, 0x2B	; 43
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	eb e2       	ldi	r30, 0x2B	; 43
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	81 60       	ori	r24, 0x01	; 1
     2be:	8c 93       	st	X, r24
     2c0:	cf 91       	pop	r28
     2c2:	df 91       	pop	r29
     2c4:	08 95       	ret

000002c6 <servo_off>:

void servo_off (void)                    
{ PORTD = PORTD & 0xFE; }
     2c6:	df 93       	push	r29
     2c8:	cf 93       	push	r28
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	ab e2       	ldi	r26, 0x2B	; 43
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	eb e2       	ldi	r30, 0x2B	; 43
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	8e 7f       	andi	r24, 0xFE	; 254
     2da:	8c 93       	st	X, r24
     2dc:	cf 91       	pop	r28
     2de:	df 91       	pop	r29
     2e0:	08 95       	ret

000002e2 <reset_1A>:

//--------------------------------------------------------------------------------
// reset & set function of joint 1A,1B..............6C and servo pods
//--------------------------------------------------------------------------------
void reset_1A (void)
{ PORTD = PORTD & 0xDF; }
     2e2:	df 93       	push	r29
     2e4:	cf 93       	push	r28
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	ab e2       	ldi	r26, 0x2B	; 43
     2ec:	b0 e0       	ldi	r27, 0x00	; 0
     2ee:	eb e2       	ldi	r30, 0x2B	; 43
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	80 81       	ld	r24, Z
     2f4:	8f 7d       	andi	r24, 0xDF	; 223
     2f6:	8c 93       	st	X, r24
     2f8:	cf 91       	pop	r28
     2fa:	df 91       	pop	r29
     2fc:	08 95       	ret

000002fe <set_1A>:

void set_1A (void)
{ PORTD = PORTD | 0x20; }
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	ab e2       	ldi	r26, 0x2B	; 43
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	eb e2       	ldi	r30, 0x2B	; 43
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	80 62       	ori	r24, 0x20	; 32
     312:	8c 93       	st	X, r24
     314:	cf 91       	pop	r28
     316:	df 91       	pop	r29
     318:	08 95       	ret

0000031a <reset_1B>:

void reset_1B (void)
{ PORTL = PORTL & 0xFB; }
     31a:	df 93       	push	r29
     31c:	cf 93       	push	r28
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	ab e0       	ldi	r26, 0x0B	; 11
     324:	b1 e0       	ldi	r27, 0x01	; 1
     326:	eb e0       	ldi	r30, 0x0B	; 11
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	80 81       	ld	r24, Z
     32c:	8b 7f       	andi	r24, 0xFB	; 251
     32e:	8c 93       	st	X, r24
     330:	cf 91       	pop	r28
     332:	df 91       	pop	r29
     334:	08 95       	ret

00000336 <set_1B>:

void set_1B (void)
{ PORTL = PORTL | 0x04; }
     336:	df 93       	push	r29
     338:	cf 93       	push	r28
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	ab e0       	ldi	r26, 0x0B	; 11
     340:	b1 e0       	ldi	r27, 0x01	; 1
     342:	eb e0       	ldi	r30, 0x0B	; 11
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	80 81       	ld	r24, Z
     348:	84 60       	ori	r24, 0x04	; 4
     34a:	8c 93       	st	X, r24
     34c:	cf 91       	pop	r28
     34e:	df 91       	pop	r29
     350:	08 95       	ret

00000352 <reset_1C>:

void reset_1C (void)
{ PORTG = PORTG & 0xFD; }
     352:	df 93       	push	r29
     354:	cf 93       	push	r28
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	a4 e3       	ldi	r26, 0x34	; 52
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	e4 e3       	ldi	r30, 0x34	; 52
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	8d 7f       	andi	r24, 0xFD	; 253
     366:	8c 93       	st	X, r24
     368:	cf 91       	pop	r28
     36a:	df 91       	pop	r29
     36c:	08 95       	ret

0000036e <set_1C>:

void set_1C (void)
{ PORTG = PORTG | 0x02; }
     36e:	df 93       	push	r29
     370:	cf 93       	push	r28
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	a4 e3       	ldi	r26, 0x34	; 52
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e4 e3       	ldi	r30, 0x34	; 52
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	82 60       	ori	r24, 0x02	; 2
     382:	8c 93       	st	X, r24
     384:	cf 91       	pop	r28
     386:	df 91       	pop	r29
     388:	08 95       	ret

0000038a <reset_2A>:

void reset_2A (void)
{ PORTL = PORTL & 0xBF; }
     38a:	df 93       	push	r29
     38c:	cf 93       	push	r28
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	ab e0       	ldi	r26, 0x0B	; 11
     394:	b1 e0       	ldi	r27, 0x01	; 1
     396:	eb e0       	ldi	r30, 0x0B	; 11
     398:	f1 e0       	ldi	r31, 0x01	; 1
     39a:	80 81       	ld	r24, Z
     39c:	8f 7b       	andi	r24, 0xBF	; 191
     39e:	8c 93       	st	X, r24
     3a0:	cf 91       	pop	r28
     3a2:	df 91       	pop	r29
     3a4:	08 95       	ret

000003a6 <set_2A>:

void set_2A (void)
{ PORTL = PORTL | 0x40; }
     3a6:	df 93       	push	r29
     3a8:	cf 93       	push	r28
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	ab e0       	ldi	r26, 0x0B	; 11
     3b0:	b1 e0       	ldi	r27, 0x01	; 1
     3b2:	eb e0       	ldi	r30, 0x0B	; 11
     3b4:	f1 e0       	ldi	r31, 0x01	; 1
     3b6:	80 81       	ld	r24, Z
     3b8:	80 64       	ori	r24, 0x40	; 64
     3ba:	8c 93       	st	X, r24
     3bc:	cf 91       	pop	r28
     3be:	df 91       	pop	r29
     3c0:	08 95       	ret

000003c2 <reset_2B>:

void reset_2B (void)
{ PORTD = PORTD & 0xEF; }
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	ab e2       	ldi	r26, 0x2B	; 43
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	eb e2       	ldi	r30, 0x2B	; 43
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	8f 7e       	andi	r24, 0xEF	; 239
     3d6:	8c 93       	st	X, r24
     3d8:	cf 91       	pop	r28
     3da:	df 91       	pop	r29
     3dc:	08 95       	ret

000003de <set_2B>:

void set_2B (void)
{ PORTD = PORTD | 0x10; }
     3de:	df 93       	push	r29
     3e0:	cf 93       	push	r28
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	ab e2       	ldi	r26, 0x2B	; 43
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	eb e2       	ldi	r30, 0x2B	; 43
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	80 61       	ori	r24, 0x10	; 16
     3f2:	8c 93       	st	X, r24
     3f4:	cf 91       	pop	r28
     3f6:	df 91       	pop	r29
     3f8:	08 95       	ret

000003fa <reset_2C>:

void reset_2C (void)
{ PORTL = PORTL & 0x7F; }
     3fa:	df 93       	push	r29
     3fc:	cf 93       	push	r28
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	ab e0       	ldi	r26, 0x0B	; 11
     404:	b1 e0       	ldi	r27, 0x01	; 1
     406:	eb e0       	ldi	r30, 0x0B	; 11
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	80 81       	ld	r24, Z
     40c:	8f 77       	andi	r24, 0x7F	; 127
     40e:	8c 93       	st	X, r24
     410:	cf 91       	pop	r28
     412:	df 91       	pop	r29
     414:	08 95       	ret

00000416 <set_2C>:

void set_2C (void)
{ PORTL = PORTL | 0x80; }
     416:	df 93       	push	r29
     418:	cf 93       	push	r28
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	ab e0       	ldi	r26, 0x0B	; 11
     420:	b1 e0       	ldi	r27, 0x01	; 1
     422:	eb e0       	ldi	r30, 0x0B	; 11
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	80 81       	ld	r24, Z
     428:	80 68       	ori	r24, 0x80	; 128
     42a:	8c 93       	st	X, r24
     42c:	cf 91       	pop	r28
     42e:	df 91       	pop	r29
     430:	08 95       	ret

00000432 <reset_3A>:

void reset_3A (void)
{ PORTH = PORTH & 0xBF; }
     432:	df 93       	push	r29
     434:	cf 93       	push	r28
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	a2 e0       	ldi	r26, 0x02	; 2
     43c:	b1 e0       	ldi	r27, 0x01	; 1
     43e:	e2 e0       	ldi	r30, 0x02	; 2
     440:	f1 e0       	ldi	r31, 0x01	; 1
     442:	80 81       	ld	r24, Z
     444:	8f 7b       	andi	r24, 0xBF	; 191
     446:	8c 93       	st	X, r24
     448:	cf 91       	pop	r28
     44a:	df 91       	pop	r29
     44c:	08 95       	ret

0000044e <set_3A>:

void set_3A (void)
{ PORTH = PORTH | 0x40; }
     44e:	df 93       	push	r29
     450:	cf 93       	push	r28
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	a2 e0       	ldi	r26, 0x02	; 2
     458:	b1 e0       	ldi	r27, 0x01	; 1
     45a:	e2 e0       	ldi	r30, 0x02	; 2
     45c:	f1 e0       	ldi	r31, 0x01	; 1
     45e:	80 81       	ld	r24, Z
     460:	80 64       	ori	r24, 0x40	; 64
     462:	8c 93       	st	X, r24
     464:	cf 91       	pop	r28
     466:	df 91       	pop	r29
     468:	08 95       	ret

0000046a <reset_3B>:

void reset_3B (void)
{ PORTH = PORTH & 0xEF; }
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	a2 e0       	ldi	r26, 0x02	; 2
     474:	b1 e0       	ldi	r27, 0x01	; 1
     476:	e2 e0       	ldi	r30, 0x02	; 2
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	8f 7e       	andi	r24, 0xEF	; 239
     47e:	8c 93       	st	X, r24
     480:	cf 91       	pop	r28
     482:	df 91       	pop	r29
     484:	08 95       	ret

00000486 <set_3B>:

void set_3B (void)
{ PORTH = PORTH | 0x10; }
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	a2 e0       	ldi	r26, 0x02	; 2
     490:	b1 e0       	ldi	r27, 0x01	; 1
     492:	e2 e0       	ldi	r30, 0x02	; 2
     494:	f1 e0       	ldi	r31, 0x01	; 1
     496:	80 81       	ld	r24, Z
     498:	80 61       	ori	r24, 0x10	; 16
     49a:	8c 93       	st	X, r24
     49c:	cf 91       	pop	r28
     49e:	df 91       	pop	r29
     4a0:	08 95       	ret

000004a2 <reset_3C>:

void reset_3C (void)
{ PORTH = PORTH & 0xDF; }
     4a2:	df 93       	push	r29
     4a4:	cf 93       	push	r28
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	a2 e0       	ldi	r26, 0x02	; 2
     4ac:	b1 e0       	ldi	r27, 0x01	; 1
     4ae:	e2 e0       	ldi	r30, 0x02	; 2
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	80 81       	ld	r24, Z
     4b4:	8f 7d       	andi	r24, 0xDF	; 223
     4b6:	8c 93       	st	X, r24
     4b8:	cf 91       	pop	r28
     4ba:	df 91       	pop	r29
     4bc:	08 95       	ret

000004be <set_3C>:

void set_3C (void)
{ PORTH = PORTH | 0x20; }
     4be:	df 93       	push	r29
     4c0:	cf 93       	push	r28
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	a2 e0       	ldi	r26, 0x02	; 2
     4c8:	b1 e0       	ldi	r27, 0x01	; 1
     4ca:	e2 e0       	ldi	r30, 0x02	; 2
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	80 81       	ld	r24, Z
     4d0:	80 62       	ori	r24, 0x20	; 32
     4d2:	8c 93       	st	X, r24
     4d4:	cf 91       	pop	r28
     4d6:	df 91       	pop	r29
     4d8:	08 95       	ret

000004da <reset_4A>:

void reset_4A (void)
{ PORTG = PORTG & 0xFE; }
     4da:	df 93       	push	r29
     4dc:	cf 93       	push	r28
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	a4 e3       	ldi	r26, 0x34	; 52
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	e4 e3       	ldi	r30, 0x34	; 52
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	8e 7f       	andi	r24, 0xFE	; 254
     4ee:	8c 93       	st	X, r24
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <set_4A>:

void set_4A (void)
{ PORTG = PORTG | 0x01; }
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	a4 e3       	ldi	r26, 0x34	; 52
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	e4 e3       	ldi	r30, 0x34	; 52
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 81       	ld	r24, Z
     508:	81 60       	ori	r24, 0x01	; 1
     50a:	8c 93       	st	X, r24
     50c:	cf 91       	pop	r28
     50e:	df 91       	pop	r29
     510:	08 95       	ret

00000512 <reset_4B>:

void reset_4B (void)
{ PORTD = PORTD & 0x7F; }
     512:	df 93       	push	r29
     514:	cf 93       	push	r28
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
     51a:	ab e2       	ldi	r26, 0x2B	; 43
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	eb e2       	ldi	r30, 0x2B	; 43
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	8f 77       	andi	r24, 0x7F	; 127
     526:	8c 93       	st	X, r24
     528:	cf 91       	pop	r28
     52a:	df 91       	pop	r29
     52c:	08 95       	ret

0000052e <set_4B>:

void set_4B (void)
{ PORTD = PORTD | 0x80; }
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	ab e2       	ldi	r26, 0x2B	; 43
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	eb e2       	ldi	r30, 0x2B	; 43
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	80 81       	ld	r24, Z
     540:	80 68       	ori	r24, 0x80	; 128
     542:	8c 93       	st	X, r24
     544:	cf 91       	pop	r28
     546:	df 91       	pop	r29
     548:	08 95       	ret

0000054a <reset_4C>:

void reset_4C (void)
{ PORTD = PORTD & 0xBF; }
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	ab e2       	ldi	r26, 0x2B	; 43
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	eb e2       	ldi	r30, 0x2B	; 43
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	8f 7b       	andi	r24, 0xBF	; 191
     55e:	8c 93       	st	X, r24
     560:	cf 91       	pop	r28
     562:	df 91       	pop	r29
     564:	08 95       	ret

00000566 <set_4C>:

void set_4C (void)
{ PORTD = PORTD | 0x40; }
     566:	df 93       	push	r29
     568:	cf 93       	push	r28
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	ab e2       	ldi	r26, 0x2B	; 43
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	eb e2       	ldi	r30, 0x2B	; 43
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	80 64       	ori	r24, 0x40	; 64
     57a:	8c 93       	st	X, r24
     57c:	cf 91       	pop	r28
     57e:	df 91       	pop	r29
     580:	08 95       	ret

00000582 <reset_5A>:

void reset_5A (void)
{ PORTJ = PORTJ & 0xDF; }
     582:	df 93       	push	r29
     584:	cf 93       	push	r28
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	a5 e0       	ldi	r26, 0x05	; 5
     58c:	b1 e0       	ldi	r27, 0x01	; 1
     58e:	e5 e0       	ldi	r30, 0x05	; 5
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	80 81       	ld	r24, Z
     594:	8f 7d       	andi	r24, 0xDF	; 223
     596:	8c 93       	st	X, r24
     598:	cf 91       	pop	r28
     59a:	df 91       	pop	r29
     59c:	08 95       	ret

0000059e <set_5A>:

void set_5A (void)
{ PORTJ = PORTJ | 0x20; }
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	a5 e0       	ldi	r26, 0x05	; 5
     5a8:	b1 e0       	ldi	r27, 0x01	; 1
     5aa:	e5 e0       	ldi	r30, 0x05	; 5
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
     5ae:	80 81       	ld	r24, Z
     5b0:	80 62       	ori	r24, 0x20	; 32
     5b2:	8c 93       	st	X, r24
     5b4:	cf 91       	pop	r28
     5b6:	df 91       	pop	r29
     5b8:	08 95       	ret

000005ba <reset_5B>:

void reset_5B (void)
{ PORTJ = PORTJ & 0xBF; }
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	a5 e0       	ldi	r26, 0x05	; 5
     5c4:	b1 e0       	ldi	r27, 0x01	; 1
     5c6:	e5 e0       	ldi	r30, 0x05	; 5
     5c8:	f1 e0       	ldi	r31, 0x01	; 1
     5ca:	80 81       	ld	r24, Z
     5cc:	8f 7b       	andi	r24, 0xBF	; 191
     5ce:	8c 93       	st	X, r24
     5d0:	cf 91       	pop	r28
     5d2:	df 91       	pop	r29
     5d4:	08 95       	ret

000005d6 <set_5B>:

void set_5B (void)
{ PORTJ = PORTJ | 0x40; }
     5d6:	df 93       	push	r29
     5d8:	cf 93       	push	r28
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	a5 e0       	ldi	r26, 0x05	; 5
     5e0:	b1 e0       	ldi	r27, 0x01	; 1
     5e2:	e5 e0       	ldi	r30, 0x05	; 5
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	80 81       	ld	r24, Z
     5e8:	80 64       	ori	r24, 0x40	; 64
     5ea:	8c 93       	st	X, r24
     5ec:	cf 91       	pop	r28
     5ee:	df 91       	pop	r29
     5f0:	08 95       	ret

000005f2 <reset_5C>:

void reset_5C (void)
{ PORTJ = PORTJ & 0xEF; }
     5f2:	df 93       	push	r29
     5f4:	cf 93       	push	r28
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	a5 e0       	ldi	r26, 0x05	; 5
     5fc:	b1 e0       	ldi	r27, 0x01	; 1
     5fe:	e5 e0       	ldi	r30, 0x05	; 5
     600:	f1 e0       	ldi	r31, 0x01	; 1
     602:	80 81       	ld	r24, Z
     604:	8f 7e       	andi	r24, 0xEF	; 239
     606:	8c 93       	st	X, r24
     608:	cf 91       	pop	r28
     60a:	df 91       	pop	r29
     60c:	08 95       	ret

0000060e <set_5C>:

void set_5C (void)
{ PORTJ = PORTJ | 0x10; }
     60e:	df 93       	push	r29
     610:	cf 93       	push	r28
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	a5 e0       	ldi	r26, 0x05	; 5
     618:	b1 e0       	ldi	r27, 0x01	; 1
     61a:	e5 e0       	ldi	r30, 0x05	; 5
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	80 81       	ld	r24, Z
     620:	80 61       	ori	r24, 0x10	; 16
     622:	8c 93       	st	X, r24
     624:	cf 91       	pop	r28
     626:	df 91       	pop	r29
     628:	08 95       	ret

0000062a <reset_6A>:

void reset_6A (void)
{ PORTJ = PORTJ & 0xF7; }
     62a:	df 93       	push	r29
     62c:	cf 93       	push	r28
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	a5 e0       	ldi	r26, 0x05	; 5
     634:	b1 e0       	ldi	r27, 0x01	; 1
     636:	e5 e0       	ldi	r30, 0x05	; 5
     638:	f1 e0       	ldi	r31, 0x01	; 1
     63a:	80 81       	ld	r24, Z
     63c:	87 7f       	andi	r24, 0xF7	; 247
     63e:	8c 93       	st	X, r24
     640:	cf 91       	pop	r28
     642:	df 91       	pop	r29
     644:	08 95       	ret

00000646 <set_6A>:

void set_6A (void)
{ PORTJ = PORTJ | 0x08; }
     646:	df 93       	push	r29
     648:	cf 93       	push	r28
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	a5 e0       	ldi	r26, 0x05	; 5
     650:	b1 e0       	ldi	r27, 0x01	; 1
     652:	e5 e0       	ldi	r30, 0x05	; 5
     654:	f1 e0       	ldi	r31, 0x01	; 1
     656:	80 81       	ld	r24, Z
     658:	88 60       	ori	r24, 0x08	; 8
     65a:	8c 93       	st	X, r24
     65c:	cf 91       	pop	r28
     65e:	df 91       	pop	r29
     660:	08 95       	ret

00000662 <reset_6B>:

void reset_6B (void)
{ PORTJ = PORTJ & 0xFD; }
     662:	df 93       	push	r29
     664:	cf 93       	push	r28
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	a5 e0       	ldi	r26, 0x05	; 5
     66c:	b1 e0       	ldi	r27, 0x01	; 1
     66e:	e5 e0       	ldi	r30, 0x05	; 5
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	80 81       	ld	r24, Z
     674:	8d 7f       	andi	r24, 0xFD	; 253
     676:	8c 93       	st	X, r24
     678:	cf 91       	pop	r28
     67a:	df 91       	pop	r29
     67c:	08 95       	ret

0000067e <set_6B>:

void set_6B (void)
{ PORTJ = PORTJ | 0x02; }
     67e:	df 93       	push	r29
     680:	cf 93       	push	r28
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	a5 e0       	ldi	r26, 0x05	; 5
     688:	b1 e0       	ldi	r27, 0x01	; 1
     68a:	e5 e0       	ldi	r30, 0x05	; 5
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	80 81       	ld	r24, Z
     690:	82 60       	ori	r24, 0x02	; 2
     692:	8c 93       	st	X, r24
     694:	cf 91       	pop	r28
     696:	df 91       	pop	r29
     698:	08 95       	ret

0000069a <reset_6C>:

void reset_6C (void)
{ PORTJ = PORTJ & 0xFB; }
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	a5 e0       	ldi	r26, 0x05	; 5
     6a4:	b1 e0       	ldi	r27, 0x01	; 1
     6a6:	e5 e0       	ldi	r30, 0x05	; 5
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	80 81       	ld	r24, Z
     6ac:	8b 7f       	andi	r24, 0xFB	; 251
     6ae:	8c 93       	st	X, r24
     6b0:	cf 91       	pop	r28
     6b2:	df 91       	pop	r29
     6b4:	08 95       	ret

000006b6 <set_6C>:

void set_6C (void)
{ PORTJ = PORTJ | 0x04; }
     6b6:	df 93       	push	r29
     6b8:	cf 93       	push	r28
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	a5 e0       	ldi	r26, 0x05	; 5
     6c0:	b1 e0       	ldi	r27, 0x01	; 1
     6c2:	e5 e0       	ldi	r30, 0x05	; 5
     6c4:	f1 e0       	ldi	r31, 0x01	; 1
     6c6:	80 81       	ld	r24, Z
     6c8:	84 60       	ori	r24, 0x04	; 4
     6ca:	8c 93       	st	X, r24
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	08 95       	ret

000006d2 <reset_tilt_servo_pod>:

void reset_tilt_servo_pod (void)
{ PORTB = PORTB & 0xDF; }
     6d2:	df 93       	push	r29
     6d4:	cf 93       	push	r28
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	a5 e2       	ldi	r26, 0x25	; 37
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	e5 e2       	ldi	r30, 0x25	; 37
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	8f 7d       	andi	r24, 0xDF	; 223
     6e6:	8c 93       	st	X, r24
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	08 95       	ret

000006ee <set_tilt_servo_pod>:

void set_tilt_servo_pod  (void)
{ PORTB = PORTB | 0x20; }
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	a5 e2       	ldi	r26, 0x25	; 37
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e5 e2       	ldi	r30, 0x25	; 37
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	80 62       	ori	r24, 0x20	; 32
     702:	8c 93       	st	X, r24
     704:	cf 91       	pop	r28
     706:	df 91       	pop	r29
     708:	08 95       	ret

0000070a <reset_pan_servo_pod>:

void reset_pan_servo_pod  (void)
{ PORTB = PORTB & 0xBF; }
     70a:	df 93       	push	r29
     70c:	cf 93       	push	r28
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	a5 e2       	ldi	r26, 0x25	; 37
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	e5 e2       	ldi	r30, 0x25	; 37
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	8f 7b       	andi	r24, 0xBF	; 191
     71e:	8c 93       	st	X, r24
     720:	cf 91       	pop	r28
     722:	df 91       	pop	r29
     724:	08 95       	ret

00000726 <set_pan_servo_pod>:

void set_pan_servo_pod  (void)
{ PORTB = PORTB | 0x40; }
     726:	df 93       	push	r29
     728:	cf 93       	push	r28
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	a5 e2       	ldi	r26, 0x25	; 37
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	e5 e2       	ldi	r30, 0x25	; 37
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	80 64       	ori	r24, 0x40	; 64
     73a:	8c 93       	st	X, r24
     73c:	cf 91       	pop	r28
     73e:	df 91       	pop	r29
     740:	08 95       	ret

00000742 <__vector_17>:
//--------------------------------------------------------------------------------
// timer1 comparatorA match with timer register ISR,
// This ISR used for reset A-joints of individual arm and tilt servo pod 
//--------------------------------------------------------------------------------
ISR(TIMER1_COMPA_vect)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	00 90 5b 00 	lds	r0, 0x005B
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	2f 93       	push	r18
     754:	3f 93       	push	r19
     756:	4f 93       	push	r20
     758:	5f 93       	push	r21
     75a:	6f 93       	push	r22
     75c:	7f 93       	push	r23
     75e:	8f 93       	push	r24
     760:	9f 93       	push	r25
     762:	af 93       	push	r26
     764:	bf 93       	push	r27
     766:	ef 93       	push	r30
     768:	ff 93       	push	r31
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
 //compare occured TCNT1=OCR1A
 if (arm_number == 0) { reset_1A(); }
     772:	80 91 0c 03 	lds	r24, 0x030C
     776:	88 23       	and	r24, r24
     778:	11 f4       	brne	.+4      	; 0x77e <__vector_17+0x3c>
     77a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <reset_1A>
 if (arm_number == 1) { reset_2A(); }
     77e:	80 91 0c 03 	lds	r24, 0x030C
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	11 f4       	brne	.+4      	; 0x78a <__vector_17+0x48>
     786:	0e 94 c5 01 	call	0x38a	; 0x38a <reset_2A>
 if (arm_number == 2) { reset_3A(); }
     78a:	80 91 0c 03 	lds	r24, 0x030C
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	11 f4       	brne	.+4      	; 0x796 <__vector_17+0x54>
     792:	0e 94 19 02 	call	0x432	; 0x432 <reset_3A>
 if (arm_number == 3) { reset_4A(); }
     796:	80 91 0c 03 	lds	r24, 0x030C
     79a:	83 30       	cpi	r24, 0x03	; 3
     79c:	11 f4       	brne	.+4      	; 0x7a2 <__vector_17+0x60>
     79e:	0e 94 6d 02 	call	0x4da	; 0x4da <reset_4A>
 if (arm_number == 4) { reset_5A(); }
     7a2:	80 91 0c 03 	lds	r24, 0x030C
     7a6:	84 30       	cpi	r24, 0x04	; 4
     7a8:	11 f4       	brne	.+4      	; 0x7ae <__vector_17+0x6c>
     7aa:	0e 94 c1 02 	call	0x582	; 0x582 <reset_5A>
 if (arm_number == 5) { reset_6A(); }
     7ae:	80 91 0c 03 	lds	r24, 0x030C
     7b2:	85 30       	cpi	r24, 0x05	; 5
     7b4:	11 f4       	brne	.+4      	; 0x7ba <__vector_17+0x78>
     7b6:	0e 94 15 03 	call	0x62a	; 0x62a <reset_6A>
 if (arm_number == 6) { reset_tilt_servo_pod(); }
     7ba:	80 91 0c 03 	lds	r24, 0x030C
     7be:	86 30       	cpi	r24, 0x06	; 6
     7c0:	11 f4       	brne	.+4      	; 0x7c6 <__vector_17+0x84>
     7c2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <reset_tilt_servo_pod>
}
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	bf 91       	pop	r27
     7d0:	af 91       	pop	r26
     7d2:	9f 91       	pop	r25
     7d4:	8f 91       	pop	r24
     7d6:	7f 91       	pop	r23
     7d8:	6f 91       	pop	r22
     7da:	5f 91       	pop	r21
     7dc:	4f 91       	pop	r20
     7de:	3f 91       	pop	r19
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	00 92 5b 00 	sts	0x005B, r0
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <__vector_18>:
//--------------------------------------------------------------------------------
// timer1 comparatorB match with timer register ISR,
// This ISR used for reset B-joints of individual arm and pan servo pod 
//--------------------------------------------------------------------------------
ISR(TIMER1_COMPB_vect)
{
     7f2:	1f 92       	push	r1
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	0f 92       	push	r0
     7fa:	00 90 5b 00 	lds	r0, 0x005B
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	2f 93       	push	r18
     804:	3f 93       	push	r19
     806:	4f 93       	push	r20
     808:	5f 93       	push	r21
     80a:	6f 93       	push	r22
     80c:	7f 93       	push	r23
     80e:	8f 93       	push	r24
     810:	9f 93       	push	r25
     812:	af 93       	push	r26
     814:	bf 93       	push	r27
     816:	ef 93       	push	r30
     818:	ff 93       	push	r31
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
 //compare occured TCNT1=OCR1B
 if (arm_number == 0) { reset_1B(); }
     822:	80 91 0c 03 	lds	r24, 0x030C
     826:	88 23       	and	r24, r24
     828:	11 f4       	brne	.+4      	; 0x82e <__vector_18+0x3c>
     82a:	0e 94 8d 01 	call	0x31a	; 0x31a <reset_1B>
 if (arm_number == 1) { reset_2B(); }
     82e:	80 91 0c 03 	lds	r24, 0x030C
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	11 f4       	brne	.+4      	; 0x83a <__vector_18+0x48>
     836:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <reset_2B>
 if (arm_number == 2) { reset_3B(); }
     83a:	80 91 0c 03 	lds	r24, 0x030C
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	11 f4       	brne	.+4      	; 0x846 <__vector_18+0x54>
     842:	0e 94 35 02 	call	0x46a	; 0x46a <reset_3B>
 if (arm_number == 3) { reset_4B(); }
     846:	80 91 0c 03 	lds	r24, 0x030C
     84a:	83 30       	cpi	r24, 0x03	; 3
     84c:	11 f4       	brne	.+4      	; 0x852 <__vector_18+0x60>
     84e:	0e 94 89 02 	call	0x512	; 0x512 <reset_4B>
 if (arm_number == 4) { reset_5B(); }
     852:	80 91 0c 03 	lds	r24, 0x030C
     856:	84 30       	cpi	r24, 0x04	; 4
     858:	11 f4       	brne	.+4      	; 0x85e <__vector_18+0x6c>
     85a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <reset_5B>
 if (arm_number == 5) { reset_6B(); }
     85e:	80 91 0c 03 	lds	r24, 0x030C
     862:	85 30       	cpi	r24, 0x05	; 5
     864:	11 f4       	brne	.+4      	; 0x86a <__vector_18+0x78>
     866:	0e 94 31 03 	call	0x662	; 0x662 <reset_6B>
 if (arm_number == 6) { reset_pan_servo_pod(); }
     86a:	80 91 0c 03 	lds	r24, 0x030C
     86e:	86 30       	cpi	r24, 0x06	; 6
     870:	11 f4       	brne	.+4      	; 0x876 <__vector_18+0x84>
     872:	0e 94 85 03 	call	0x70a	; 0x70a <reset_pan_servo_pod>
}
     876:	cf 91       	pop	r28
     878:	df 91       	pop	r29
     87a:	ff 91       	pop	r31
     87c:	ef 91       	pop	r30
     87e:	bf 91       	pop	r27
     880:	af 91       	pop	r26
     882:	9f 91       	pop	r25
     884:	8f 91       	pop	r24
     886:	7f 91       	pop	r23
     888:	6f 91       	pop	r22
     88a:	5f 91       	pop	r21
     88c:	4f 91       	pop	r20
     88e:	3f 91       	pop	r19
     890:	2f 91       	pop	r18
     892:	0f 90       	pop	r0
     894:	00 92 5b 00 	sts	0x005B, r0
     898:	0f 90       	pop	r0
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	0f 90       	pop	r0
     89e:	1f 90       	pop	r1
     8a0:	18 95       	reti

000008a2 <__vector_19>:
//--------------------------------------------------------------------------------
// timer1 comparatorA match with timer register ISR,
// This ISR used for reset C-joints of indivisual arm. 
//--------------------------------------------------------------------------------
ISR(TIMER1_COMPC_vect)
{
     8a2:	1f 92       	push	r1
     8a4:	0f 92       	push	r0
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	0f 92       	push	r0
     8aa:	00 90 5b 00 	lds	r0, 0x005B
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	7f 93       	push	r23
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	af 93       	push	r26
     8c4:	bf 93       	push	r27
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
     8ca:	df 93       	push	r29
     8cc:	cf 93       	push	r28
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
 //compare occured TCNT1=OCR1c
 if (arm_number == 0) { reset_1C(); }
     8d2:	80 91 0c 03 	lds	r24, 0x030C
     8d6:	88 23       	and	r24, r24
     8d8:	11 f4       	brne	.+4      	; 0x8de <__vector_19+0x3c>
     8da:	0e 94 a9 01 	call	0x352	; 0x352 <reset_1C>
 if (arm_number == 1) { reset_2C(); }
     8de:	80 91 0c 03 	lds	r24, 0x030C
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	11 f4       	brne	.+4      	; 0x8ea <__vector_19+0x48>
     8e6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <reset_2C>
 if (arm_number == 2) { reset_3C(); }
     8ea:	80 91 0c 03 	lds	r24, 0x030C
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <__vector_19+0x54>
     8f2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <reset_3C>
 if (arm_number == 3) { reset_4C(); }
     8f6:	80 91 0c 03 	lds	r24, 0x030C
     8fa:	83 30       	cpi	r24, 0x03	; 3
     8fc:	11 f4       	brne	.+4      	; 0x902 <__vector_19+0x60>
     8fe:	0e 94 a5 02 	call	0x54a	; 0x54a <reset_4C>
 if (arm_number == 4) { reset_5C(); }
     902:	80 91 0c 03 	lds	r24, 0x030C
     906:	84 30       	cpi	r24, 0x04	; 4
     908:	11 f4       	brne	.+4      	; 0x90e <__vector_19+0x6c>
     90a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <reset_5C>
 if (arm_number == 5) { reset_6C(); }
     90e:	80 91 0c 03 	lds	r24, 0x030C
     912:	85 30       	cpi	r24, 0x05	; 5
     914:	11 f4       	brne	.+4      	; 0x91a <__vector_19+0x78>
     916:	0e 94 4d 03 	call	0x69a	; 0x69a <reset_6C>
 if (arm_number == 6) { ; }
}
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	00 92 5b 00 	sts	0x005B, r0
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0f 90       	pop	r0
     942:	1f 90       	pop	r1
     944:	18 95       	reti

00000946 <__vector_20>:
// This ISR can be used to load the PWM value. Here each Servo motor is
// move between 0 to 180 degrees proportional to the pulse ON time between 
// 0.5 to 2.2 ms with the frequency between 40 to 60 Hz. ie. 400Hz/8 = 50Hz
//--------------------------------------------------------------------------------
ISR(TIMER1_OVF_vect)
{
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	00 90 5b 00 	lds	r0, 0x005B
     952:	0f 92       	push	r0
     954:	11 24       	eor	r1, r1
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
     96e:	df 93       	push	r29
     970:	cf 93       	push	r28
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
 //TIMER1 has overflowed
 TCNT1H = 0x70; //reload counter high value
     976:	e5 e8       	ldi	r30, 0x85	; 133
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 e7       	ldi	r24, 0x70	; 112
     97c:	80 83       	st	Z, r24
 TCNT1L = 0x01; //reload counter low value
     97e:	e4 e8       	ldi	r30, 0x84	; 132
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 83       	st	Z, r24
 arm_number ++;
     986:	80 91 0c 03 	lds	r24, 0x030C
     98a:	8f 5f       	subi	r24, 0xFF	; 255
     98c:	80 93 0c 03 	sts	0x030C, r24

 if (arm_number>7)
     990:	80 91 0c 03 	lds	r24, 0x030C
     994:	88 30       	cpi	r24, 0x08	; 8
     996:	10 f0       	brcs	.+4      	; 0x99c <__vector_20+0x56>
 {
  	arm_number = 0;
     998:	10 92 0c 03 	sts	0x030C, r1
 }
   
 if (arm_number == 0)
     99c:	80 91 0c 03 	lds	r24, 0x030C
     9a0:	88 23       	and	r24, r24
     9a2:	21 f5       	brne	.+72     	; 0x9ec <__vector_20+0xa6>
 {
  set_1A(); 
     9a4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <set_1A>
  set_1B(); 
     9a8:	0e 94 9b 01 	call	0x336	; 0x336 <set_1B>
  set_1C();
     9ac:	0e 94 b7 01 	call	0x36e	; 0x36e <set_1C>
  OCR1AH = angle_upper_byte_1A;
     9b0:	e9 e8       	ldi	r30, 0x89	; 137
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 91 21 03 	lds	r24, 0x0321
     9b8:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_1A;
     9ba:	e8 e8       	ldi	r30, 0x88	; 136
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 91 37 03 	lds	r24, 0x0337
     9c2:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_1B;
     9c4:	eb e8       	ldi	r30, 0x8B	; 139
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 91 3f 03 	lds	r24, 0x033F
     9cc:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_1B;
     9ce:	ea e8       	ldi	r30, 0x8A	; 138
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 91 32 03 	lds	r24, 0x0332
     9d6:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_1C;
     9d8:	ed e8       	ldi	r30, 0x8D	; 141
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 91 3a 03 	lds	r24, 0x033A
     9e0:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_1C;
     9e2:	ec e8       	ldi	r30, 0x8C	; 140
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 91 43 03 	lds	r24, 0x0343
     9ea:	80 83       	st	Z, r24
 }
 
 if (arm_number == 1)
     9ec:	80 91 0c 03 	lds	r24, 0x030C
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	21 f5       	brne	.+72     	; 0xa3c <__vector_20+0xf6>
 {
  set_2A(); 
     9f4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <set_2A>
  set_2B(); 
     9f8:	0e 94 ef 01 	call	0x3de	; 0x3de <set_2B>
  set_2C();
     9fc:	0e 94 0b 02 	call	0x416	; 0x416 <set_2C>
  OCR1AH = angle_upper_byte_2A;
     a00:	e9 e8       	ldi	r30, 0x89	; 137
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 91 3e 03 	lds	r24, 0x033E
     a08:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_2A;
     a0a:	e8 e8       	ldi	r30, 0x88	; 136
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 91 1d 03 	lds	r24, 0x031D
     a12:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_2B;
     a14:	eb e8       	ldi	r30, 0x8B	; 139
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 91 1f 03 	lds	r24, 0x031F
     a1c:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_2B;
     a1e:	ea e8       	ldi	r30, 0x8A	; 138
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 91 33 03 	lds	r24, 0x0333
     a26:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_2C;
     a28:	ed e8       	ldi	r30, 0x8D	; 141
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 91 38 03 	lds	r24, 0x0338
     a30:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_2C;
     a32:	ec e8       	ldi	r30, 0x8C	; 140
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 91 45 03 	lds	r24, 0x0345
     a3a:	80 83       	st	Z, r24
 }
 
 if (arm_number == 2)
     a3c:	80 91 0c 03 	lds	r24, 0x030C
     a40:	82 30       	cpi	r24, 0x02	; 2
     a42:	21 f5       	brne	.+72     	; 0xa8c <__vector_20+0x146>
 {
  set_3A(); 
     a44:	0e 94 27 02 	call	0x44e	; 0x44e <set_3A>
  set_3B(); 
     a48:	0e 94 43 02 	call	0x486	; 0x486 <set_3B>
  set_3C();
     a4c:	0e 94 5f 02 	call	0x4be	; 0x4be <set_3C>
  OCR1AH = angle_upper_byte_3A;
     a50:	e9 e8       	ldi	r30, 0x89	; 137
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 91 3d 03 	lds	r24, 0x033D
     a58:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_3A;
     a5a:	e8 e8       	ldi	r30, 0x88	; 136
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 91 2e 03 	lds	r24, 0x032E
     a62:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_3B;
     a64:	eb e8       	ldi	r30, 0x8B	; 139
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 91 20 03 	lds	r24, 0x0320
     a6c:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_3B;
     a6e:	ea e8       	ldi	r30, 0x8A	; 138
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 91 1c 03 	lds	r24, 0x031C
     a76:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_3C;
     a78:	ed e8       	ldi	r30, 0x8D	; 141
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 91 22 03 	lds	r24, 0x0322
     a80:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_3C;
     a82:	ec e8       	ldi	r30, 0x8C	; 140
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 91 47 03 	lds	r24, 0x0347
     a8a:	80 83       	st	Z, r24
 }
 
 if (arm_number == 3)
     a8c:	80 91 0c 03 	lds	r24, 0x030C
     a90:	83 30       	cpi	r24, 0x03	; 3
     a92:	21 f5       	brne	.+72     	; 0xadc <__vector_20+0x196>
 {
  set_4A(); 
     a94:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <set_4A>
  set_4B(); 
     a98:	0e 94 97 02 	call	0x52e	; 0x52e <set_4B>
  set_4C();
     a9c:	0e 94 b3 02 	call	0x566	; 0x566 <set_4C>
  OCR1AH = angle_upper_byte_4A;
     aa0:	e9 e8       	ldi	r30, 0x89	; 137
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 91 40 03 	lds	r24, 0x0340
     aa8:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_4A;
     aaa:	e8 e8       	ldi	r30, 0x88	; 136
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 91 30 03 	lds	r24, 0x0330
     ab2:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_4B;
     ab4:	eb e8       	ldi	r30, 0x8B	; 139
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 91 3b 03 	lds	r24, 0x033B
     abc:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_4B;
     abe:	ea e8       	ldi	r30, 0x8A	; 138
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 91 46 03 	lds	r24, 0x0346
     ac6:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_4C;
     ac8:	ed e8       	ldi	r30, 0x8D	; 141
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 91 44 03 	lds	r24, 0x0344
     ad0:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_4C;
     ad2:	ec e8       	ldi	r30, 0x8C	; 140
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 91 39 03 	lds	r24, 0x0339
     ada:	80 83       	st	Z, r24
 }
 
 if (arm_number == 4)
     adc:	80 91 0c 03 	lds	r24, 0x030C
     ae0:	84 30       	cpi	r24, 0x04	; 4
     ae2:	21 f5       	brne	.+72     	; 0xb2c <__vector_20+0x1e6>
 {
  set_5A(); 
     ae4:	0e 94 cf 02 	call	0x59e	; 0x59e <set_5A>
  set_5B(); 
     ae8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <set_5B>
  set_5C();
     aec:	0e 94 07 03 	call	0x60e	; 0x60e <set_5C>
  OCR1AH = angle_upper_byte_5A;
     af0:	e9 e8       	ldi	r30, 0x89	; 137
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 91 1e 03 	lds	r24, 0x031E
     af8:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_5A;
     afa:	e8 e8       	ldi	r30, 0x88	; 136
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 91 42 03 	lds	r24, 0x0342
     b02:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_5B;
     b04:	eb e8       	ldi	r30, 0x8B	; 139
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 91 24 03 	lds	r24, 0x0324
     b0c:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_5B;
     b0e:	ea e8       	ldi	r30, 0x8A	; 138
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 91 2f 03 	lds	r24, 0x032F
     b16:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_5C;
     b18:	ed e8       	ldi	r30, 0x8D	; 141
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 91 3c 03 	lds	r24, 0x033C
     b20:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_5C;
     b22:	ec e8       	ldi	r30, 0x8C	; 140
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 91 36 03 	lds	r24, 0x0336
     b2a:	80 83       	st	Z, r24
 }
 
 if (arm_number == 5)
     b2c:	80 91 0c 03 	lds	r24, 0x030C
     b30:	85 30       	cpi	r24, 0x05	; 5
     b32:	21 f5       	brne	.+72     	; 0xb7c <__vector_20+0x236>
 {
  set_6A(); 
     b34:	0e 94 23 03 	call	0x646	; 0x646 <set_6A>
  set_6B(); 
     b38:	0e 94 3f 03 	call	0x67e	; 0x67e <set_6B>
  set_6C();
     b3c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <set_6C>
  OCR1AH = angle_upper_byte_6A;
     b40:	e9 e8       	ldi	r30, 0x89	; 137
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 91 34 03 	lds	r24, 0x0334
     b48:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_6A;
     b4a:	e8 e8       	ldi	r30, 0x88	; 136
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 91 35 03 	lds	r24, 0x0335
     b52:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_6B;
     b54:	eb e8       	ldi	r30, 0x8B	; 139
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 91 23 03 	lds	r24, 0x0323
     b5c:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_6B;
     b5e:	ea e8       	ldi	r30, 0x8A	; 138
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 91 25 03 	lds	r24, 0x0325
     b66:	80 83       	st	Z, r24
  OCR1CH = angle_upper_byte_6C;
     b68:	ed e8       	ldi	r30, 0x8D	; 141
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 91 31 03 	lds	r24, 0x0331
     b70:	80 83       	st	Z, r24
  OCR1CL = angle_lower_byte_6C;
     b72:	ec e8       	ldi	r30, 0x8C	; 140
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 91 41 03 	lds	r24, 0x0341
     b7a:	80 83       	st	Z, r24
 }

 if (arm_number == 6)
     b7c:	80 91 0c 03 	lds	r24, 0x030C
     b80:	86 30       	cpi	r24, 0x06	; 6
     b82:	c1 f4       	brne	.+48     	; 0xbb4 <__vector_20+0x26e>
 {
  set_tilt_servo_pod();  
     b84:	0e 94 77 03 	call	0x6ee	; 0x6ee <set_tilt_servo_pod>
  set_pan_servo_pod();
     b88:	0e 94 93 03 	call	0x726	; 0x726 <set_pan_servo_pod>
  OCR1AH = angle_upper_byte_tilt_servo_pod;
     b8c:	e9 e8       	ldi	r30, 0x89	; 137
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 91 11 03 	lds	r24, 0x0311
     b94:	80 83       	st	Z, r24
  OCR1AL = angle_lower_byte_tilt_servo_pod;
     b96:	e8 e8       	ldi	r30, 0x88	; 136
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 91 01 02 	lds	r24, 0x0201
     b9e:	80 83       	st	Z, r24
  OCR1BH = angle_upper_byte_pan_servo_pod;
     ba0:	eb e8       	ldi	r30, 0x8B	; 139
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 91 10 03 	lds	r24, 0x0310
     ba8:	80 83       	st	Z, r24
  OCR1BL = angle_lower_byte_pan_servo_pod;
     baa:	ea e8       	ldi	r30, 0x8A	; 138
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 91 00 02 	lds	r24, 0x0200
     bb2:	80 83       	st	Z, r24
 }

 //serial communication related code
 serial_communication_interval ++;
     bb4:	80 91 13 03 	lds	r24, 0x0313
     bb8:	90 91 14 03 	lds	r25, 0x0314
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	90 93 14 03 	sts	0x0314, r25
     bc2:	80 93 13 03 	sts	0x0313, r24
 if (serial_communication_interval > 80) //gives time interval of 80*2.5ms = 200ms
     bc6:	80 91 13 03 	lds	r24, 0x0313
     bca:	90 91 14 03 	lds	r25, 0x0314
     bce:	81 35       	cpi	r24, 0x51	; 81
     bd0:	91 05       	cpc	r25, r1
     bd2:	38 f0       	brcs	.+14     	; 0xbe2 <__vector_20+0x29c>
 {
  serial_communication_interval = 0;
     bd4:	10 92 14 03 	sts	0x0314, r1
     bd8:	10 92 13 03 	sts	0x0313, r1
  flag1 = 1; 
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 15 03 	sts	0x0315, r24
 }

}
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	ff 91       	pop	r31
     be8:	ef 91       	pop	r30
     bea:	bf 91       	pop	r27
     bec:	af 91       	pop	r26
     bee:	9f 91       	pop	r25
     bf0:	8f 91       	pop	r24
     bf2:	7f 91       	pop	r23
     bf4:	6f 91       	pop	r22
     bf6:	5f 91       	pop	r21
     bf8:	4f 91       	pop	r20
     bfa:	3f 91       	pop	r19
     bfc:	2f 91       	pop	r18
     bfe:	0f 90       	pop	r0
     c00:	00 92 5b 00 	sts	0x005B, r0
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <angle_value_calculation>:

//--------------------------------------------------------------------------------
// function for angular movement calculation
//--------------------------------------------------------------------------------
void angle_value_calculation (void)
{
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	00 d0       	rcall	.+0      	; 0xc14 <angle_value_calculation+0x6>
     c14:	0f 92       	push	r0
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
 unsigned int angle_value = 0;
     c1a:	1c 82       	std	Y+4, r1	; 0x04
     c1c:	1b 82       	std	Y+3, r1	; 0x03
 unsigned int temp = 0;
     c1e:	1a 82       	std	Y+2, r1	; 0x02
     c20:	19 82       	std	Y+1, r1	; 0x01
 if (degree > 180)
     c22:	80 91 0f 03 	lds	r24, 0x030F
     c26:	85 3b       	cpi	r24, 0xB5	; 181
     c28:	18 f0       	brcs	.+6      	; 0xc30 <angle_value_calculation+0x22>
 degree = 180;                          // limiting the scope of the servo rotation
     c2a:	84 eb       	ldi	r24, 0xB4	; 180
     c2c:	80 93 0f 03 	sts	0x030F, r24
 
 angle_value = 0x8FAE + (139 * (unsigned char) degree); //actual constant is 139.4
     c30:	80 91 0f 03 	lds	r24, 0x030F
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	8b e8       	ldi	r24, 0x8B	; 139
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	ac 01       	movw	r20, r24
     c3e:	24 9f       	mul	r18, r20
     c40:	c0 01       	movw	r24, r0
     c42:	25 9f       	mul	r18, r21
     c44:	90 0d       	add	r25, r0
     c46:	34 9f       	mul	r19, r20
     c48:	90 0d       	add	r25, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	82 55       	subi	r24, 0x52	; 82
     c4e:	90 47       	sbci	r25, 0x70	; 112
     c50:	9c 83       	std	Y+4, r25	; 0x04
     c52:	8b 83       	std	Y+3, r24	; 0x03
 angle_lower_byte = (unsigned char) angle_value;        //separating the lower byte
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	80 93 0e 03 	sts	0x030E, r24
 
 temp = angle_value >> 8;
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	89 2f       	mov	r24, r25
     c60:	99 27       	eor	r25, r25
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
 angle_upper_byte = (unsigned char) temp;               //separating the upper byte
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	80 93 0d 03 	sts	0x030D, r24
}
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <angle_1A>:
//--------------------------------------------------------------------------------
// Function for individual 1A,1B.........6C joints angle and servo pods calculation
// call & store into respective variables. 
//--------------------------------------------------------------------------------
void angle_1A (unsigned char angle)                // joint-A of arm 1
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	0f 92       	push	r0
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     c8c:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_1A = angle_upper_byte;
     c90:	80 91 0d 03 	lds	r24, 0x030D
     c94:	80 93 21 03 	sts	0x0321, r24
 angle_lower_byte_1A = angle_lower_byte;
     c98:	80 91 0e 03 	lds	r24, 0x030E
     c9c:	80 93 37 03 	sts	0x0337, r24
}
     ca0:	0f 90       	pop	r0
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <angle_1B>:

void angle_1B (unsigned char angle)                // joint-B of arm 1
{
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	0f 92       	push	r0
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     cba:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_1B = angle_upper_byte;
     cbe:	80 91 0d 03 	lds	r24, 0x030D
     cc2:	80 93 3f 03 	sts	0x033F, r24
 angle_lower_byte_1B = angle_lower_byte;
     cc6:	80 91 0e 03 	lds	r24, 0x030E
     cca:	80 93 32 03 	sts	0x0332, r24
}
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <angle_1C>:

void angle_1C (unsigned char angle)                // joint-C of arm 1
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     ce8:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_1C = angle_upper_byte;
     cec:	80 91 0d 03 	lds	r24, 0x030D
     cf0:	80 93 3a 03 	sts	0x033A, r24
 angle_lower_byte_1C = angle_lower_byte;
     cf4:	80 91 0e 03 	lds	r24, 0x030E
     cf8:	80 93 43 03 	sts	0x0343, r24
}
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <angle_2A>:

void angle_2A (unsigned char angle)                // joint-A of arm 2
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	0f 92       	push	r0
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     d16:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_2A = angle_upper_byte;
     d1a:	80 91 0d 03 	lds	r24, 0x030D
     d1e:	80 93 3e 03 	sts	0x033E, r24
 angle_lower_byte_2A = angle_lower_byte;
     d22:	80 91 0e 03 	lds	r24, 0x030E
     d26:	80 93 1d 03 	sts	0x031D, r24
}
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <angle_2B>:

void angle_2B (unsigned char angle)                // joint-B of arm 2
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	0f 92       	push	r0
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     d44:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_2B = angle_upper_byte;
     d48:	80 91 0d 03 	lds	r24, 0x030D
     d4c:	80 93 1f 03 	sts	0x031F, r24
 angle_lower_byte_2B = angle_lower_byte;
     d50:	80 91 0e 03 	lds	r24, 0x030E
     d54:	80 93 33 03 	sts	0x0333, r24
}
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <angle_2C>:

void angle_2C (unsigned char angle)                // joint-C of arm 2
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	0f 92       	push	r0
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     d72:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_2C = angle_upper_byte;
     d76:	80 91 0d 03 	lds	r24, 0x030D
     d7a:	80 93 38 03 	sts	0x0338, r24
 angle_lower_byte_2C = angle_lower_byte;
     d7e:	80 91 0e 03 	lds	r24, 0x030E
     d82:	80 93 45 03 	sts	0x0345, r24
}
     d86:	0f 90       	pop	r0
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <angle_3A>:

void angle_3A (unsigned char angle)                // joint-A of arm 3
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	0f 92       	push	r0
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     da0:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_3A = angle_upper_byte;
     da4:	80 91 0d 03 	lds	r24, 0x030D
     da8:	80 93 3d 03 	sts	0x033D, r24
 angle_lower_byte_3A = angle_lower_byte;
     dac:	80 91 0e 03 	lds	r24, 0x030E
     db0:	80 93 2e 03 	sts	0x032E, r24
}
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <angle_3B>:

void angle_3B (unsigned char angle)                // joint-B of arm 3
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     dce:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_3B = angle_upper_byte;
     dd2:	80 91 0d 03 	lds	r24, 0x030D
     dd6:	80 93 20 03 	sts	0x0320, r24
 angle_lower_byte_3B = angle_lower_byte;
     dda:	80 91 0e 03 	lds	r24, 0x030E
     dde:	80 93 1c 03 	sts	0x031C, r24
}
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <angle_3C>:

void angle_3C (unsigned char angle)                // joint-C of arm 3
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	0f 92       	push	r0
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     dfc:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_3C = angle_upper_byte;
     e00:	80 91 0d 03 	lds	r24, 0x030D
     e04:	80 93 22 03 	sts	0x0322, r24
 angle_lower_byte_3C = angle_lower_byte;
     e08:	80 91 0e 03 	lds	r24, 0x030E
     e0c:	80 93 47 03 	sts	0x0347, r24
}
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <angle_4A>:

void angle_4A (unsigned char angle)                // joint-A of arm 4
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	0f 92       	push	r0
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     e2a:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_4A = angle_upper_byte;
     e2e:	80 91 0d 03 	lds	r24, 0x030D
     e32:	80 93 40 03 	sts	0x0340, r24
 angle_lower_byte_4A = angle_lower_byte;
     e36:	80 91 0e 03 	lds	r24, 0x030E
     e3a:	80 93 30 03 	sts	0x0330, r24
}
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <angle_4B>:

void angle_4B (unsigned char angle)                // joint-B of arm 4
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	0f 92       	push	r0
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     e58:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_4B = angle_upper_byte;
     e5c:	80 91 0d 03 	lds	r24, 0x030D
     e60:	80 93 3b 03 	sts	0x033B, r24
 angle_lower_byte_4B = angle_lower_byte;
     e64:	80 91 0e 03 	lds	r24, 0x030E
     e68:	80 93 46 03 	sts	0x0346, r24
}
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <angle_4C>:

void angle_4C (unsigned char angle)                // joint-C of arm 4
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	0f 92       	push	r0
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     e86:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_4C = angle_upper_byte;
     e8a:	80 91 0d 03 	lds	r24, 0x030D
     e8e:	80 93 44 03 	sts	0x0344, r24
 angle_lower_byte_4C = angle_lower_byte;
     e92:	80 91 0e 03 	lds	r24, 0x030E
     e96:	80 93 39 03 	sts	0x0339, r24
}
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <angle_5A>:

void angle_5A (unsigned char angle)                // joint-A of arm 5
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     eb4:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_5A = angle_upper_byte;
     eb8:	80 91 0d 03 	lds	r24, 0x030D
     ebc:	80 93 1e 03 	sts	0x031E, r24
 angle_lower_byte_5A = angle_lower_byte;
     ec0:	80 91 0e 03 	lds	r24, 0x030E
     ec4:	80 93 42 03 	sts	0x0342, r24
}
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <angle_5B>:

void angle_5B (unsigned char angle)                // joint-B of arm 5
{
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     ee2:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_5B = angle_upper_byte;
     ee6:	80 91 0d 03 	lds	r24, 0x030D
     eea:	80 93 24 03 	sts	0x0324, r24
 angle_lower_byte_5B = angle_lower_byte;
     eee:	80 91 0e 03 	lds	r24, 0x030E
     ef2:	80 93 2f 03 	sts	0x032F, r24
}
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <angle_5C>:

void angle_5C (unsigned char angle)                // joint-C of arm 5
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     f10:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_5C = angle_upper_byte;
     f14:	80 91 0d 03 	lds	r24, 0x030D
     f18:	80 93 3c 03 	sts	0x033C, r24
 angle_lower_byte_5C = angle_lower_byte;
     f1c:	80 91 0e 03 	lds	r24, 0x030E
     f20:	80 93 36 03 	sts	0x0336, r24
}
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <angle_6A>:

void angle_6A (unsigned char angle)                // joint-A of arm 6
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	0f 92       	push	r0
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     f3e:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_6A = angle_upper_byte;
     f42:	80 91 0d 03 	lds	r24, 0x030D
     f46:	80 93 34 03 	sts	0x0334, r24
 angle_lower_byte_6A = angle_lower_byte;
     f4a:	80 91 0e 03 	lds	r24, 0x030E
     f4e:	80 93 35 03 	sts	0x0335, r24
}
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <angle_6B>:

void angle_6B (unsigned char angle)                // joint-B of arm 6
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     f6c:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_6B = angle_upper_byte;
     f70:	80 91 0d 03 	lds	r24, 0x030D
     f74:	80 93 23 03 	sts	0x0323, r24
 angle_lower_byte_6B = angle_lower_byte;
     f78:	80 91 0e 03 	lds	r24, 0x030E
     f7c:	80 93 25 03 	sts	0x0325, r24
}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <angle_6C>:

void angle_6C (unsigned char angle)                // joint-C of arm 6
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	89 83       	std	Y+1, r24	; 0x01
 degree = angle;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
     f9a:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_6C = angle_upper_byte;
     f9e:	80 91 0d 03 	lds	r24, 0x030D
     fa2:	80 93 31 03 	sts	0x0331, r24
 angle_lower_byte_6C = angle_lower_byte;
     fa6:	80 91 0e 03 	lds	r24, 0x030E
     faa:	80 93 41 03 	sts	0x0341, r24
}
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <angle_tilt_servo_pod>:

void angle_tilt_servo_pod (unsigned char angle)    // tilt servo pod
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	89 83       	std	Y+1, r24	; 0x01
 degree = 221 - angle;                             // synchronies with remote joystick movenent
     fc2:	9d ed       	ldi	r25, 0xDD	; 221
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	29 2f       	mov	r18, r25
     fc8:	28 1b       	sub	r18, r24
     fca:	82 2f       	mov	r24, r18
     fcc:	80 93 0f 03 	sts	0x030F, r24
 if(degree>221){ degree = 221;}
     fd0:	80 91 0f 03 	lds	r24, 0x030F
     fd4:	8e 3d       	cpi	r24, 0xDE	; 222
     fd6:	18 f0       	brcs	.+6      	; 0xfde <angle_tilt_servo_pod+0x28>
     fd8:	8d ed       	ldi	r24, 0xDD	; 221
     fda:	80 93 0f 03 	sts	0x030F, r24
 degree = (unsigned char)(degree / 1.2);
     fde:	80 91 0f 03 	lds	r24, 0x030F
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	aa 27       	eor	r26, r26
     fe8:	97 fd       	sbrc	r25, 7
     fea:	a0 95       	com	r26
     fec:	ba 2f       	mov	r27, r26
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__floatsisf>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	2a e9       	ldi	r18, 0x9A	; 154
    1000:	39 e9       	ldi	r19, 0x99	; 153
    1002:	49 e9       	ldi	r20, 0x99	; 153
    1004:	5f e3       	ldi	r21, 0x3F	; 63
    1006:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <__divsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
    101e:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_tilt_servo_pod = angle_upper_byte;
    1022:	80 91 0d 03 	lds	r24, 0x030D
    1026:	80 93 11 03 	sts	0x0311, r24
 angle_lower_byte_tilt_servo_pod = angle_lower_byte;
    102a:	80 91 0e 03 	lds	r24, 0x030E
    102e:	80 93 01 02 	sts	0x0201, r24
}
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <angle_pan_servo_pod>:

void angle_pan_servo_pod (unsigned char angle)     // pan servo pod
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	89 83       	std	Y+1, r24	; 0x01
 degree = (unsigned char)(angle / 1.2);
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	aa 27       	eor	r26, r26
    104e:	97 fd       	sbrc	r25, 7
    1050:	a0 95       	com	r26
    1052:	ba 2f       	mov	r27, r26
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 fe 20 	call	0x41fc	; 0x41fc <__floatsisf>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	2a e9       	ldi	r18, 0x9A	; 154
    1066:	39 e9       	ldi	r19, 0x99	; 153
    1068:	49 e9       	ldi	r20, 0x99	; 153
    106a:	5f e3       	ldi	r21, 0x3F	; 63
    106c:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <__divsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	80 93 0f 03 	sts	0x030F, r24
 angle_value_calculation();
    1084:	0e 94 07 06 	call	0xc0e	; 0xc0e <angle_value_calculation>
 angle_upper_byte_pan_servo_pod = angle_upper_byte;
    1088:	80 91 0d 03 	lds	r24, 0x030D
    108c:	80 93 10 03 	sts	0x0310, r24
 angle_lower_byte_pan_servo_pod = angle_lower_byte;
    1090:	80 91 0e 03 	lds	r24, 0x030E
    1094:	80 93 00 02 	sts	0x0200, r24
}
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <robot_arm_calibration>:
//--------------------------------------------------------------------------------
// Call this function to initalise all servo motors in default 90 degrees. 
// Use this function while replacing servo motors of the robot for the calibration.
//--------------------------------------------------------------------------------
void robot_arm_calibration (void)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
angle_1A(90); angle_1B(90); angle_1C(90); angle_2A(90); angle_2B(90); angle_2C(90);
    10a8:	8a e5       	ldi	r24, 0x5A	; 90
    10aa:	0e 94 3d 06 	call	0xc7a	; 0xc7a <angle_1A>
    10ae:	8a e5       	ldi	r24, 0x5A	; 90
    10b0:	0e 94 54 06 	call	0xca8	; 0xca8 <angle_1B>
    10b4:	8a e5       	ldi	r24, 0x5A	; 90
    10b6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <angle_1C>
    10ba:	8a e5       	ldi	r24, 0x5A	; 90
    10bc:	0e 94 82 06 	call	0xd04	; 0xd04 <angle_2A>
    10c0:	8a e5       	ldi	r24, 0x5A	; 90
    10c2:	0e 94 99 06 	call	0xd32	; 0xd32 <angle_2B>
    10c6:	8a e5       	ldi	r24, 0x5A	; 90
    10c8:	0e 94 b0 06 	call	0xd60	; 0xd60 <angle_2C>
angle_3A(90); angle_3B(90); angle_3C(90); angle_4A(90); angle_4B(90); angle_4C(90);
    10cc:	8a e5       	ldi	r24, 0x5A	; 90
    10ce:	0e 94 c7 06 	call	0xd8e	; 0xd8e <angle_3A>
    10d2:	8a e5       	ldi	r24, 0x5A	; 90
    10d4:	0e 94 de 06 	call	0xdbc	; 0xdbc <angle_3B>
    10d8:	8a e5       	ldi	r24, 0x5A	; 90
    10da:	0e 94 f5 06 	call	0xdea	; 0xdea <angle_3C>
    10de:	8a e5       	ldi	r24, 0x5A	; 90
    10e0:	0e 94 0c 07 	call	0xe18	; 0xe18 <angle_4A>
    10e4:	8a e5       	ldi	r24, 0x5A	; 90
    10e6:	0e 94 23 07 	call	0xe46	; 0xe46 <angle_4B>
    10ea:	8a e5       	ldi	r24, 0x5A	; 90
    10ec:	0e 94 3a 07 	call	0xe74	; 0xe74 <angle_4C>
angle_5A(90); angle_5B(90); angle_5C(90); angle_6A(90); angle_6B(90); angle_6C(90);
    10f0:	8a e5       	ldi	r24, 0x5A	; 90
    10f2:	0e 94 51 07 	call	0xea2	; 0xea2 <angle_5A>
    10f6:	8a e5       	ldi	r24, 0x5A	; 90
    10f8:	0e 94 68 07 	call	0xed0	; 0xed0 <angle_5B>
    10fc:	8a e5       	ldi	r24, 0x5A	; 90
    10fe:	0e 94 7f 07 	call	0xefe	; 0xefe <angle_5C>
    1102:	8a e5       	ldi	r24, 0x5A	; 90
    1104:	0e 94 96 07 	call	0xf2c	; 0xf2c <angle_6A>
    1108:	8a e5       	ldi	r24, 0x5A	; 90
    110a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <angle_6B>
    110e:	8a e5       	ldi	r24, 0x5A	; 90
    1110:	0e 94 c4 07 	call	0xf88	; 0xf88 <angle_6C>
}
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <walk_stroke>:
//--------------------------------------------------------------------------------
// function for forward & backward storke, It pushes the robot in forward or backward
// direction depending on the selected direction
//--------------------------------------------------------------------------------
void walk_stroke(void)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
//buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection
//buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection
angle_1A(135); angle_1B(125); angle_1C(90); angle_2A(90); angle_2B(125); angle_2C(90);
    1122:	87 e8       	ldi	r24, 0x87	; 135
    1124:	0e 94 3d 06 	call	0xc7a	; 0xc7a <angle_1A>
    1128:	8d e7       	ldi	r24, 0x7D	; 125
    112a:	0e 94 54 06 	call	0xca8	; 0xca8 <angle_1B>
    112e:	8a e5       	ldi	r24, 0x5A	; 90
    1130:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <angle_1C>
    1134:	8a e5       	ldi	r24, 0x5A	; 90
    1136:	0e 94 82 06 	call	0xd04	; 0xd04 <angle_2A>
    113a:	8d e7       	ldi	r24, 0x7D	; 125
    113c:	0e 94 99 06 	call	0xd32	; 0xd32 <angle_2B>
    1140:	8a e5       	ldi	r24, 0x5A	; 90
    1142:	0e 94 b0 06 	call	0xd60	; 0xd60 <angle_2C>
angle_3A(45); angle_3B(125); angle_3C(90); angle_4A(45); angle_4B(55); angle_4C(90);
    1146:	8d e2       	ldi	r24, 0x2D	; 45
    1148:	0e 94 c7 06 	call	0xd8e	; 0xd8e <angle_3A>
    114c:	8d e7       	ldi	r24, 0x7D	; 125
    114e:	0e 94 de 06 	call	0xdbc	; 0xdbc <angle_3B>
    1152:	8a e5       	ldi	r24, 0x5A	; 90
    1154:	0e 94 f5 06 	call	0xdea	; 0xdea <angle_3C>
    1158:	8d e2       	ldi	r24, 0x2D	; 45
    115a:	0e 94 0c 07 	call	0xe18	; 0xe18 <angle_4A>
    115e:	87 e3       	ldi	r24, 0x37	; 55
    1160:	0e 94 23 07 	call	0xe46	; 0xe46 <angle_4B>
    1164:	8a e5       	ldi	r24, 0x5A	; 90
    1166:	0e 94 3a 07 	call	0xe74	; 0xe74 <angle_4C>
angle_5A(90); angle_5B(55); angle_5C(90); angle_6A(135); angle_6B(55); angle_6C(90);
    116a:	8a e5       	ldi	r24, 0x5A	; 90
    116c:	0e 94 51 07 	call	0xea2	; 0xea2 <angle_5A>
    1170:	87 e3       	ldi	r24, 0x37	; 55
    1172:	0e 94 68 07 	call	0xed0	; 0xed0 <angle_5B>
    1176:	8a e5       	ldi	r24, 0x5A	; 90
    1178:	0e 94 7f 07 	call	0xefe	; 0xefe <angle_5C>
    117c:	87 e8       	ldi	r24, 0x87	; 135
    117e:	0e 94 96 07 	call	0xf2c	; 0xf2c <angle_6A>
    1182:	87 e3       	ldi	r24, 0x37	; 55
    1184:	0e 94 ad 07 	call	0xf5a	; 0xf5a <angle_6B>
    1188:	8a e5       	ldi	r24, 0x5A	; 90
    118a:	0e 94 c4 07 	call	0xf88	; 0xf88 <angle_6C>
//buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection
//buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection
}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <robot_stand_position>:

//--------------------------------------------------------------------------------
// function to stand the robot initial position
//--------------------------------------------------------------------------------
void robot_stand_position(void)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
angle_1A(90); angle_1B(125); angle_1C(90); angle_2A(90); angle_2B(125); angle_2C(90);
    119c:	8a e5       	ldi	r24, 0x5A	; 90
    119e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <angle_1A>
    11a2:	8d e7       	ldi	r24, 0x7D	; 125
    11a4:	0e 94 54 06 	call	0xca8	; 0xca8 <angle_1B>
    11a8:	8a e5       	ldi	r24, 0x5A	; 90
    11aa:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <angle_1C>
    11ae:	8a e5       	ldi	r24, 0x5A	; 90
    11b0:	0e 94 82 06 	call	0xd04	; 0xd04 <angle_2A>
    11b4:	8d e7       	ldi	r24, 0x7D	; 125
    11b6:	0e 94 99 06 	call	0xd32	; 0xd32 <angle_2B>
    11ba:	8a e5       	ldi	r24, 0x5A	; 90
    11bc:	0e 94 b0 06 	call	0xd60	; 0xd60 <angle_2C>
angle_3A(90); angle_3B(125); angle_3C(90); angle_4A(90); angle_4B(55); angle_4C(90);
    11c0:	8a e5       	ldi	r24, 0x5A	; 90
    11c2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <angle_3A>
    11c6:	8d e7       	ldi	r24, 0x7D	; 125
    11c8:	0e 94 de 06 	call	0xdbc	; 0xdbc <angle_3B>
    11cc:	8a e5       	ldi	r24, 0x5A	; 90
    11ce:	0e 94 f5 06 	call	0xdea	; 0xdea <angle_3C>
    11d2:	8a e5       	ldi	r24, 0x5A	; 90
    11d4:	0e 94 0c 07 	call	0xe18	; 0xe18 <angle_4A>
    11d8:	87 e3       	ldi	r24, 0x37	; 55
    11da:	0e 94 23 07 	call	0xe46	; 0xe46 <angle_4B>
    11de:	8a e5       	ldi	r24, 0x5A	; 90
    11e0:	0e 94 3a 07 	call	0xe74	; 0xe74 <angle_4C>
angle_5A(90); angle_5B(55); angle_5C(90); angle_6A(90); angle_6B(55); angle_6C(90);
    11e4:	8a e5       	ldi	r24, 0x5A	; 90
    11e6:	0e 94 51 07 	call	0xea2	; 0xea2 <angle_5A>
    11ea:	87 e3       	ldi	r24, 0x37	; 55
    11ec:	0e 94 68 07 	call	0xed0	; 0xed0 <angle_5B>
    11f0:	8a e5       	ldi	r24, 0x5A	; 90
    11f2:	0e 94 7f 07 	call	0xefe	; 0xefe <angle_5C>
    11f6:	8a e5       	ldi	r24, 0x5A	; 90
    11f8:	0e 94 96 07 	call	0xf2c	; 0xf2c <angle_6A>
    11fc:	87 e3       	ldi	r24, 0x37	; 55
    11fe:	0e 94 ad 07 	call	0xf5a	; 0xf5a <angle_6B>
    1202:	8a e5       	ldi	r24, 0x5A	; 90
    1204:	0e 94 c4 07 	call	0xf88	; 0xf88 <angle_6C>
}
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <fwd_front_step>:
//--------------------------------------------------------------------------------
// This function is used for positioning robot's arms in forward direction just 
// before applying stroke to push the robot forward.
//--------------------------------------------------------------------------------
void fwd_front_step()
{
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	ce 57       	subi	r28, 0x7E	; 126
    121c:	d0 40       	sbci	r29, 0x00	; 0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
 /*buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection
 buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection
 buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection
               */
 //2 and 4 move forward
 angle_2B(90); angle_2C(90); angle_4B(90);angle_4C(90); //2nd & 4th arm BC servo up by 90
    1228:	8a e5       	ldi	r24, 0x5A	; 90
    122a:	0e 94 99 06 	call	0xd32	; 0xd32 <angle_2B>
    122e:	8a e5       	ldi	r24, 0x5A	; 90
    1230:	0e 94 b0 06 	call	0xd60	; 0xd60 <angle_2C>
    1234:	8a e5       	ldi	r24, 0x5A	; 90
    1236:	0e 94 23 07 	call	0xe46	; 0xe46 <angle_4B>
    123a:	8a e5       	ldi	r24, 0x5A	; 90
    123c:	0e 94 3a 07 	call	0xe74	; 0xe74 <angle_4C>
    1240:	fe 01       	movw	r30, r28
    1242:	e5 58       	subi	r30, 0x85	; 133
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	aa e7       	ldi	r26, 0x7A	; 122
    124c:	b3 e4       	ldi	r27, 0x43	; 67
    124e:	80 83       	st	Z, r24
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	a2 83       	std	Z+2, r26	; 0x02
    1254:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1256:	8e 01       	movw	r16, r28
    1258:	09 58       	subi	r16, 0x89	; 137
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
    125c:	fe 01       	movw	r30, r28
    125e:	e5 58       	subi	r30, 0x85	; 133
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	60 81       	ld	r22, Z
    1264:	71 81       	ldd	r23, Z+1	; 0x01
    1266:	82 81       	ldd	r24, Z+2	; 0x02
    1268:	93 81       	ldd	r25, Z+3	; 0x03
    126a:	26 e6       	ldi	r18, 0x66	; 102
    126c:	36 e6       	ldi	r19, 0x66	; 102
    126e:	46 e6       	ldi	r20, 0x66	; 102
    1270:	55 e4       	ldi	r21, 0x45	; 69
    1272:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	f8 01       	movw	r30, r16
    127c:	80 83       	st	Z, r24
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	a2 83       	std	Z+2, r26	; 0x02
    1282:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1284:	fe 01       	movw	r30, r28
    1286:	e9 58       	subi	r30, 0x89	; 137
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	60 81       	ld	r22, Z
    128c:	71 81       	ldd	r23, Z+1	; 0x01
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	93 81       	ldd	r25, Z+3	; 0x03
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e8       	ldi	r20, 0x80	; 128
    1298:	5f e3       	ldi	r21, 0x3F	; 63
    129a:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    129e:	88 23       	and	r24, r24
    12a0:	44 f4       	brge	.+16     	; 0x12b2 <fwd_front_step+0xa4>
		__ticks = 1;
    12a2:	fe 01       	movw	r30, r28
    12a4:	eb 58       	subi	r30, 0x8B	; 139
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24
    12b0:	64 c0       	rjmp	.+200    	; 0x137a <fwd_front_step+0x16c>
	else if (__tmp > 65535)
    12b2:	fe 01       	movw	r30, r28
    12b4:	e9 58       	subi	r30, 0x89	; 137
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	60 81       	ld	r22, Z
    12ba:	71 81       	ldd	r23, Z+1	; 0x01
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	3f ef       	ldi	r19, 0xFF	; 255
    12c4:	4f e7       	ldi	r20, 0x7F	; 127
    12c6:	57 e4       	ldi	r21, 0x47	; 71
    12c8:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    12cc:	18 16       	cp	r1, r24
    12ce:	0c f0       	brlt	.+2      	; 0x12d2 <fwd_front_step+0xc4>
    12d0:	43 c0       	rjmp	.+134    	; 0x1358 <fwd_front_step+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d2:	fe 01       	movw	r30, r28
    12d4:	e5 58       	subi	r30, 0x85	; 133
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e2       	ldi	r20, 0x20	; 32
    12e6:	51 e4       	ldi	r21, 0x41	; 65
    12e8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	8e 01       	movw	r16, r28
    12f2:	0b 58       	subi	r16, 0x8B	; 139
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	f8 01       	movw	r30, r16
    1304:	91 83       	std	Z+1, r25	; 0x01
    1306:	80 83       	st	Z, r24
    1308:	1f c0       	rjmp	.+62     	; 0x1348 <fwd_front_step+0x13a>
    130a:	fe 01       	movw	r30, r28
    130c:	ed 58       	subi	r30, 0x8D	; 141
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	80 e7       	ldi	r24, 0x70	; 112
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1318:	fe 01       	movw	r30, r28
    131a:	ed 58       	subi	r30, 0x8D	; 141
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	80 81       	ld	r24, Z
    1320:	91 81       	ldd	r25, Z+1	; 0x01
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <fwd_front_step+0x114>
    1326:	fe 01       	movw	r30, r28
    1328:	ed 58       	subi	r30, 0x8D	; 141
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	91 83       	std	Z+1, r25	; 0x01
    132e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1330:	de 01       	movw	r26, r28
    1332:	ab 58       	subi	r26, 0x8B	; 139
    1334:	bf 4f       	sbci	r27, 0xFF	; 255
    1336:	fe 01       	movw	r30, r28
    1338:	eb 58       	subi	r30, 0x8B	; 139
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	80 81       	ld	r24, Z
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	11 96       	adiw	r26, 0x01	; 1
    1344:	9c 93       	st	X, r25
    1346:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1348:	fe 01       	movw	r30, r28
    134a:	eb 58       	subi	r30, 0x8B	; 139
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	d1 f6       	brne	.-76     	; 0x130a <fwd_front_step+0xfc>
    1356:	27 c0       	rjmp	.+78     	; 0x13a6 <fwd_front_step+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1358:	8e 01       	movw	r16, r28
    135a:	0b 58       	subi	r16, 0x8B	; 139
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	fe 01       	movw	r30, r28
    1360:	e9 58       	subi	r30, 0x89	; 137
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	f8 01       	movw	r30, r16
    1376:	91 83       	std	Z+1, r25	; 0x01
    1378:	80 83       	st	Z, r24
    137a:	de 01       	movw	r26, r28
    137c:	af 58       	subi	r26, 0x8F	; 143
    137e:	bf 4f       	sbci	r27, 0xFF	; 255
    1380:	fe 01       	movw	r30, r28
    1382:	eb 58       	subi	r30, 0x8B	; 139
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	8d 93       	st	X+, r24
    138c:	9c 93       	st	X, r25
    138e:	fe 01       	movw	r30, r28
    1390:	ef 58       	subi	r30, 0x8F	; 143
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <fwd_front_step+0x18a>
    139c:	fe 01       	movw	r30, r28
    139e:	ef 58       	subi	r30, 0x8F	; 143
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
 _delay_ms(250);
 angle_2A(70); angle_4A(65);      //move forward while arms are up
    13a6:	86 e4       	ldi	r24, 0x46	; 70
    13a8:	0e 94 82 06 	call	0xd04	; 0xd04 <angle_2A>
    13ac:	81 e4       	ldi	r24, 0x41	; 65
    13ae:	0e 94 0c 07 	call	0xe18	; 0xe18 <angle_4A>
    13b2:	fe 01       	movw	r30, r28
    13b4:	e3 59       	subi	r30, 0x93	; 147
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	aa e7       	ldi	r26, 0x7A	; 122
    13be:	b3 e4       	ldi	r27, 0x43	; 67
    13c0:	80 83       	st	Z, r24
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	a2 83       	std	Z+2, r26	; 0x02
    13c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	8e 01       	movw	r16, r28
    13ca:	07 59       	subi	r16, 0x97	; 151
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
    13ce:	fe 01       	movw	r30, r28
    13d0:	e3 59       	subi	r30, 0x93	; 147
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	60 81       	ld	r22, Z
    13d6:	71 81       	ldd	r23, Z+1	; 0x01
    13d8:	82 81       	ldd	r24, Z+2	; 0x02
    13da:	93 81       	ldd	r25, Z+3	; 0x03
    13dc:	26 e6       	ldi	r18, 0x66	; 102
    13de:	36 e6       	ldi	r19, 0x66	; 102
    13e0:	46 e6       	ldi	r20, 0x66	; 102
    13e2:	55 e4       	ldi	r21, 0x45	; 69
    13e4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	f8 01       	movw	r30, r16
    13ee:	80 83       	st	Z, r24
    13f0:	91 83       	std	Z+1, r25	; 0x01
    13f2:	a2 83       	std	Z+2, r26	; 0x02
    13f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13f6:	fe 01       	movw	r30, r28
    13f8:	e7 59       	subi	r30, 0x97	; 151
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e8       	ldi	r20, 0x80	; 128
    140a:	5f e3       	ldi	r21, 0x3F	; 63
    140c:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    1410:	88 23       	and	r24, r24
    1412:	44 f4       	brge	.+16     	; 0x1424 <fwd_front_step+0x216>
		__ticks = 1;
    1414:	fe 01       	movw	r30, r28
    1416:	e9 59       	subi	r30, 0x99	; 153
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	80 83       	st	Z, r24
    1422:	64 c0       	rjmp	.+200    	; 0x14ec <fwd_front_step+0x2de>
	else if (__tmp > 65535)
    1424:	fe 01       	movw	r30, r28
    1426:	e7 59       	subi	r30, 0x97	; 151
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	4f e7       	ldi	r20, 0x7F	; 127
    1438:	57 e4       	ldi	r21, 0x47	; 71
    143a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    143e:	18 16       	cp	r1, r24
    1440:	0c f0       	brlt	.+2      	; 0x1444 <fwd_front_step+0x236>
    1442:	43 c0       	rjmp	.+134    	; 0x14ca <fwd_front_step+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1444:	fe 01       	movw	r30, r28
    1446:	e3 59       	subi	r30, 0x93	; 147
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	60 81       	ld	r22, Z
    144c:	71 81       	ldd	r23, Z+1	; 0x01
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e2       	ldi	r20, 0x20	; 32
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8e 01       	movw	r16, r28
    1464:	09 59       	subi	r16, 0x99	; 153
    1466:	1f 4f       	sbci	r17, 0xFF	; 255
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	f8 01       	movw	r30, r16
    1476:	91 83       	std	Z+1, r25	; 0x01
    1478:	80 83       	st	Z, r24
    147a:	1f c0       	rjmp	.+62     	; 0x14ba <fwd_front_step+0x2ac>
    147c:	fe 01       	movw	r30, r28
    147e:	eb 59       	subi	r30, 0x9B	; 155
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 e7       	ldi	r24, 0x70	; 112
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	80 83       	st	Z, r24
    148a:	fe 01       	movw	r30, r28
    148c:	eb 59       	subi	r30, 0x9B	; 155
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	80 81       	ld	r24, Z
    1492:	91 81       	ldd	r25, Z+1	; 0x01
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <fwd_front_step+0x286>
    1498:	fe 01       	movw	r30, r28
    149a:	eb 59       	subi	r30, 0x9B	; 155
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	de 01       	movw	r26, r28
    14a4:	a9 59       	subi	r26, 0x99	; 153
    14a6:	bf 4f       	sbci	r27, 0xFF	; 255
    14a8:	fe 01       	movw	r30, r28
    14aa:	e9 59       	subi	r30, 0x99	; 153
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	11 96       	adiw	r26, 0x01	; 1
    14b6:	9c 93       	st	X, r25
    14b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ba:	fe 01       	movw	r30, r28
    14bc:	e9 59       	subi	r30, 0x99	; 153
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	80 81       	ld	r24, Z
    14c2:	91 81       	ldd	r25, Z+1	; 0x01
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	d1 f6       	brne	.-76     	; 0x147c <fwd_front_step+0x26e>
    14c8:	27 c0       	rjmp	.+78     	; 0x1518 <fwd_front_step+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ca:	8e 01       	movw	r16, r28
    14cc:	09 59       	subi	r16, 0x99	; 153
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	fe 01       	movw	r30, r28
    14d2:	e7 59       	subi	r30, 0x97	; 151
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	60 81       	ld	r22, Z
    14d8:	71 81       	ldd	r23, Z+1	; 0x01
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	f8 01       	movw	r30, r16
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	80 83       	st	Z, r24
    14ec:	de 01       	movw	r26, r28
    14ee:	ad 59       	subi	r26, 0x9D	; 157
    14f0:	bf 4f       	sbci	r27, 0xFF	; 255
    14f2:	fe 01       	movw	r30, r28
    14f4:	e9 59       	subi	r30, 0x99	; 153
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	8d 93       	st	X+, r24
    14fe:	9c 93       	st	X, r25
    1500:	fe 01       	movw	r30, r28
    1502:	ed 59       	subi	r30, 0x9D	; 157
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	80 81       	ld	r24, Z
    1508:	91 81       	ldd	r25, Z+1	; 0x01
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <fwd_front_step+0x2fc>
    150e:	fe 01       	movw	r30, r28
    1510:	ed 59       	subi	r30, 0x9D	; 157
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	91 83       	std	Z+1, r25	; 0x01
    1516:	80 83       	st	Z, r24
 _delay_ms(250);
 angle_2B(125); angle_4B(55);     //put down arm
    1518:	8d e7       	ldi	r24, 0x7D	; 125
    151a:	0e 94 99 06 	call	0xd32	; 0xd32 <angle_2B>
    151e:	87 e3       	ldi	r24, 0x37	; 55
    1520:	0e 94 23 07 	call	0xe46	; 0xe46 <angle_4B>
    1524:	fe 01       	movw	r30, r28
    1526:	e1 5a       	subi	r30, 0xA1	; 161
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	aa e7       	ldi	r26, 0x7A	; 122
    1530:	b3 e4       	ldi	r27, 0x43	; 67
    1532:	80 83       	st	Z, r24
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	a2 83       	std	Z+2, r26	; 0x02
    1538:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153a:	8e 01       	movw	r16, r28
    153c:	05 5a       	subi	r16, 0xA5	; 165
    153e:	1f 4f       	sbci	r17, 0xFF	; 255
    1540:	fe 01       	movw	r30, r28
    1542:	e1 5a       	subi	r30, 0xA1	; 161
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
    154a:	82 81       	ldd	r24, Z+2	; 0x02
    154c:	93 81       	ldd	r25, Z+3	; 0x03
    154e:	26 e6       	ldi	r18, 0x66	; 102
    1550:	36 e6       	ldi	r19, 0x66	; 102
    1552:	46 e6       	ldi	r20, 0x66	; 102
    1554:	55 e4       	ldi	r21, 0x45	; 69
    1556:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	f8 01       	movw	r30, r16
    1560:	80 83       	st	Z, r24
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	a2 83       	std	Z+2, r26	; 0x02
    1566:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1568:	fe 01       	movw	r30, r28
    156a:	e5 5a       	subi	r30, 0xA5	; 165
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    1582:	88 23       	and	r24, r24
    1584:	44 f4       	brge	.+16     	; 0x1596 <fwd_front_step+0x388>
		__ticks = 1;
    1586:	fe 01       	movw	r30, r28
    1588:	e7 5a       	subi	r30, 0xA7	; 167
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24
    1594:	64 c0       	rjmp	.+200    	; 0x165e <fwd_front_step+0x450>
	else if (__tmp > 65535)
    1596:	fe 01       	movw	r30, r28
    1598:	e5 5a       	subi	r30, 0xA5	; 165
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	60 81       	ld	r22, Z
    159e:	71 81       	ldd	r23, Z+1	; 0x01
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	0c f0       	brlt	.+2      	; 0x15b6 <fwd_front_step+0x3a8>
    15b4:	43 c0       	rjmp	.+134    	; 0x163c <fwd_front_step+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b6:	fe 01       	movw	r30, r28
    15b8:	e1 5a       	subi	r30, 0xA1	; 161
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	51 e4       	ldi	r21, 0x41	; 65
    15cc:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	8e 01       	movw	r16, r28
    15d6:	07 5a       	subi	r16, 0xA7	; 167
    15d8:	1f 4f       	sbci	r17, 0xFF	; 255
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	f8 01       	movw	r30, r16
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	80 83       	st	Z, r24
    15ec:	1f c0       	rjmp	.+62     	; 0x162c <fwd_front_step+0x41e>
    15ee:	fe 01       	movw	r30, r28
    15f0:	e9 5a       	subi	r30, 0xA9	; 169
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 e7       	ldi	r24, 0x70	; 112
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
    15fc:	fe 01       	movw	r30, r28
    15fe:	e9 5a       	subi	r30, 0xA9	; 169
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <fwd_front_step+0x3f8>
    160a:	fe 01       	movw	r30, r28
    160c:	e9 5a       	subi	r30, 0xA9	; 169
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	de 01       	movw	r26, r28
    1616:	a7 5a       	subi	r26, 0xA7	; 167
    1618:	bf 4f       	sbci	r27, 0xFF	; 255
    161a:	fe 01       	movw	r30, r28
    161c:	e7 5a       	subi	r30, 0xA7	; 167
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	80 81       	ld	r24, Z
    1622:	91 81       	ldd	r25, Z+1	; 0x01
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	11 96       	adiw	r26, 0x01	; 1
    1628:	9c 93       	st	X, r25
    162a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	fe 01       	movw	r30, r28
    162e:	e7 5a       	subi	r30, 0xA7	; 167
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	80 81       	ld	r24, Z
    1634:	91 81       	ldd	r25, Z+1	; 0x01
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	d1 f6       	brne	.-76     	; 0x15ee <fwd_front_step+0x3e0>
    163a:	27 c0       	rjmp	.+78     	; 0x168a <fwd_front_step+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163c:	8e 01       	movw	r16, r28
    163e:	07 5a       	subi	r16, 0xA7	; 167
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	fe 01       	movw	r30, r28
    1644:	e5 5a       	subi	r30, 0xA5	; 165
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	f8 01       	movw	r30, r16
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
    165e:	de 01       	movw	r26, r28
    1660:	ab 5a       	subi	r26, 0xAB	; 171
    1662:	bf 4f       	sbci	r27, 0xFF	; 255
    1664:	fe 01       	movw	r30, r28
    1666:	e7 5a       	subi	r30, 0xA7	; 167
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	8d 93       	st	X+, r24
    1670:	9c 93       	st	X, r25
    1672:	fe 01       	movw	r30, r28
    1674:	eb 5a       	subi	r30, 0xAB	; 171
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <fwd_front_step+0x46e>
    1680:	fe 01       	movw	r30, r28
    1682:	eb 5a       	subi	r30, 0xAB	; 171
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
 _delay_ms(250);
 
 //1 and 6 move forward
 angle_1B(90); angle_1C(90); angle_6B(90); angle_6C(90); //1st & 6th arm BC servo up by 90
    168a:	8a e5       	ldi	r24, 0x5A	; 90
    168c:	0e 94 54 06 	call	0xca8	; 0xca8 <angle_1B>
    1690:	8a e5       	ldi	r24, 0x5A	; 90
    1692:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <angle_1C>
    1696:	8a e5       	ldi	r24, 0x5A	; 90
    1698:	0e 94 ad 07 	call	0xf5a	; 0xf5a <angle_6B>
    169c:	8a e5       	ldi	r24, 0x5A	; 90
    169e:	0e 94 c4 07 	call	0xf88	; 0xf88 <angle_6C>
    16a2:	fe 01       	movw	r30, r28
    16a4:	ef 5a       	subi	r30, 0xAF	; 175
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	aa e7       	ldi	r26, 0x7A	; 122
    16ae:	b3 e4       	ldi	r27, 0x43	; 67
    16b0:	80 83       	st	Z, r24
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	a2 83       	std	Z+2, r26	; 0x02
    16b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	8e 01       	movw	r16, r28
    16ba:	03 5b       	subi	r16, 0xB3	; 179
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	fe 01       	movw	r30, r28
    16c0:	ef 5a       	subi	r30, 0xAF	; 175
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	26 e6       	ldi	r18, 0x66	; 102
    16ce:	36 e6       	ldi	r19, 0x66	; 102
    16d0:	46 e6       	ldi	r20, 0x66	; 102
    16d2:	55 e4       	ldi	r21, 0x45	; 69
    16d4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	f8 01       	movw	r30, r16
    16de:	80 83       	st	Z, r24
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	a2 83       	std	Z+2, r26	; 0x02
    16e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16e6:	fe 01       	movw	r30, r28
    16e8:	e3 5b       	subi	r30, 0xB3	; 179
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    1700:	88 23       	and	r24, r24
    1702:	44 f4       	brge	.+16     	; 0x1714 <fwd_front_step+0x506>
		__ticks = 1;
    1704:	fe 01       	movw	r30, r28
    1706:	e5 5b       	subi	r30, 0xB5	; 181
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	80 83       	st	Z, r24
    1712:	64 c0       	rjmp	.+200    	; 0x17dc <fwd_front_step+0x5ce>
	else if (__tmp > 65535)
    1714:	fe 01       	movw	r30, r28
    1716:	e3 5b       	subi	r30, 0xB3	; 179
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	3f ef       	ldi	r19, 0xFF	; 255
    1726:	4f e7       	ldi	r20, 0x7F	; 127
    1728:	57 e4       	ldi	r21, 0x47	; 71
    172a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    172e:	18 16       	cp	r1, r24
    1730:	0c f0       	brlt	.+2      	; 0x1734 <fwd_front_step+0x526>
    1732:	43 c0       	rjmp	.+134    	; 0x17ba <fwd_front_step+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	fe 01       	movw	r30, r28
    1736:	ef 5a       	subi	r30, 0xAF	; 175
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
    173e:	82 81       	ldd	r24, Z+2	; 0x02
    1740:	93 81       	ldd	r25, Z+3	; 0x03
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	51 e4       	ldi	r21, 0x41	; 65
    174a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8e 01       	movw	r16, r28
    1754:	05 5b       	subi	r16, 0xB5	; 181
    1756:	1f 4f       	sbci	r17, 0xFF	; 255
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	f8 01       	movw	r30, r16
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	80 83       	st	Z, r24
    176a:	1f c0       	rjmp	.+62     	; 0x17aa <fwd_front_step+0x59c>
    176c:	fe 01       	movw	r30, r28
    176e:	e7 5b       	subi	r30, 0xB7	; 183
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	80 e7       	ldi	r24, 0x70	; 112
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
    177a:	fe 01       	movw	r30, r28
    177c:	e7 5b       	subi	r30, 0xB7	; 183
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <fwd_front_step+0x576>
    1788:	fe 01       	movw	r30, r28
    178a:	e7 5b       	subi	r30, 0xB7	; 183
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1792:	de 01       	movw	r26, r28
    1794:	a5 5b       	subi	r26, 0xB5	; 181
    1796:	bf 4f       	sbci	r27, 0xFF	; 255
    1798:	fe 01       	movw	r30, r28
    179a:	e5 5b       	subi	r30, 0xB5	; 181
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	11 96       	adiw	r26, 0x01	; 1
    17a6:	9c 93       	st	X, r25
    17a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	fe 01       	movw	r30, r28
    17ac:	e5 5b       	subi	r30, 0xB5	; 181
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	d1 f6       	brne	.-76     	; 0x176c <fwd_front_step+0x55e>
    17b8:	27 c0       	rjmp	.+78     	; 0x1808 <fwd_front_step+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ba:	8e 01       	movw	r16, r28
    17bc:	05 5b       	subi	r16, 0xB5	; 181
    17be:	1f 4f       	sbci	r17, 0xFF	; 255
    17c0:	fe 01       	movw	r30, r28
    17c2:	e3 5b       	subi	r30, 0xB3	; 179
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	f8 01       	movw	r30, r16
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	80 83       	st	Z, r24
    17dc:	de 01       	movw	r26, r28
    17de:	a9 5b       	subi	r26, 0xB9	; 185
    17e0:	bf 4f       	sbci	r27, 0xFF	; 255
    17e2:	fe 01       	movw	r30, r28
    17e4:	e5 5b       	subi	r30, 0xB5	; 181
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	8d 93       	st	X+, r24
    17ee:	9c 93       	st	X, r25
    17f0:	fe 01       	movw	r30, r28
    17f2:	e9 5b       	subi	r30, 0xB9	; 185
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 81       	ld	r24, Z
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <fwd_front_step+0x5ec>
    17fe:	fe 01       	movw	r30, r28
    1800:	e9 5b       	subi	r30, 0xB9	; 185
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	80 83       	st	Z, r24
 _delay_ms(250);
 angle_1A(115); angle_6A(155);   //move back while arms are up
    1808:	83 e7       	ldi	r24, 0x73	; 115
    180a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <angle_1A>
    180e:	8b e9       	ldi	r24, 0x9B	; 155
    1810:	0e 94 96 07 	call	0xf2c	; 0xf2c <angle_6A>
    1814:	fe 01       	movw	r30, r28
    1816:	ed 5b       	subi	r30, 0xBD	; 189
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	aa e7       	ldi	r26, 0x7A	; 122
    1820:	b3 e4       	ldi	r27, 0x43	; 67
    1822:	80 83       	st	Z, r24
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	a2 83       	std	Z+2, r26	; 0x02
    1828:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182a:	8e 01       	movw	r16, r28
    182c:	01 5c       	subi	r16, 0xC1	; 193
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	fe 01       	movw	r30, r28
    1832:	ed 5b       	subi	r30, 0xBD	; 189
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	60 81       	ld	r22, Z
    1838:	71 81       	ldd	r23, Z+1	; 0x01
    183a:	82 81       	ldd	r24, Z+2	; 0x02
    183c:	93 81       	ldd	r25, Z+3	; 0x03
    183e:	26 e6       	ldi	r18, 0x66	; 102
    1840:	36 e6       	ldi	r19, 0x66	; 102
    1842:	46 e6       	ldi	r20, 0x66	; 102
    1844:	55 e4       	ldi	r21, 0x45	; 69
    1846:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	80 83       	st	Z, r24
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	a2 83       	std	Z+2, r26	; 0x02
    1856:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1858:	fe 01       	movw	r30, r28
    185a:	ff 96       	adiw	r30, 0x3f	; 63
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <fwd_front_step+0x670>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9e af       	std	Y+62, r25	; 0x3e
    187a:	8d af       	std	Y+61, r24	; 0x3d
    187c:	46 c0       	rjmp	.+140    	; 0x190a <fwd_front_step+0x6fc>
	else if (__tmp > 65535)
    187e:	fe 01       	movw	r30, r28
    1880:	ff 96       	adiw	r30, 0x3f	; 63
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	3f ef       	ldi	r19, 0xFF	; 255
    188e:	4f e7       	ldi	r20, 0x7F	; 127
    1890:	57 e4       	ldi	r21, 0x47	; 71
    1892:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    1896:	18 16       	cp	r1, r24
    1898:	64 f5       	brge	.+88     	; 0x18f2 <fwd_front_step+0x6e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189a:	fe 01       	movw	r30, r28
    189c:	ed 5b       	subi	r30, 0xBD	; 189
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	82 81       	ldd	r24, Z+2	; 0x02
    18a6:	93 81       	ldd	r25, Z+3	; 0x03
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e2       	ldi	r20, 0x20	; 32
    18ae:	51 e4       	ldi	r21, 0x41	; 65
    18b0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	bc 01       	movw	r22, r24
    18ba:	cd 01       	movw	r24, r26
    18bc:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9e af       	std	Y+62, r25	; 0x3e
    18c6:	8d af       	std	Y+61, r24	; 0x3d
    18c8:	0f c0       	rjmp	.+30     	; 0x18e8 <fwd_front_step+0x6da>
    18ca:	80 e7       	ldi	r24, 0x70	; 112
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	9c af       	std	Y+60, r25	; 0x3c
    18d0:	8b af       	std	Y+59, r24	; 0x3b
    18d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    18d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <fwd_front_step+0x6c8>
    18da:	9c af       	std	Y+60, r25	; 0x3c
    18dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18de:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	9e af       	std	Y+62, r25	; 0x3e
    18e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    18ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	69 f7       	brne	.-38     	; 0x18ca <fwd_front_step+0x6bc>
    18f0:	16 c0       	rjmp	.+44     	; 0x191e <fwd_front_step+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f2:	fe 01       	movw	r30, r28
    18f4:	ff 96       	adiw	r30, 0x3f	; 63
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	93 81       	ldd	r25, Z+3	; 0x03
    18fe:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	9e af       	std	Y+62, r25	; 0x3e
    1908:	8d af       	std	Y+61, r24	; 0x3d
    190a:	8d ad       	ldd	r24, Y+61	; 0x3d
    190c:	9e ad       	ldd	r25, Y+62	; 0x3e
    190e:	9a af       	std	Y+58, r25	; 0x3a
    1910:	89 af       	std	Y+57, r24	; 0x39
    1912:	89 ad       	ldd	r24, Y+57	; 0x39
    1914:	9a ad       	ldd	r25, Y+58	; 0x3a
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <fwd_front_step+0x708>
    191a:	9a af       	std	Y+58, r25	; 0x3a
    191c:	89 af       	std	Y+57, r24	; 0x39
 _delay_ms(250);
 angle_1B(125); angle_6B(55);    //put down arm
    191e:	8d e7       	ldi	r24, 0x7D	; 125
    1920:	0e 94 54 06 	call	0xca8	; 0xca8 <angle_1B>
    1924:	87 e3       	ldi	r24, 0x37	; 55
    1926:	0e 94 ad 07 	call	0xf5a	; 0xf5a <angle_6B>
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	aa e7       	ldi	r26, 0x7A	; 122
    1930:	b3 e4       	ldi	r27, 0x43	; 67
    1932:	8d ab       	std	Y+53, r24	; 0x35
    1934:	9e ab       	std	Y+54, r25	; 0x36
    1936:	af ab       	std	Y+55, r26	; 0x37
    1938:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193a:	6d a9       	ldd	r22, Y+53	; 0x35
    193c:	7e a9       	ldd	r23, Y+54	; 0x36
    193e:	8f a9       	ldd	r24, Y+55	; 0x37
    1940:	98 ad       	ldd	r25, Y+56	; 0x38
    1942:	26 e6       	ldi	r18, 0x66	; 102
    1944:	36 e6       	ldi	r19, 0x66	; 102
    1946:	46 e6       	ldi	r20, 0x66	; 102
    1948:	55 e4       	ldi	r21, 0x45	; 69
    194a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	89 ab       	std	Y+49, r24	; 0x31
    1954:	9a ab       	std	Y+50, r25	; 0x32
    1956:	ab ab       	std	Y+51, r26	; 0x33
    1958:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    195a:	69 a9       	ldd	r22, Y+49	; 0x31
    195c:	7a a9       	ldd	r23, Y+50	; 0x32
    195e:	8b a9       	ldd	r24, Y+51	; 0x33
    1960:	9c a9       	ldd	r25, Y+52	; 0x34
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e8       	ldi	r20, 0x80	; 128
    1968:	5f e3       	ldi	r21, 0x3F	; 63
    196a:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    196e:	88 23       	and	r24, r24
    1970:	2c f4       	brge	.+10     	; 0x197c <fwd_front_step+0x76e>
		__ticks = 1;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	98 ab       	std	Y+48, r25	; 0x30
    1978:	8f a7       	std	Y+47, r24	; 0x2f
    197a:	3f c0       	rjmp	.+126    	; 0x19fa <fwd_front_step+0x7ec>
	else if (__tmp > 65535)
    197c:	69 a9       	ldd	r22, Y+49	; 0x31
    197e:	7a a9       	ldd	r23, Y+50	; 0x32
    1980:	8b a9       	ldd	r24, Y+51	; 0x33
    1982:	9c a9       	ldd	r25, Y+52	; 0x34
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	4f e7       	ldi	r20, 0x7F	; 127
    198a:	57 e4       	ldi	r21, 0x47	; 71
    198c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    1990:	18 16       	cp	r1, r24
    1992:	4c f5       	brge	.+82     	; 0x19e6 <fwd_front_step+0x7d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1994:	6d a9       	ldd	r22, Y+53	; 0x35
    1996:	7e a9       	ldd	r23, Y+54	; 0x36
    1998:	8f a9       	ldd	r24, Y+55	; 0x37
    199a:	98 ad       	ldd	r25, Y+56	; 0x38
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e2       	ldi	r20, 0x20	; 32
    19a2:	51 e4       	ldi	r21, 0x41	; 65
    19a4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	98 ab       	std	Y+48, r25	; 0x30
    19ba:	8f a7       	std	Y+47, r24	; 0x2f
    19bc:	0f c0       	rjmp	.+30     	; 0x19dc <fwd_front_step+0x7ce>
    19be:	80 e7       	ldi	r24, 0x70	; 112
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	9e a7       	std	Y+46, r25	; 0x2e
    19c4:	8d a7       	std	Y+45, r24	; 0x2d
    19c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    19c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <fwd_front_step+0x7bc>
    19ce:	9e a7       	std	Y+46, r25	; 0x2e
    19d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d4:	98 a9       	ldd	r25, Y+48	; 0x30
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	98 ab       	std	Y+48, r25	; 0x30
    19da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19de:	98 a9       	ldd	r25, Y+48	; 0x30
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	69 f7       	brne	.-38     	; 0x19be <fwd_front_step+0x7b0>
    19e4:	14 c0       	rjmp	.+40     	; 0x1a0e <fwd_front_step+0x800>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e6:	69 a9       	ldd	r22, Y+49	; 0x31
    19e8:	7a a9       	ldd	r23, Y+50	; 0x32
    19ea:	8b a9       	ldd	r24, Y+51	; 0x33
    19ec:	9c a9       	ldd	r25, Y+52	; 0x34
    19ee:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	98 ab       	std	Y+48, r25	; 0x30
    19f8:	8f a7       	std	Y+47, r24	; 0x2f
    19fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    19fc:	98 a9       	ldd	r25, Y+48	; 0x30
    19fe:	9c a7       	std	Y+44, r25	; 0x2c
    1a00:	8b a7       	std	Y+43, r24	; 0x2b
    1a02:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a04:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <fwd_front_step+0x7f8>
    1a0a:	9c a7       	std	Y+44, r25	; 0x2c
    1a0c:	8b a7       	std	Y+43, r24	; 0x2b
 _delay_ms(250); 
 
 //3 and 5 move forward
 angle_3B(90); angle_3C(90); angle_5B(90); angle_5C(90); //3rd & 5th arm BC servo up by 90
    1a0e:	8a e5       	ldi	r24, 0x5A	; 90
    1a10:	0e 94 de 06 	call	0xdbc	; 0xdbc <angle_3B>
    1a14:	8a e5       	ldi	r24, 0x5A	; 90
    1a16:	0e 94 f5 06 	call	0xdea	; 0xdea <angle_3C>
    1a1a:	8a e5       	ldi	r24, 0x5A	; 90
    1a1c:	0e 94 68 07 	call	0xed0	; 0xed0 <angle_5B>
    1a20:	8a e5       	ldi	r24, 0x5A	; 90
    1a22:	0e 94 7f 07 	call	0xefe	; 0xefe <angle_5C>
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	aa e7       	ldi	r26, 0x7A	; 122
    1a2c:	b3 e4       	ldi	r27, 0x43	; 67
    1a2e:	8f a3       	std	Y+39, r24	; 0x27
    1a30:	98 a7       	std	Y+40, r25	; 0x28
    1a32:	a9 a7       	std	Y+41, r26	; 0x29
    1a34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a36:	6f a1       	ldd	r22, Y+39	; 0x27
    1a38:	78 a5       	ldd	r23, Y+40	; 0x28
    1a3a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a3e:	26 e6       	ldi	r18, 0x66	; 102
    1a40:	36 e6       	ldi	r19, 0x66	; 102
    1a42:	46 e6       	ldi	r20, 0x66	; 102
    1a44:	55 e4       	ldi	r21, 0x45	; 69
    1a46:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8b a3       	std	Y+35, r24	; 0x23
    1a50:	9c a3       	std	Y+36, r25	; 0x24
    1a52:	ad a3       	std	Y+37, r26	; 0x25
    1a54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a56:	6b a1       	ldd	r22, Y+35	; 0x23
    1a58:	7c a1       	ldd	r23, Y+36	; 0x24
    1a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e8       	ldi	r20, 0x80	; 128
    1a64:	5f e3       	ldi	r21, 0x3F	; 63
    1a66:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    1a6a:	88 23       	and	r24, r24
    1a6c:	2c f4       	brge	.+10     	; 0x1a78 <fwd_front_step+0x86a>
		__ticks = 1;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9a a3       	std	Y+34, r25	; 0x22
    1a74:	89 a3       	std	Y+33, r24	; 0x21
    1a76:	3f c0       	rjmp	.+126    	; 0x1af6 <fwd_front_step+0x8e8>
	else if (__tmp > 65535)
    1a78:	6b a1       	ldd	r22, Y+35	; 0x23
    1a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	3f ef       	ldi	r19, 0xFF	; 255
    1a84:	4f e7       	ldi	r20, 0x7F	; 127
    1a86:	57 e4       	ldi	r21, 0x47	; 71
    1a88:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    1a8c:	18 16       	cp	r1, r24
    1a8e:	4c f5       	brge	.+82     	; 0x1ae2 <fwd_front_step+0x8d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a90:	6f a1       	ldd	r22, Y+39	; 0x27
    1a92:	78 a5       	ldd	r23, Y+40	; 0x28
    1a94:	89 a5       	ldd	r24, Y+41	; 0x29
    1a96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e2       	ldi	r20, 0x20	; 32
    1a9e:	51 e4       	ldi	r21, 0x41	; 65
    1aa0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9a a3       	std	Y+34, r25	; 0x22
    1ab6:	89 a3       	std	Y+33, r24	; 0x21
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <fwd_front_step+0x8ca>
    1aba:	80 e7       	ldi	r24, 0x70	; 112
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	98 a3       	std	Y+32, r25	; 0x20
    1ac0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <fwd_front_step+0x8b8>
    1aca:	98 a3       	std	Y+32, r25	; 0x20
    1acc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	9a a3       	std	Y+34, r25	; 0x22
    1ad6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ada:	9a a1       	ldd	r25, Y+34	; 0x22
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	69 f7       	brne	.-38     	; 0x1aba <fwd_front_step+0x8ac>
    1ae0:	14 c0       	rjmp	.+40     	; 0x1b0a <fwd_front_step+0x8fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aea:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9a a3       	std	Y+34, r25	; 0x22
    1af4:	89 a3       	std	Y+33, r24	; 0x21
    1af6:	89 a1       	ldd	r24, Y+33	; 0x21
    1af8:	9a a1       	ldd	r25, Y+34	; 0x22
    1afa:	9e 8f       	std	Y+30, r25	; 0x1e
    1afc:	8d 8f       	std	Y+29, r24	; 0x1d
    1afe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <fwd_front_step+0x8f4>
    1b06:	9e 8f       	std	Y+30, r25	; 0x1e
    1b08:	8d 8f       	std	Y+29, r24	; 0x1d
 _delay_ms(250);
 angle_3A(25); angle_5A(110);    //move forward while arms are up
    1b0a:	89 e1       	ldi	r24, 0x19	; 25
    1b0c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <angle_3A>
    1b10:	8e e6       	ldi	r24, 0x6E	; 110
    1b12:	0e 94 51 07 	call	0xea2	; 0xea2 <angle_5A>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	aa e7       	ldi	r26, 0x7A	; 122
    1b1c:	b3 e4       	ldi	r27, 0x43	; 67
    1b1e:	89 8f       	std	Y+25, r24	; 0x19
    1b20:	9a 8f       	std	Y+26, r25	; 0x1a
    1b22:	ab 8f       	std	Y+27, r26	; 0x1b
    1b24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b26:	69 8d       	ldd	r22, Y+25	; 0x19
    1b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2e:	26 e6       	ldi	r18, 0x66	; 102
    1b30:	36 e6       	ldi	r19, 0x66	; 102
    1b32:	46 e6       	ldi	r20, 0x66	; 102
    1b34:	55 e4       	ldi	r21, 0x45	; 69
    1b36:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	8d 8b       	std	Y+21, r24	; 0x15
    1b40:	9e 8b       	std	Y+22, r25	; 0x16
    1b42:	af 8b       	std	Y+23, r26	; 0x17
    1b44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b46:	6d 89       	ldd	r22, Y+21	; 0x15
    1b48:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <fwd_front_step+0x95a>
		__ticks = 1;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9c 8b       	std	Y+20, r25	; 0x14
    1b64:	8b 8b       	std	Y+19, r24	; 0x13
    1b66:	3f c0       	rjmp	.+126    	; 0x1be6 <fwd_front_step+0x9d8>
	else if (__tmp > 65535)
    1b68:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	4f e7       	ldi	r20, 0x7F	; 127
    1b76:	57 e4       	ldi	r21, 0x47	; 71
    1b78:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    1b7c:	18 16       	cp	r1, r24
    1b7e:	4c f5       	brge	.+82     	; 0x1bd2 <fwd_front_step+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b80:	69 8d       	ldd	r22, Y+25	; 0x19
    1b82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e2       	ldi	r20, 0x20	; 32
    1b8e:	51 e4       	ldi	r21, 0x41	; 65
    1b90:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9c 8b       	std	Y+20, r25	; 0x14
    1ba6:	8b 8b       	std	Y+19, r24	; 0x13
    1ba8:	0f c0       	rjmp	.+30     	; 0x1bc8 <fwd_front_step+0x9ba>
    1baa:	80 e7       	ldi	r24, 0x70	; 112
    1bac:	91 e0       	ldi	r25, 0x01	; 1
    1bae:	9a 8b       	std	Y+18, r25	; 0x12
    1bb0:	89 8b       	std	Y+17, r24	; 0x11
    1bb2:	89 89       	ldd	r24, Y+17	; 0x11
    1bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <fwd_front_step+0x9a8>
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	9c 8b       	std	Y+20, r25	; 0x14
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bca:	9c 89       	ldd	r25, Y+20	; 0x14
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	69 f7       	brne	.-38     	; 0x1baa <fwd_front_step+0x99c>
    1bd0:	14 c0       	rjmp	.+40     	; 0x1bfa <fwd_front_step+0x9ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bda:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9c 8b       	std	Y+20, r25	; 0x14
    1be4:	8b 8b       	std	Y+19, r24	; 0x13
    1be6:	8b 89       	ldd	r24, Y+19	; 0x13
    1be8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bea:	98 8b       	std	Y+16, r25	; 0x10
    1bec:	8f 87       	std	Y+15, r24	; 0x0f
    1bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf0:	98 89       	ldd	r25, Y+16	; 0x10
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <fwd_front_step+0x9e4>
    1bf6:	98 8b       	std	Y+16, r25	; 0x10
    1bf8:	8f 87       	std	Y+15, r24	; 0x0f
 _delay_ms(250);
 angle_3B(125); angle_5B(55);    // put down arm
    1bfa:	8d e7       	ldi	r24, 0x7D	; 125
    1bfc:	0e 94 de 06 	call	0xdbc	; 0xdbc <angle_3B>
    1c00:	87 e3       	ldi	r24, 0x37	; 55
    1c02:	0e 94 68 07 	call	0xed0	; 0xed0 <angle_5B>
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	aa e7       	ldi	r26, 0x7A	; 122
    1c0c:	b3 e4       	ldi	r27, 0x43	; 67
    1c0e:	8b 87       	std	Y+11, r24	; 0x0b
    1c10:	9c 87       	std	Y+12, r25	; 0x0c
    1c12:	ad 87       	std	Y+13, r26	; 0x0d
    1c14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c1e:	26 e6       	ldi	r18, 0x66	; 102
    1c20:	36 e6       	ldi	r19, 0x66	; 102
    1c22:	46 e6       	ldi	r20, 0x66	; 102
    1c24:	55 e4       	ldi	r21, 0x45	; 69
    1c26:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	8f 83       	std	Y+7, r24	; 0x07
    1c30:	98 87       	std	Y+8, r25	; 0x08
    1c32:	a9 87       	std	Y+9, r26	; 0x09
    1c34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c36:	6f 81       	ldd	r22, Y+7	; 0x07
    1c38:	78 85       	ldd	r23, Y+8	; 0x08
    1c3a:	89 85       	ldd	r24, Y+9	; 0x09
    1c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    1c4a:	88 23       	and	r24, r24
    1c4c:	2c f4       	brge	.+10     	; 0x1c58 <fwd_front_step+0xa4a>
		__ticks = 1;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
    1c56:	3f c0       	rjmp	.+126    	; 0x1cd6 <fwd_front_step+0xac8>
	else if (__tmp > 65535)
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	3f ef       	ldi	r19, 0xFF	; 255
    1c64:	4f e7       	ldi	r20, 0x7F	; 127
    1c66:	57 e4       	ldi	r21, 0x47	; 71
    1c68:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    1c6c:	18 16       	cp	r1, r24
    1c6e:	4c f5       	brge	.+82     	; 0x1cc2 <fwd_front_step+0xab4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e2       	ldi	r20, 0x20	; 32
    1c7e:	51 e4       	ldi	r21, 0x41	; 65
    1c80:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
    1c98:	0f c0       	rjmp	.+30     	; 0x1cb8 <fwd_front_step+0xaaa>
    1c9a:	80 e7       	ldi	r24, 0x70	; 112
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	9c 83       	std	Y+4, r25	; 0x04
    1ca0:	8b 83       	std	Y+3, r24	; 0x03
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <fwd_front_step+0xa98>
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cae:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	69 f7       	brne	.-38     	; 0x1c9a <fwd_front_step+0xa8c>
    1cc0:	14 c0       	rjmp	.+40     	; 0x1cea <fwd_front_step+0xadc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc4:	78 85       	ldd	r23, Y+8	; 0x08
    1cc6:	89 85       	ldd	r24, Y+9	; 0x09
    1cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cca:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9e 83       	std	Y+6, r25	; 0x06
    1cd4:	8d 83       	std	Y+5, r24	; 0x05
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cda:	9a 83       	std	Y+2, r25	; 0x02
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <fwd_front_step+0xad4>
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
 /*buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection
 buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection
 buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection
 buzzer_on();  _delay_ms(250); buzzer_off(); //use it to debug remote onnection*/

}
    1cea:	c2 58       	subi	r28, 0x82	; 130
    1cec:	df 4f       	sbci	r29, 0xFF	; 255
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	08 95       	ret

00001d02 <back_front_step>:
//--------------------------------------------------------------------------------
// This function is used for positioning robot's arms in backward direction just 
// before applying stroke to push the robot backward.
//--------------------------------------------------------------------------------
void back_front_step()
{
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	ce 57       	subi	r28, 0x7E	; 126
    1d10:	d0 40       	sbci	r29, 0x00	; 0
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
 //arm 3 and 5 move back
 angle_3B(90); angle_3C(90); angle_5B(90); angle_5C(90); //3rd & 5th arm BC servo up by 90
    1d1c:	8a e5       	ldi	r24, 0x5A	; 90
    1d1e:	0e 94 de 06 	call	0xdbc	; 0xdbc <angle_3B>
    1d22:	8a e5       	ldi	r24, 0x5A	; 90
    1d24:	0e 94 f5 06 	call	0xdea	; 0xdea <angle_3C>
    1d28:	8a e5       	ldi	r24, 0x5A	; 90
    1d2a:	0e 94 68 07 	call	0xed0	; 0xed0 <angle_5B>
    1d2e:	8a e5       	ldi	r24, 0x5A	; 90
    1d30:	0e 94 7f 07 	call	0xefe	; 0xefe <angle_5C>
    1d34:	fe 01       	movw	r30, r28
    1d36:	e5 58       	subi	r30, 0x85	; 133
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	aa e7       	ldi	r26, 0x7A	; 122
    1d40:	b3 e4       	ldi	r27, 0x43	; 67
    1d42:	80 83       	st	Z, r24
    1d44:	91 83       	std	Z+1, r25	; 0x01
    1d46:	a2 83       	std	Z+2, r26	; 0x02
    1d48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	09 58       	subi	r16, 0x89	; 137
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	fe 01       	movw	r30, r28
    1d52:	e5 58       	subi	r30, 0x85	; 133
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	26 e6       	ldi	r18, 0x66	; 102
    1d60:	36 e6       	ldi	r19, 0x66	; 102
    1d62:	46 e6       	ldi	r20, 0x66	; 102
    1d64:	55 e4       	ldi	r21, 0x45	; 69
    1d66:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	f8 01       	movw	r30, r16
    1d70:	80 83       	st	Z, r24
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	a2 83       	std	Z+2, r26	; 0x02
    1d76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e9 58       	subi	r30, 0x89	; 137
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	60 81       	ld	r22, Z
    1d80:	71 81       	ldd	r23, Z+1	; 0x01
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	44 f4       	brge	.+16     	; 0x1da6 <back_front_step+0xa4>
		__ticks = 1;
    1d96:	fe 01       	movw	r30, r28
    1d98:	eb 58       	subi	r30, 0x8B	; 139
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
    1da4:	64 c0       	rjmp	.+200    	; 0x1e6e <back_front_step+0x16c>
	else if (__tmp > 65535)
    1da6:	fe 01       	movw	r30, r28
    1da8:	e9 58       	subi	r30, 0x89	; 137
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	0c f0       	brlt	.+2      	; 0x1dc6 <back_front_step+0xc4>
    1dc4:	43 c0       	rjmp	.+134    	; 0x1e4c <back_front_step+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e5 58       	subi	r30, 0x85	; 133
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	60 81       	ld	r22, Z
    1dce:	71 81       	ldd	r23, Z+1	; 0x01
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	8e 01       	movw	r16, r28
    1de6:	0b 58       	subi	r16, 0x8B	; 139
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	f8 01       	movw	r30, r16
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
    1dfc:	1f c0       	rjmp	.+62     	; 0x1e3c <back_front_step+0x13a>
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ed 58       	subi	r30, 0x8D	; 141
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 e7       	ldi	r24, 0x70	; 112
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ed 58       	subi	r30, 0x8D	; 141
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	91 81       	ldd	r25, Z+1	; 0x01
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <back_front_step+0x114>
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ed 58       	subi	r30, 0x8D	; 141
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	de 01       	movw	r26, r28
    1e26:	ab 58       	subi	r26, 0x8B	; 139
    1e28:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	eb 58       	subi	r30, 0x8B	; 139
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	11 96       	adiw	r26, 0x01	; 1
    1e38:	9c 93       	st	X, r25
    1e3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	eb 58       	subi	r30, 0x8B	; 139
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 81       	ld	r24, Z
    1e44:	91 81       	ldd	r25, Z+1	; 0x01
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	d1 f6       	brne	.-76     	; 0x1dfe <back_front_step+0xfc>
    1e4a:	27 c0       	rjmp	.+78     	; 0x1e9a <back_front_step+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	8e 01       	movw	r16, r28
    1e4e:	0b 58       	subi	r16, 0x8B	; 139
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	e9 58       	subi	r30, 0x89	; 137
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	f8 01       	movw	r30, r16
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	de 01       	movw	r26, r28
    1e70:	af 58       	subi	r26, 0x8F	; 143
    1e72:	bf 4f       	sbci	r27, 0xFF	; 255
    1e74:	fe 01       	movw	r30, r28
    1e76:	eb 58       	subi	r30, 0x8B	; 139
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	8d 93       	st	X+, r24
    1e80:	9c 93       	st	X, r25
    1e82:	fe 01       	movw	r30, r28
    1e84:	ef 58       	subi	r30, 0x8F	; 143
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <back_front_step+0x18a>
    1e90:	fe 01       	movw	r30, r28
    1e92:	ef 58       	subi	r30, 0x8F	; 143
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	80 83       	st	Z, r24
 _delay_ms(250); 
 angle_3A(65); angle_5A(70);     //middel pair move forward while arms are up
    1e9a:	81 e4       	ldi	r24, 0x41	; 65
    1e9c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <angle_3A>
    1ea0:	86 e4       	ldi	r24, 0x46	; 70
    1ea2:	0e 94 51 07 	call	0xea2	; 0xea2 <angle_5A>
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e3 59       	subi	r30, 0x93	; 147
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	aa e7       	ldi	r26, 0x7A	; 122
    1eb2:	b3 e4       	ldi	r27, 0x43	; 67
    1eb4:	80 83       	st	Z, r24
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	a2 83       	std	Z+2, r26	; 0x02
    1eba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	8e 01       	movw	r16, r28
    1ebe:	07 59       	subi	r16, 0x97	; 151
    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e3 59       	subi	r30, 0x93	; 147
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	60 81       	ld	r22, Z
    1eca:	71 81       	ldd	r23, Z+1	; 0x01
    1ecc:	82 81       	ldd	r24, Z+2	; 0x02
    1ece:	93 81       	ldd	r25, Z+3	; 0x03
    1ed0:	26 e6       	ldi	r18, 0x66	; 102
    1ed2:	36 e6       	ldi	r19, 0x66	; 102
    1ed4:	46 e6       	ldi	r20, 0x66	; 102
    1ed6:	55 e4       	ldi	r21, 0x45	; 69
    1ed8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	f8 01       	movw	r30, r16
    1ee2:	80 83       	st	Z, r24
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	a2 83       	std	Z+2, r26	; 0x02
    1ee8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eea:	fe 01       	movw	r30, r28
    1eec:	e7 59       	subi	r30, 0x97	; 151
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	44 f4       	brge	.+16     	; 0x1f18 <back_front_step+0x216>
		__ticks = 1;
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e9 59       	subi	r30, 0x99	; 153
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	80 83       	st	Z, r24
    1f16:	64 c0       	rjmp	.+200    	; 0x1fe0 <back_front_step+0x2de>
	else if (__tmp > 65535)
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e7 59       	subi	r30, 0x97	; 151
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	60 81       	ld	r22, Z
    1f20:	71 81       	ldd	r23, Z+1	; 0x01
    1f22:	82 81       	ldd	r24, Z+2	; 0x02
    1f24:	93 81       	ldd	r25, Z+3	; 0x03
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	0c f0       	brlt	.+2      	; 0x1f38 <back_front_step+0x236>
    1f36:	43 c0       	rjmp	.+134    	; 0x1fbe <back_front_step+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e3 59       	subi	r30, 0x93	; 147
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	60 81       	ld	r22, Z
    1f40:	71 81       	ldd	r23, Z+1	; 0x01
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e2       	ldi	r20, 0x20	; 32
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8e 01       	movw	r16, r28
    1f58:	09 59       	subi	r16, 0x99	; 153
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	f8 01       	movw	r30, r16
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24
    1f6e:	1f c0       	rjmp	.+62     	; 0x1fae <back_front_step+0x2ac>
    1f70:	fe 01       	movw	r30, r28
    1f72:	eb 59       	subi	r30, 0x9B	; 155
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 e7       	ldi	r24, 0x70	; 112
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	fe 01       	movw	r30, r28
    1f80:	eb 59       	subi	r30, 0x9B	; 155
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 81       	ld	r24, Z
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <back_front_step+0x286>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	eb 59       	subi	r30, 0x9B	; 155
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f96:	de 01       	movw	r26, r28
    1f98:	a9 59       	subi	r26, 0x99	; 153
    1f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e9 59       	subi	r30, 0x99	; 153
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	11 96       	adiw	r26, 0x01	; 1
    1faa:	9c 93       	st	X, r25
    1fac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e9 59       	subi	r30, 0x99	; 153
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	d1 f6       	brne	.-76     	; 0x1f70 <back_front_step+0x26e>
    1fbc:	27 c0       	rjmp	.+78     	; 0x200c <back_front_step+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	8e 01       	movw	r16, r28
    1fc0:	09 59       	subi	r16, 0x99	; 153
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e7 59       	subi	r30, 0x97	; 151
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	60 81       	ld	r22, Z
    1fcc:	71 81       	ldd	r23, Z+1	; 0x01
    1fce:	82 81       	ldd	r24, Z+2	; 0x02
    1fd0:	93 81       	ldd	r25, Z+3	; 0x03
    1fd2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	f8 01       	movw	r30, r16
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	de 01       	movw	r26, r28
    1fe2:	ad 59       	subi	r26, 0x9D	; 157
    1fe4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e9 59       	subi	r30, 0x99	; 153
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	8d 93       	st	X+, r24
    1ff2:	9c 93       	st	X, r25
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ed 59       	subi	r30, 0x9D	; 157
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <back_front_step+0x2fc>
    2002:	fe 01       	movw	r30, r28
    2004:	ed 59       	subi	r30, 0x9D	; 157
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	80 83       	st	Z, r24
 _delay_ms(250); 
 angle_3B(125); angle_5B(55);    // put down arm
    200c:	8d e7       	ldi	r24, 0x7D	; 125
    200e:	0e 94 de 06 	call	0xdbc	; 0xdbc <angle_3B>
    2012:	87 e3       	ldi	r24, 0x37	; 55
    2014:	0e 94 68 07 	call	0xed0	; 0xed0 <angle_5B>
    2018:	fe 01       	movw	r30, r28
    201a:	e1 5a       	subi	r30, 0xA1	; 161
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	aa e7       	ldi	r26, 0x7A	; 122
    2024:	b3 e4       	ldi	r27, 0x43	; 67
    2026:	80 83       	st	Z, r24
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	a2 83       	std	Z+2, r26	; 0x02
    202c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202e:	8e 01       	movw	r16, r28
    2030:	05 5a       	subi	r16, 0xA5	; 165
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	fe 01       	movw	r30, r28
    2036:	e1 5a       	subi	r30, 0xA1	; 161
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	26 e6       	ldi	r18, 0x66	; 102
    2044:	36 e6       	ldi	r19, 0x66	; 102
    2046:	46 e6       	ldi	r20, 0x66	; 102
    2048:	55 e4       	ldi	r21, 0x45	; 69
    204a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	f8 01       	movw	r30, r16
    2054:	80 83       	st	Z, r24
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	a2 83       	std	Z+2, r26	; 0x02
    205a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    205c:	fe 01       	movw	r30, r28
    205e:	e5 5a       	subi	r30, 0xA5	; 165
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2076:	88 23       	and	r24, r24
    2078:	44 f4       	brge	.+16     	; 0x208a <back_front_step+0x388>
		__ticks = 1;
    207a:	fe 01       	movw	r30, r28
    207c:	e7 5a       	subi	r30, 0xA7	; 167
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
    2088:	64 c0       	rjmp	.+200    	; 0x2152 <back_front_step+0x450>
	else if (__tmp > 65535)
    208a:	fe 01       	movw	r30, r28
    208c:	e5 5a       	subi	r30, 0xA5	; 165
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	3f ef       	ldi	r19, 0xFF	; 255
    209c:	4f e7       	ldi	r20, 0x7F	; 127
    209e:	57 e4       	ldi	r21, 0x47	; 71
    20a0:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    20a4:	18 16       	cp	r1, r24
    20a6:	0c f0       	brlt	.+2      	; 0x20aa <back_front_step+0x3a8>
    20a8:	43 c0       	rjmp	.+134    	; 0x2130 <back_front_step+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	fe 01       	movw	r30, r28
    20ac:	e1 5a       	subi	r30, 0xA1	; 161
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	60 81       	ld	r22, Z
    20b2:	71 81       	ldd	r23, Z+1	; 0x01
    20b4:	82 81       	ldd	r24, Z+2	; 0x02
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8e 01       	movw	r16, r28
    20ca:	07 5a       	subi	r16, 0xA7	; 167
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	f8 01       	movw	r30, r16
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
    20e0:	1f c0       	rjmp	.+62     	; 0x2120 <back_front_step+0x41e>
    20e2:	fe 01       	movw	r30, r28
    20e4:	e9 5a       	subi	r30, 0xA9	; 169
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 e7       	ldi	r24, 0x70	; 112
    20ea:	91 e0       	ldi	r25, 0x01	; 1
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
    20f0:	fe 01       	movw	r30, r28
    20f2:	e9 5a       	subi	r30, 0xA9	; 169
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <back_front_step+0x3f8>
    20fe:	fe 01       	movw	r30, r28
    2100:	e9 5a       	subi	r30, 0xA9	; 169
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	de 01       	movw	r26, r28
    210a:	a7 5a       	subi	r26, 0xA7	; 167
    210c:	bf 4f       	sbci	r27, 0xFF	; 255
    210e:	fe 01       	movw	r30, r28
    2110:	e7 5a       	subi	r30, 0xA7	; 167
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	9c 93       	st	X, r25
    211e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	fe 01       	movw	r30, r28
    2122:	e7 5a       	subi	r30, 0xA7	; 167
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	d1 f6       	brne	.-76     	; 0x20e2 <back_front_step+0x3e0>
    212e:	27 c0       	rjmp	.+78     	; 0x217e <back_front_step+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2130:	8e 01       	movw	r16, r28
    2132:	07 5a       	subi	r16, 0xA7	; 167
    2134:	1f 4f       	sbci	r17, 0xFF	; 255
    2136:	fe 01       	movw	r30, r28
    2138:	e5 5a       	subi	r30, 0xA5	; 165
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	f8 01       	movw	r30, r16
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
    2152:	de 01       	movw	r26, r28
    2154:	ab 5a       	subi	r26, 0xAB	; 171
    2156:	bf 4f       	sbci	r27, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	e7 5a       	subi	r30, 0xA7	; 167
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	8d 93       	st	X+, r24
    2164:	9c 93       	st	X, r25
    2166:	fe 01       	movw	r30, r28
    2168:	eb 5a       	subi	r30, 0xAB	; 171
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	80 81       	ld	r24, Z
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <back_front_step+0x46e>
    2174:	fe 01       	movw	r30, r28
    2176:	eb 5a       	subi	r30, 0xAB	; 171
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	80 83       	st	Z, r24
 _delay_ms(250); 

 //arm 1 and 6 move back
 angle_1B(90); angle_1C(90); angle_6B(90); angle_6C(90); //1st & 6th arm BC servo up by 90
    217e:	8a e5       	ldi	r24, 0x5A	; 90
    2180:	0e 94 54 06 	call	0xca8	; 0xca8 <angle_1B>
    2184:	8a e5       	ldi	r24, 0x5A	; 90
    2186:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <angle_1C>
    218a:	8a e5       	ldi	r24, 0x5A	; 90
    218c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <angle_6B>
    2190:	8a e5       	ldi	r24, 0x5A	; 90
    2192:	0e 94 c4 07 	call	0xf88	; 0xf88 <angle_6C>
    2196:	fe 01       	movw	r30, r28
    2198:	ef 5a       	subi	r30, 0xAF	; 175
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	aa e7       	ldi	r26, 0x7A	; 122
    21a2:	b3 e4       	ldi	r27, 0x43	; 67
    21a4:	80 83       	st	Z, r24
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	a2 83       	std	Z+2, r26	; 0x02
    21aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	8e 01       	movw	r16, r28
    21ae:	03 5b       	subi	r16, 0xB3	; 179
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	fe 01       	movw	r30, r28
    21b4:	ef 5a       	subi	r30, 0xAF	; 175
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	26 e6       	ldi	r18, 0x66	; 102
    21c2:	36 e6       	ldi	r19, 0x66	; 102
    21c4:	46 e6       	ldi	r20, 0x66	; 102
    21c6:	55 e4       	ldi	r21, 0x45	; 69
    21c8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	f8 01       	movw	r30, r16
    21d2:	80 83       	st	Z, r24
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	a2 83       	std	Z+2, r26	; 0x02
    21d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21da:	fe 01       	movw	r30, r28
    21dc:	e3 5b       	subi	r30, 0xB3	; 179
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	44 f4       	brge	.+16     	; 0x2208 <__stack+0x9>
		__ticks = 1;
    21f8:	fe 01       	movw	r30, r28
    21fa:	e5 5b       	subi	r30, 0xB5	; 181
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	80 83       	st	Z, r24
    2206:	64 c0       	rjmp	.+200    	; 0x22d0 <__stack+0xd1>
	else if (__tmp > 65535)
    2208:	fe 01       	movw	r30, r28
    220a:	e3 5b       	subi	r30, 0xB3	; 179
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	3f ef       	ldi	r19, 0xFF	; 255
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	57 e4       	ldi	r21, 0x47	; 71
    221e:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	0c f0       	brlt	.+2      	; 0x2228 <__stack+0x29>
    2226:	43 c0       	rjmp	.+134    	; 0x22ae <__stack+0xaf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	fe 01       	movw	r30, r28
    222a:	ef 5a       	subi	r30, 0xAF	; 175
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8e 01       	movw	r16, r28
    2248:	05 5b       	subi	r16, 0xB5	; 181
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	f8 01       	movw	r30, r16
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	1f c0       	rjmp	.+62     	; 0x229e <__stack+0x9f>
    2260:	fe 01       	movw	r30, r28
    2262:	e7 5b       	subi	r30, 0xB7	; 183
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 e7       	ldi	r24, 0x70	; 112
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
    226e:	fe 01       	movw	r30, r28
    2270:	e7 5b       	subi	r30, 0xB7	; 183
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <__stack+0x79>
    227c:	fe 01       	movw	r30, r28
    227e:	e7 5b       	subi	r30, 0xB7	; 183
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2286:	de 01       	movw	r26, r28
    2288:	a5 5b       	subi	r26, 0xB5	; 181
    228a:	bf 4f       	sbci	r27, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e5 5b       	subi	r30, 0xB5	; 181
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	11 96       	adiw	r26, 0x01	; 1
    229a:	9c 93       	st	X, r25
    229c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	fe 01       	movw	r30, r28
    22a0:	e5 5b       	subi	r30, 0xB5	; 181
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	d1 f6       	brne	.-76     	; 0x2260 <__stack+0x61>
    22ac:	27 c0       	rjmp	.+78     	; 0x22fc <__stack+0xfd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ae:	8e 01       	movw	r16, r28
    22b0:	05 5b       	subi	r16, 0xB5	; 181
    22b2:	1f 4f       	sbci	r17, 0xFF	; 255
    22b4:	fe 01       	movw	r30, r28
    22b6:	e3 5b       	subi	r30, 0xB3	; 179
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	f8 01       	movw	r30, r16
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
    22d0:	de 01       	movw	r26, r28
    22d2:	a9 5b       	subi	r26, 0xB9	; 185
    22d4:	bf 4f       	sbci	r27, 0xFF	; 255
    22d6:	fe 01       	movw	r30, r28
    22d8:	e5 5b       	subi	r30, 0xB5	; 181
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	8d 93       	st	X+, r24
    22e2:	9c 93       	st	X, r25
    22e4:	fe 01       	movw	r30, r28
    22e6:	e9 5b       	subi	r30, 0xB9	; 185
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <__stack+0xef>
    22f2:	fe 01       	movw	r30, r28
    22f4:	e9 5b       	subi	r30, 0xB9	; 185
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
 _delay_ms(250); 
 angle_1A(155); angle_6A(115);   //middel pair move back while arms are up
    22fc:	8b e9       	ldi	r24, 0x9B	; 155
    22fe:	0e 94 3d 06 	call	0xc7a	; 0xc7a <angle_1A>
    2302:	83 e7       	ldi	r24, 0x73	; 115
    2304:	0e 94 96 07 	call	0xf2c	; 0xf2c <angle_6A>
    2308:	fe 01       	movw	r30, r28
    230a:	ed 5b       	subi	r30, 0xBD	; 189
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	aa e7       	ldi	r26, 0x7A	; 122
    2314:	b3 e4       	ldi	r27, 0x43	; 67
    2316:	80 83       	st	Z, r24
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	a2 83       	std	Z+2, r26	; 0x02
    231c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231e:	8e 01       	movw	r16, r28
    2320:	01 5c       	subi	r16, 0xC1	; 193
    2322:	1f 4f       	sbci	r17, 0xFF	; 255
    2324:	fe 01       	movw	r30, r28
    2326:	ed 5b       	subi	r30, 0xBD	; 189
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	26 e6       	ldi	r18, 0x66	; 102
    2334:	36 e6       	ldi	r19, 0x66	; 102
    2336:	46 e6       	ldi	r20, 0x66	; 102
    2338:	55 e4       	ldi	r21, 0x45	; 69
    233a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	f8 01       	movw	r30, r16
    2344:	80 83       	st	Z, r24
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	a2 83       	std	Z+2, r26	; 0x02
    234a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    234c:	fe 01       	movw	r30, r28
    234e:	ff 96       	adiw	r30, 0x3f	; 63
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e8       	ldi	r20, 0x80	; 128
    235e:	5f e3       	ldi	r21, 0x3F	; 63
    2360:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2364:	88 23       	and	r24, r24
    2366:	2c f4       	brge	.+10     	; 0x2372 <__stack+0x173>
		__ticks = 1;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9e af       	std	Y+62, r25	; 0x3e
    236e:	8d af       	std	Y+61, r24	; 0x3d
    2370:	46 c0       	rjmp	.+140    	; 0x23fe <__stack+0x1ff>
	else if (__tmp > 65535)
    2372:	fe 01       	movw	r30, r28
    2374:	ff 96       	adiw	r30, 0x3f	; 63
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	64 f5       	brge	.+88     	; 0x23e6 <__stack+0x1e7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	fe 01       	movw	r30, r28
    2390:	ed 5b       	subi	r30, 0xBD	; 189
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e2       	ldi	r20, 0x20	; 32
    23a2:	51 e4       	ldi	r21, 0x41	; 65
    23a4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9e af       	std	Y+62, r25	; 0x3e
    23ba:	8d af       	std	Y+61, r24	; 0x3d
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <__stack+0x1dd>
    23be:	80 e7       	ldi	r24, 0x70	; 112
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	9c af       	std	Y+60, r25	; 0x3c
    23c4:	8b af       	std	Y+59, r24	; 0x3b
    23c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    23c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <__stack+0x1cb>
    23ce:	9c af       	std	Y+60, r25	; 0x3c
    23d0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	9e af       	std	Y+62, r25	; 0x3e
    23da:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    23de:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	69 f7       	brne	.-38     	; 0x23be <__stack+0x1bf>
    23e4:	16 c0       	rjmp	.+44     	; 0x2412 <__stack+0x213>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e6:	fe 01       	movw	r30, r28
    23e8:	ff 96       	adiw	r30, 0x3f	; 63
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9e af       	std	Y+62, r25	; 0x3e
    23fc:	8d af       	std	Y+61, r24	; 0x3d
    23fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2400:	9e ad       	ldd	r25, Y+62	; 0x3e
    2402:	9a af       	std	Y+58, r25	; 0x3a
    2404:	89 af       	std	Y+57, r24	; 0x39
    2406:	89 ad       	ldd	r24, Y+57	; 0x39
    2408:	9a ad       	ldd	r25, Y+58	; 0x3a
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <__stack+0x20b>
    240e:	9a af       	std	Y+58, r25	; 0x3a
    2410:	89 af       	std	Y+57, r24	; 0x39
 _delay_ms(250); 
 angle_1B(125); angle_6B(55);    // put down arm
    2412:	8d e7       	ldi	r24, 0x7D	; 125
    2414:	0e 94 54 06 	call	0xca8	; 0xca8 <angle_1B>
    2418:	87 e3       	ldi	r24, 0x37	; 55
    241a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <angle_6B>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	aa e7       	ldi	r26, 0x7A	; 122
    2424:	b3 e4       	ldi	r27, 0x43	; 67
    2426:	8d ab       	std	Y+53, r24	; 0x35
    2428:	9e ab       	std	Y+54, r25	; 0x36
    242a:	af ab       	std	Y+55, r26	; 0x37
    242c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242e:	6d a9       	ldd	r22, Y+53	; 0x35
    2430:	7e a9       	ldd	r23, Y+54	; 0x36
    2432:	8f a9       	ldd	r24, Y+55	; 0x37
    2434:	98 ad       	ldd	r25, Y+56	; 0x38
    2436:	26 e6       	ldi	r18, 0x66	; 102
    2438:	36 e6       	ldi	r19, 0x66	; 102
    243a:	46 e6       	ldi	r20, 0x66	; 102
    243c:	55 e4       	ldi	r21, 0x45	; 69
    243e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	89 ab       	std	Y+49, r24	; 0x31
    2448:	9a ab       	std	Y+50, r25	; 0x32
    244a:	ab ab       	std	Y+51, r26	; 0x33
    244c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    244e:	69 a9       	ldd	r22, Y+49	; 0x31
    2450:	7a a9       	ldd	r23, Y+50	; 0x32
    2452:	8b a9       	ldd	r24, Y+51	; 0x33
    2454:	9c a9       	ldd	r25, Y+52	; 0x34
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e8       	ldi	r20, 0x80	; 128
    245c:	5f e3       	ldi	r21, 0x3F	; 63
    245e:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2462:	88 23       	and	r24, r24
    2464:	2c f4       	brge	.+10     	; 0x2470 <__stack+0x271>
		__ticks = 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	98 ab       	std	Y+48, r25	; 0x30
    246c:	8f a7       	std	Y+47, r24	; 0x2f
    246e:	3f c0       	rjmp	.+126    	; 0x24ee <__stack+0x2ef>
	else if (__tmp > 65535)
    2470:	69 a9       	ldd	r22, Y+49	; 0x31
    2472:	7a a9       	ldd	r23, Y+50	; 0x32
    2474:	8b a9       	ldd	r24, Y+51	; 0x33
    2476:	9c a9       	ldd	r25, Y+52	; 0x34
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	3f ef       	ldi	r19, 0xFF	; 255
    247c:	4f e7       	ldi	r20, 0x7F	; 127
    247e:	57 e4       	ldi	r21, 0x47	; 71
    2480:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2484:	18 16       	cp	r1, r24
    2486:	4c f5       	brge	.+82     	; 0x24da <__stack+0x2db>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	6d a9       	ldd	r22, Y+53	; 0x35
    248a:	7e a9       	ldd	r23, Y+54	; 0x36
    248c:	8f a9       	ldd	r24, Y+55	; 0x37
    248e:	98 ad       	ldd	r25, Y+56	; 0x38
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e2       	ldi	r20, 0x20	; 32
    2496:	51 e4       	ldi	r21, 0x41	; 65
    2498:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	98 ab       	std	Y+48, r25	; 0x30
    24ae:	8f a7       	std	Y+47, r24	; 0x2f
    24b0:	0f c0       	rjmp	.+30     	; 0x24d0 <__stack+0x2d1>
    24b2:	80 e7       	ldi	r24, 0x70	; 112
    24b4:	91 e0       	ldi	r25, 0x01	; 1
    24b6:	9e a7       	std	Y+46, r25	; 0x2e
    24b8:	8d a7       	std	Y+45, r24	; 0x2d
    24ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    24bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <__stack+0x2bf>
    24c2:	9e a7       	std	Y+46, r25	; 0x2e
    24c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	98 ab       	std	Y+48, r25	; 0x30
    24ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d2:	98 a9       	ldd	r25, Y+48	; 0x30
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	69 f7       	brne	.-38     	; 0x24b2 <__stack+0x2b3>
    24d8:	14 c0       	rjmp	.+40     	; 0x2502 <__stack+0x303>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24da:	69 a9       	ldd	r22, Y+49	; 0x31
    24dc:	7a a9       	ldd	r23, Y+50	; 0x32
    24de:	8b a9       	ldd	r24, Y+51	; 0x33
    24e0:	9c a9       	ldd	r25, Y+52	; 0x34
    24e2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	98 ab       	std	Y+48, r25	; 0x30
    24ec:	8f a7       	std	Y+47, r24	; 0x2f
    24ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f0:	98 a9       	ldd	r25, Y+48	; 0x30
    24f2:	9c a7       	std	Y+44, r25	; 0x2c
    24f4:	8b a7       	std	Y+43, r24	; 0x2b
    24f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <__stack+0x2fb>
    24fe:	9c a7       	std	Y+44, r25	; 0x2c
    2500:	8b a7       	std	Y+43, r24	; 0x2b
 _delay_ms(250);
 
 //arm 2 and 4 move back
 angle_2B(90); angle_2C(90); angle_4B(90); angle_4C(90); //2nd & 4th arm BC servo up by 90
    2502:	8a e5       	ldi	r24, 0x5A	; 90
    2504:	0e 94 99 06 	call	0xd32	; 0xd32 <angle_2B>
    2508:	8a e5       	ldi	r24, 0x5A	; 90
    250a:	0e 94 b0 06 	call	0xd60	; 0xd60 <angle_2C>
    250e:	8a e5       	ldi	r24, 0x5A	; 90
    2510:	0e 94 23 07 	call	0xe46	; 0xe46 <angle_4B>
    2514:	8a e5       	ldi	r24, 0x5A	; 90
    2516:	0e 94 3a 07 	call	0xe74	; 0xe74 <angle_4C>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	aa e7       	ldi	r26, 0x7A	; 122
    2520:	b3 e4       	ldi	r27, 0x43	; 67
    2522:	8f a3       	std	Y+39, r24	; 0x27
    2524:	98 a7       	std	Y+40, r25	; 0x28
    2526:	a9 a7       	std	Y+41, r26	; 0x29
    2528:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252a:	6f a1       	ldd	r22, Y+39	; 0x27
    252c:	78 a5       	ldd	r23, Y+40	; 0x28
    252e:	89 a5       	ldd	r24, Y+41	; 0x29
    2530:	9a a5       	ldd	r25, Y+42	; 0x2a
    2532:	26 e6       	ldi	r18, 0x66	; 102
    2534:	36 e6       	ldi	r19, 0x66	; 102
    2536:	46 e6       	ldi	r20, 0x66	; 102
    2538:	55 e4       	ldi	r21, 0x45	; 69
    253a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8b a3       	std	Y+35, r24	; 0x23
    2544:	9c a3       	std	Y+36, r25	; 0x24
    2546:	ad a3       	std	Y+37, r26	; 0x25
    2548:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    254a:	6b a1       	ldd	r22, Y+35	; 0x23
    254c:	7c a1       	ldd	r23, Y+36	; 0x24
    254e:	8d a1       	ldd	r24, Y+37	; 0x25
    2550:	9e a1       	ldd	r25, Y+38	; 0x26
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	2c f4       	brge	.+10     	; 0x256c <__stack+0x36d>
		__ticks = 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9a a3       	std	Y+34, r25	; 0x22
    2568:	89 a3       	std	Y+33, r24	; 0x21
    256a:	3f c0       	rjmp	.+126    	; 0x25ea <__stack+0x3eb>
	else if (__tmp > 65535)
    256c:	6b a1       	ldd	r22, Y+35	; 0x23
    256e:	7c a1       	ldd	r23, Y+36	; 0x24
    2570:	8d a1       	ldd	r24, Y+37	; 0x25
    2572:	9e a1       	ldd	r25, Y+38	; 0x26
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	4c f5       	brge	.+82     	; 0x25d6 <__stack+0x3d7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	6f a1       	ldd	r22, Y+39	; 0x27
    2586:	78 a5       	ldd	r23, Y+40	; 0x28
    2588:	89 a5       	ldd	r24, Y+41	; 0x29
    258a:	9a a5       	ldd	r25, Y+42	; 0x2a
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9a a3       	std	Y+34, r25	; 0x22
    25aa:	89 a3       	std	Y+33, r24	; 0x21
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <__stack+0x3cd>
    25ae:	80 e7       	ldi	r24, 0x70	; 112
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	98 a3       	std	Y+32, r25	; 0x20
    25b4:	8f 8f       	std	Y+31, r24	; 0x1f
    25b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b8:	98 a1       	ldd	r25, Y+32	; 0x20
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <__stack+0x3bb>
    25be:	98 a3       	std	Y+32, r25	; 0x20
    25c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	9a a1       	ldd	r25, Y+34	; 0x22
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	9a a3       	std	Y+34, r25	; 0x22
    25ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	89 a1       	ldd	r24, Y+33	; 0x21
    25ce:	9a a1       	ldd	r25, Y+34	; 0x22
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	69 f7       	brne	.-38     	; 0x25ae <__stack+0x3af>
    25d4:	14 c0       	rjmp	.+40     	; 0x25fe <__stack+0x3ff>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	6b a1       	ldd	r22, Y+35	; 0x23
    25d8:	7c a1       	ldd	r23, Y+36	; 0x24
    25da:	8d a1       	ldd	r24, Y+37	; 0x25
    25dc:	9e a1       	ldd	r25, Y+38	; 0x26
    25de:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9a a3       	std	Y+34, r25	; 0x22
    25e8:	89 a3       	std	Y+33, r24	; 0x21
    25ea:	89 a1       	ldd	r24, Y+33	; 0x21
    25ec:	9a a1       	ldd	r25, Y+34	; 0x22
    25ee:	9e 8f       	std	Y+30, r25	; 0x1e
    25f0:	8d 8f       	std	Y+29, r24	; 0x1d
    25f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <__stack+0x3f7>
    25fa:	9e 8f       	std	Y+30, r25	; 0x1e
    25fc:	8d 8f       	std	Y+29, r24	; 0x1d
 _delay_ms(250); 
 angle_2A(110); angle_4A(25);    //front pair move forward while arms are up
    25fe:	8e e6       	ldi	r24, 0x6E	; 110
    2600:	0e 94 82 06 	call	0xd04	; 0xd04 <angle_2A>
    2604:	89 e1       	ldi	r24, 0x19	; 25
    2606:	0e 94 0c 07 	call	0xe18	; 0xe18 <angle_4A>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	aa e7       	ldi	r26, 0x7A	; 122
    2610:	b3 e4       	ldi	r27, 0x43	; 67
    2612:	89 8f       	std	Y+25, r24	; 0x19
    2614:	9a 8f       	std	Y+26, r25	; 0x1a
    2616:	ab 8f       	std	Y+27, r26	; 0x1b
    2618:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	69 8d       	ldd	r22, Y+25	; 0x19
    261c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    261e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2620:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2622:	26 e6       	ldi	r18, 0x66	; 102
    2624:	36 e6       	ldi	r19, 0x66	; 102
    2626:	46 e6       	ldi	r20, 0x66	; 102
    2628:	55 e4       	ldi	r21, 0x45	; 69
    262a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8d 8b       	std	Y+21, r24	; 0x15
    2634:	9e 8b       	std	Y+22, r25	; 0x16
    2636:	af 8b       	std	Y+23, r26	; 0x17
    2638:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    263a:	6d 89       	ldd	r22, Y+21	; 0x15
    263c:	7e 89       	ldd	r23, Y+22	; 0x16
    263e:	8f 89       	ldd	r24, Y+23	; 0x17
    2640:	98 8d       	ldd	r25, Y+24	; 0x18
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    264e:	88 23       	and	r24, r24
    2650:	2c f4       	brge	.+10     	; 0x265c <__stack+0x45d>
		__ticks = 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9c 8b       	std	Y+20, r25	; 0x14
    2658:	8b 8b       	std	Y+19, r24	; 0x13
    265a:	3f c0       	rjmp	.+126    	; 0x26da <__stack+0x4db>
	else if (__tmp > 65535)
    265c:	6d 89       	ldd	r22, Y+21	; 0x15
    265e:	7e 89       	ldd	r23, Y+22	; 0x16
    2660:	8f 89       	ldd	r24, Y+23	; 0x17
    2662:	98 8d       	ldd	r25, Y+24	; 0x18
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	4c f5       	brge	.+82     	; 0x26c6 <__stack+0x4c7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	69 8d       	ldd	r22, Y+25	; 0x19
    2676:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    267a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9c 8b       	std	Y+20, r25	; 0x14
    269a:	8b 8b       	std	Y+19, r24	; 0x13
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <__stack+0x4bd>
    269e:	80 e7       	ldi	r24, 0x70	; 112
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	9a 8b       	std	Y+18, r25	; 0x12
    26a4:	89 8b       	std	Y+17, r24	; 0x11
    26a6:	89 89       	ldd	r24, Y+17	; 0x11
    26a8:	9a 89       	ldd	r25, Y+18	; 0x12
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <__stack+0x4ab>
    26ae:	9a 8b       	std	Y+18, r25	; 0x12
    26b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9c 8b       	std	Y+20, r25	; 0x14
    26ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	8b 89       	ldd	r24, Y+19	; 0x13
    26be:	9c 89       	ldd	r25, Y+20	; 0x14
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	69 f7       	brne	.-38     	; 0x269e <__stack+0x49f>
    26c4:	14 c0       	rjmp	.+40     	; 0x26ee <__stack+0x4ef>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	6d 89       	ldd	r22, Y+21	; 0x15
    26c8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ca:	8f 89       	ldd	r24, Y+23	; 0x17
    26cc:	98 8d       	ldd	r25, Y+24	; 0x18
    26ce:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9c 8b       	std	Y+20, r25	; 0x14
    26d8:	8b 8b       	std	Y+19, r24	; 0x13
    26da:	8b 89       	ldd	r24, Y+19	; 0x13
    26dc:	9c 89       	ldd	r25, Y+20	; 0x14
    26de:	98 8b       	std	Y+16, r25	; 0x10
    26e0:	8f 87       	std	Y+15, r24	; 0x0f
    26e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e4:	98 89       	ldd	r25, Y+16	; 0x10
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <__stack+0x4e7>
    26ea:	98 8b       	std	Y+16, r25	; 0x10
    26ec:	8f 87       	std	Y+15, r24	; 0x0f
 _delay_ms(250); 
 angle_2B(125); angle_4B(55);    // put down arm
    26ee:	8d e7       	ldi	r24, 0x7D	; 125
    26f0:	0e 94 99 06 	call	0xd32	; 0xd32 <angle_2B>
    26f4:	87 e3       	ldi	r24, 0x37	; 55
    26f6:	0e 94 23 07 	call	0xe46	; 0xe46 <angle_4B>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	aa e7       	ldi	r26, 0x7A	; 122
    2700:	b3 e4       	ldi	r27, 0x43	; 67
    2702:	8b 87       	std	Y+11, r24	; 0x0b
    2704:	9c 87       	std	Y+12, r25	; 0x0c
    2706:	ad 87       	std	Y+13, r26	; 0x0d
    2708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270a:	6b 85       	ldd	r22, Y+11	; 0x0b
    270c:	7c 85       	ldd	r23, Y+12	; 0x0c
    270e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2710:	9e 85       	ldd	r25, Y+14	; 0x0e
    2712:	26 e6       	ldi	r18, 0x66	; 102
    2714:	36 e6       	ldi	r19, 0x66	; 102
    2716:	46 e6       	ldi	r20, 0x66	; 102
    2718:	55 e4       	ldi	r21, 0x45	; 69
    271a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	8f 83       	std	Y+7, r24	; 0x07
    2724:	98 87       	std	Y+8, r25	; 0x08
    2726:	a9 87       	std	Y+9, r26	; 0x09
    2728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e8       	ldi	r20, 0x80	; 128
    2738:	5f e3       	ldi	r21, 0x3F	; 63
    273a:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    273e:	88 23       	and	r24, r24
    2740:	2c f4       	brge	.+10     	; 0x274c <__stack+0x54d>
		__ticks = 1;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9e 83       	std	Y+6, r25	; 0x06
    2748:	8d 83       	std	Y+5, r24	; 0x05
    274a:	3f c0       	rjmp	.+126    	; 0x27ca <__stack+0x5cb>
	else if (__tmp > 65535)
    274c:	6f 81       	ldd	r22, Y+7	; 0x07
    274e:	78 85       	ldd	r23, Y+8	; 0x08
    2750:	89 85       	ldd	r24, Y+9	; 0x09
    2752:	9a 85       	ldd	r25, Y+10	; 0x0a
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	3f ef       	ldi	r19, 0xFF	; 255
    2758:	4f e7       	ldi	r20, 0x7F	; 127
    275a:	57 e4       	ldi	r21, 0x47	; 71
    275c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2760:	18 16       	cp	r1, r24
    2762:	4c f5       	brge	.+82     	; 0x27b6 <__stack+0x5b7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2764:	6b 85       	ldd	r22, Y+11	; 0x0b
    2766:	7c 85       	ldd	r23, Y+12	; 0x0c
    2768:	8d 85       	ldd	r24, Y+13	; 0x0d
    276a:	9e 85       	ldd	r25, Y+14	; 0x0e
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e2       	ldi	r20, 0x20	; 32
    2772:	51 e4       	ldi	r21, 0x41	; 65
    2774:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	bc 01       	movw	r22, r24
    277e:	cd 01       	movw	r24, r26
    2780:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
    278c:	0f c0       	rjmp	.+30     	; 0x27ac <__stack+0x5ad>
    278e:	80 e7       	ldi	r24, 0x70	; 112
    2790:	91 e0       	ldi	r25, 0x01	; 1
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	9c 81       	ldd	r25, Y+4	; 0x04
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	f1 f7       	brne	.-4      	; 0x279a <__stack+0x59b>
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	9e 83       	std	Y+6, r25	; 0x06
    27aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ac:	8d 81       	ldd	r24, Y+5	; 0x05
    27ae:	9e 81       	ldd	r25, Y+6	; 0x06
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	69 f7       	brne	.-38     	; 0x278e <__stack+0x58f>
    27b4:	14 c0       	rjmp	.+40     	; 0x27de <__stack+0x5df>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b6:	6f 81       	ldd	r22, Y+7	; 0x07
    27b8:	78 85       	ldd	r23, Y+8	; 0x08
    27ba:	89 85       	ldd	r24, Y+9	; 0x09
    27bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27be:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	9e 83       	std	Y+6, r25	; 0x06
    27c8:	8d 83       	std	Y+5, r24	; 0x05
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	9e 81       	ldd	r25, Y+6	; 0x06
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <__stack+0x5d7>
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(250); 
}
    27de:	c2 58       	subi	r28, 0x82	; 130
    27e0:	df 4f       	sbci	r29, 0xFF	; 255
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	08 95       	ret

000027f6 <even_A_servo_45>:

//--------------------------------------------------------------------------------
// function to move repective servos of even and odd arms by specified angle
//--------------------------------------------------------------------------------
void even_A_servo_45 (void) 
{ angle_2A(45); angle_4A(45); angle_6A(45); }
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	8d e2       	ldi	r24, 0x2D	; 45
    2800:	0e 94 82 06 	call	0xd04	; 0xd04 <angle_2A>
    2804:	8d e2       	ldi	r24, 0x2D	; 45
    2806:	0e 94 0c 07 	call	0xe18	; 0xe18 <angle_4A>
    280a:	8d e2       	ldi	r24, 0x2D	; 45
    280c:	0e 94 96 07 	call	0xf2c	; 0xf2c <angle_6A>
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <even_A_servo_135>:

void even_A_servo_135 (void)
{ angle_2A(135); angle_4A(135); angle_6A(135); }
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	87 e8       	ldi	r24, 0x87	; 135
    2820:	0e 94 82 06 	call	0xd04	; 0xd04 <angle_2A>
    2824:	87 e8       	ldi	r24, 0x87	; 135
    2826:	0e 94 0c 07 	call	0xe18	; 0xe18 <angle_4A>
    282a:	87 e8       	ldi	r24, 0x87	; 135
    282c:	0e 94 96 07 	call	0xf2c	; 0xf2c <angle_6A>
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <even_B_servo_up_90>:

void even_B_servo_up_90 (void)
{ angle_2B(90); angle_4B(90); angle_6B(90); }
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	8a e5       	ldi	r24, 0x5A	; 90
    2840:	0e 94 99 06 	call	0xd32	; 0xd32 <angle_2B>
    2844:	8a e5       	ldi	r24, 0x5A	; 90
    2846:	0e 94 23 07 	call	0xe46	; 0xe46 <angle_4B>
    284a:	8a e5       	ldi	r24, 0x5A	; 90
    284c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <angle_6B>
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <even_B_servo_down_125>:

void even_B_servo_down_125 (void)
{ angle_2B(125); angle_4B(55); angle_6B(55);}
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	8d e7       	ldi	r24, 0x7D	; 125
    2860:	0e 94 99 06 	call	0xd32	; 0xd32 <angle_2B>
    2864:	87 e3       	ldi	r24, 0x37	; 55
    2866:	0e 94 23 07 	call	0xe46	; 0xe46 <angle_4B>
    286a:	87 e3       	ldi	r24, 0x37	; 55
    286c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <angle_6B>
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <odd_A_servo_45>:

void odd_A_servo_45 (void)
{ angle_1A(45); angle_3A(45); angle_5A(45); }
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	8d e2       	ldi	r24, 0x2D	; 45
    2880:	0e 94 3d 06 	call	0xc7a	; 0xc7a <angle_1A>
    2884:	8d e2       	ldi	r24, 0x2D	; 45
    2886:	0e 94 c7 06 	call	0xd8e	; 0xd8e <angle_3A>
    288a:	8d e2       	ldi	r24, 0x2D	; 45
    288c:	0e 94 51 07 	call	0xea2	; 0xea2 <angle_5A>
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <odd_A_servo_135>:

void odd_A_servo_135 (void) 
{ angle_1A(135); angle_3A(135); angle_5A(135); }
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	87 e8       	ldi	r24, 0x87	; 135
    28a0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <angle_1A>
    28a4:	87 e8       	ldi	r24, 0x87	; 135
    28a6:	0e 94 c7 06 	call	0xd8e	; 0xd8e <angle_3A>
    28aa:	87 e8       	ldi	r24, 0x87	; 135
    28ac:	0e 94 51 07 	call	0xea2	; 0xea2 <angle_5A>
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <odd_B_servo_up_90>:

void odd_B_servo_up_90 (void)
{ angle_1B(90); angle_3B(90); angle_5B(90); }
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	8a e5       	ldi	r24, 0x5A	; 90
    28c0:	0e 94 54 06 	call	0xca8	; 0xca8 <angle_1B>
    28c4:	8a e5       	ldi	r24, 0x5A	; 90
    28c6:	0e 94 de 06 	call	0xdbc	; 0xdbc <angle_3B>
    28ca:	8a e5       	ldi	r24, 0x5A	; 90
    28cc:	0e 94 68 07 	call	0xed0	; 0xed0 <angle_5B>
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <odd_B_servo_down_55>:

void odd_B_servo_down_55 (void)
{ angle_1B(125); angle_3B(125); angle_5B(55); }
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	8d e7       	ldi	r24, 0x7D	; 125
    28e0:	0e 94 54 06 	call	0xca8	; 0xca8 <angle_1B>
    28e4:	8d e7       	ldi	r24, 0x7D	; 125
    28e6:	0e 94 de 06 	call	0xdbc	; 0xdbc <angle_3B>
    28ea:	87 e3       	ldi	r24, 0x37	; 55
    28ec:	0e 94 68 07 	call	0xed0	; 0xed0 <angle_5B>
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <clock_wise_step>:
//--------------------------------------------------------------------------------
// This function is used for positioning robot's arms in clockwise direction just 
// before applying stroke to rotate the robot, clockwise.
//--------------------------------------------------------------------------------
void clock_wise_step(void)
{
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	e8 97       	sbiw	r28, 0x38	; 56
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
 // arms are lifted and moved in the desired direction
 even_B_servo_up_90(); even_A_servo_45(); _delay_ms(250); 
    290a:	0e 94 1b 14 	call	0x2836	; 0x2836 <even_B_servo_up_90>
    290e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <even_A_servo_45>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	aa e7       	ldi	r26, 0x7A	; 122
    2918:	b3 e4       	ldi	r27, 0x43	; 67
    291a:	8d ab       	std	Y+53, r24	; 0x35
    291c:	9e ab       	std	Y+54, r25	; 0x36
    291e:	af ab       	std	Y+55, r26	; 0x37
    2920:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2922:	6d a9       	ldd	r22, Y+53	; 0x35
    2924:	7e a9       	ldd	r23, Y+54	; 0x36
    2926:	8f a9       	ldd	r24, Y+55	; 0x37
    2928:	98 ad       	ldd	r25, Y+56	; 0x38
    292a:	26 e6       	ldi	r18, 0x66	; 102
    292c:	36 e6       	ldi	r19, 0x66	; 102
    292e:	46 e6       	ldi	r20, 0x66	; 102
    2930:	55 e4       	ldi	r21, 0x45	; 69
    2932:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	89 ab       	std	Y+49, r24	; 0x31
    293c:	9a ab       	std	Y+50, r25	; 0x32
    293e:	ab ab       	std	Y+51, r26	; 0x33
    2940:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2942:	69 a9       	ldd	r22, Y+49	; 0x31
    2944:	7a a9       	ldd	r23, Y+50	; 0x32
    2946:	8b a9       	ldd	r24, Y+51	; 0x33
    2948:	9c a9       	ldd	r25, Y+52	; 0x34
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e8       	ldi	r20, 0x80	; 128
    2950:	5f e3       	ldi	r21, 0x3F	; 63
    2952:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2956:	88 23       	and	r24, r24
    2958:	2c f4       	brge	.+10     	; 0x2964 <clock_wise_step+0x6e>
		__ticks = 1;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	98 ab       	std	Y+48, r25	; 0x30
    2960:	8f a7       	std	Y+47, r24	; 0x2f
    2962:	3f c0       	rjmp	.+126    	; 0x29e2 <clock_wise_step+0xec>
	else if (__tmp > 65535)
    2964:	69 a9       	ldd	r22, Y+49	; 0x31
    2966:	7a a9       	ldd	r23, Y+50	; 0x32
    2968:	8b a9       	ldd	r24, Y+51	; 0x33
    296a:	9c a9       	ldd	r25, Y+52	; 0x34
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	3f ef       	ldi	r19, 0xFF	; 255
    2970:	4f e7       	ldi	r20, 0x7F	; 127
    2972:	57 e4       	ldi	r21, 0x47	; 71
    2974:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2978:	18 16       	cp	r1, r24
    297a:	4c f5       	brge	.+82     	; 0x29ce <clock_wise_step+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297c:	6d a9       	ldd	r22, Y+53	; 0x35
    297e:	7e a9       	ldd	r23, Y+54	; 0x36
    2980:	8f a9       	ldd	r24, Y+55	; 0x37
    2982:	98 ad       	ldd	r25, Y+56	; 0x38
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e2       	ldi	r20, 0x20	; 32
    298a:	51 e4       	ldi	r21, 0x41	; 65
    298c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	98 ab       	std	Y+48, r25	; 0x30
    29a2:	8f a7       	std	Y+47, r24	; 0x2f
    29a4:	0f c0       	rjmp	.+30     	; 0x29c4 <clock_wise_step+0xce>
    29a6:	80 e7       	ldi	r24, 0x70	; 112
    29a8:	91 e0       	ldi	r25, 0x01	; 1
    29aa:	9e a7       	std	Y+46, r25	; 0x2e
    29ac:	8d a7       	std	Y+45, r24	; 0x2d
    29ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    29b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <clock_wise_step+0xbc>
    29b6:	9e a7       	std	Y+46, r25	; 0x2e
    29b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    29bc:	98 a9       	ldd	r25, Y+48	; 0x30
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	98 ab       	std	Y+48, r25	; 0x30
    29c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c6:	98 a9       	ldd	r25, Y+48	; 0x30
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	69 f7       	brne	.-38     	; 0x29a6 <clock_wise_step+0xb0>
    29cc:	14 c0       	rjmp	.+40     	; 0x29f6 <clock_wise_step+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ce:	69 a9       	ldd	r22, Y+49	; 0x31
    29d0:	7a a9       	ldd	r23, Y+50	; 0x32
    29d2:	8b a9       	ldd	r24, Y+51	; 0x33
    29d4:	9c a9       	ldd	r25, Y+52	; 0x34
    29d6:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	98 ab       	std	Y+48, r25	; 0x30
    29e0:	8f a7       	std	Y+47, r24	; 0x2f
    29e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e4:	98 a9       	ldd	r25, Y+48	; 0x30
    29e6:	9c a7       	std	Y+44, r25	; 0x2c
    29e8:	8b a7       	std	Y+43, r24	; 0x2b
    29ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <clock_wise_step+0xf8>
    29f2:	9c a7       	std	Y+44, r25	; 0x2c
    29f4:	8b a7       	std	Y+43, r24	; 0x2b
 even_B_servo_down_125(); _delay_ms(250); 
    29f6:	0e 94 2b 14 	call	0x2856	; 0x2856 <even_B_servo_down_125>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	aa e7       	ldi	r26, 0x7A	; 122
    2a00:	b3 e4       	ldi	r27, 0x43	; 67
    2a02:	8f a3       	std	Y+39, r24	; 0x27
    2a04:	98 a7       	std	Y+40, r25	; 0x28
    2a06:	a9 a7       	std	Y+41, r26	; 0x29
    2a08:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a0c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a0e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a10:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a12:	26 e6       	ldi	r18, 0x66	; 102
    2a14:	36 e6       	ldi	r19, 0x66	; 102
    2a16:	46 e6       	ldi	r20, 0x66	; 102
    2a18:	55 e4       	ldi	r21, 0x45	; 69
    2a1a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8b a3       	std	Y+35, r24	; 0x23
    2a24:	9c a3       	std	Y+36, r25	; 0x24
    2a26:	ad a3       	std	Y+37, r26	; 0x25
    2a28:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a30:	9e a1       	ldd	r25, Y+38	; 0x26
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	2c f4       	brge	.+10     	; 0x2a4c <clock_wise_step+0x156>
		__ticks = 1;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9a a3       	std	Y+34, r25	; 0x22
    2a48:	89 a3       	std	Y+33, r24	; 0x21
    2a4a:	3f c0       	rjmp	.+126    	; 0x2aca <clock_wise_step+0x1d4>
	else if (__tmp > 65535)
    2a4c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a4e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a50:	8d a1       	ldd	r24, Y+37	; 0x25
    2a52:	9e a1       	ldd	r25, Y+38	; 0x26
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	3f ef       	ldi	r19, 0xFF	; 255
    2a58:	4f e7       	ldi	r20, 0x7F	; 127
    2a5a:	57 e4       	ldi	r21, 0x47	; 71
    2a5c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2a60:	18 16       	cp	r1, r24
    2a62:	4c f5       	brge	.+82     	; 0x2ab6 <clock_wise_step+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a64:	6f a1       	ldd	r22, Y+39	; 0x27
    2a66:	78 a5       	ldd	r23, Y+40	; 0x28
    2a68:	89 a5       	ldd	r24, Y+41	; 0x29
    2a6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e2       	ldi	r20, 0x20	; 32
    2a72:	51 e4       	ldi	r21, 0x41	; 65
    2a74:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9a a3       	std	Y+34, r25	; 0x22
    2a8a:	89 a3       	std	Y+33, r24	; 0x21
    2a8c:	0f c0       	rjmp	.+30     	; 0x2aac <clock_wise_step+0x1b6>
    2a8e:	80 e7       	ldi	r24, 0x70	; 112
    2a90:	91 e0       	ldi	r25, 0x01	; 1
    2a92:	98 a3       	std	Y+32, r25	; 0x20
    2a94:	8f 8f       	std	Y+31, r24	; 0x1f
    2a96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a98:	98 a1       	ldd	r25, Y+32	; 0x20
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <clock_wise_step+0x1a4>
    2a9e:	98 a3       	std	Y+32, r25	; 0x20
    2aa0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa2:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa4:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	9a a3       	std	Y+34, r25	; 0x22
    2aaa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aac:	89 a1       	ldd	r24, Y+33	; 0x21
    2aae:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	69 f7       	brne	.-38     	; 0x2a8e <clock_wise_step+0x198>
    2ab4:	14 c0       	rjmp	.+40     	; 0x2ade <clock_wise_step+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab8:	7c a1       	ldd	r23, Y+36	; 0x24
    2aba:	8d a1       	ldd	r24, Y+37	; 0x25
    2abc:	9e a1       	ldd	r25, Y+38	; 0x26
    2abe:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9a a3       	std	Y+34, r25	; 0x22
    2ac8:	89 a3       	std	Y+33, r24	; 0x21
    2aca:	89 a1       	ldd	r24, Y+33	; 0x21
    2acc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ace:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ad2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ad4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <clock_wise_step+0x1e0>
    2ada:	9e 8f       	std	Y+30, r25	; 0x1e
    2adc:	8d 8f       	std	Y+29, r24	; 0x1d
 odd_B_servo_up_90(); odd_A_servo_45(); _delay_ms(250);
    2ade:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <odd_B_servo_up_90>
    2ae2:	0e 94 3b 14 	call	0x2876	; 0x2876 <odd_A_servo_45>
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	aa e7       	ldi	r26, 0x7A	; 122
    2aec:	b3 e4       	ldi	r27, 0x43	; 67
    2aee:	89 8f       	std	Y+25, r24	; 0x19
    2af0:	9a 8f       	std	Y+26, r25	; 0x1a
    2af2:	ab 8f       	std	Y+27, r26	; 0x1b
    2af4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af6:	69 8d       	ldd	r22, Y+25	; 0x19
    2af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2afe:	26 e6       	ldi	r18, 0x66	; 102
    2b00:	36 e6       	ldi	r19, 0x66	; 102
    2b02:	46 e6       	ldi	r20, 0x66	; 102
    2b04:	55 e4       	ldi	r21, 0x45	; 69
    2b06:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	8d 8b       	std	Y+21, r24	; 0x15
    2b10:	9e 8b       	std	Y+22, r25	; 0x16
    2b12:	af 8b       	std	Y+23, r26	; 0x17
    2b14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b16:	6d 89       	ldd	r22, Y+21	; 0x15
    2b18:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e8       	ldi	r20, 0x80	; 128
    2b24:	5f e3       	ldi	r21, 0x3F	; 63
    2b26:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	2c f4       	brge	.+10     	; 0x2b38 <clock_wise_step+0x242>
		__ticks = 1;
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	9c 8b       	std	Y+20, r25	; 0x14
    2b34:	8b 8b       	std	Y+19, r24	; 0x13
    2b36:	3f c0       	rjmp	.+126    	; 0x2bb6 <clock_wise_step+0x2c0>
	else if (__tmp > 65535)
    2b38:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	3f ef       	ldi	r19, 0xFF	; 255
    2b44:	4f e7       	ldi	r20, 0x7F	; 127
    2b46:	57 e4       	ldi	r21, 0x47	; 71
    2b48:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2b4c:	18 16       	cp	r1, r24
    2b4e:	4c f5       	brge	.+82     	; 0x2ba2 <clock_wise_step+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b50:	69 8d       	ldd	r22, Y+25	; 0x19
    2b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e2       	ldi	r20, 0x20	; 32
    2b5e:	51 e4       	ldi	r21, 0x41	; 65
    2b60:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9c 8b       	std	Y+20, r25	; 0x14
    2b76:	8b 8b       	std	Y+19, r24	; 0x13
    2b78:	0f c0       	rjmp	.+30     	; 0x2b98 <clock_wise_step+0x2a2>
    2b7a:	80 e7       	ldi	r24, 0x70	; 112
    2b7c:	91 e0       	ldi	r25, 0x01	; 1
    2b7e:	9a 8b       	std	Y+18, r25	; 0x12
    2b80:	89 8b       	std	Y+17, r24	; 0x11
    2b82:	89 89       	ldd	r24, Y+17	; 0x11
    2b84:	9a 89       	ldd	r25, Y+18	; 0x12
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <clock_wise_step+0x290>
    2b8a:	9a 8b       	std	Y+18, r25	; 0x12
    2b8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b90:	9c 89       	ldd	r25, Y+20	; 0x14
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	9c 8b       	std	Y+20, r25	; 0x14
    2b96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b98:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	69 f7       	brne	.-38     	; 0x2b7a <clock_wise_step+0x284>
    2ba0:	14 c0       	rjmp	.+40     	; 0x2bca <clock_wise_step+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    2baa:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9c 8b       	std	Y+20, r25	; 0x14
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
    2bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bba:	98 8b       	std	Y+16, r25	; 0x10
    2bbc:	8f 87       	std	Y+15, r24	; 0x0f
    2bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc0:	98 89       	ldd	r25, Y+16	; 0x10
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <clock_wise_step+0x2cc>
    2bc6:	98 8b       	std	Y+16, r25	; 0x10
    2bc8:	8f 87       	std	Y+15, r24	; 0x0f
 odd_B_servo_down_55(); _delay_ms(250);
    2bca:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <odd_B_servo_down_55>
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	aa e7       	ldi	r26, 0x7A	; 122
    2bd4:	b3 e4       	ldi	r27, 0x43	; 67
    2bd6:	8b 87       	std	Y+11, r24	; 0x0b
    2bd8:	9c 87       	std	Y+12, r25	; 0x0c
    2bda:	ad 87       	std	Y+13, r26	; 0x0d
    2bdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be6:	26 e6       	ldi	r18, 0x66	; 102
    2be8:	36 e6       	ldi	r19, 0x66	; 102
    2bea:	46 e6       	ldi	r20, 0x66	; 102
    2bec:	55 e4       	ldi	r21, 0x45	; 69
    2bee:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	8f 83       	std	Y+7, r24	; 0x07
    2bf8:	98 87       	std	Y+8, r25	; 0x08
    2bfa:	a9 87       	std	Y+9, r26	; 0x09
    2bfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e8       	ldi	r20, 0x80	; 128
    2c0c:	5f e3       	ldi	r21, 0x3F	; 63
    2c0e:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2c12:	88 23       	and	r24, r24
    2c14:	2c f4       	brge	.+10     	; 0x2c20 <clock_wise_step+0x32a>
		__ticks = 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	9e 83       	std	Y+6, r25	; 0x06
    2c1c:	8d 83       	std	Y+5, r24	; 0x05
    2c1e:	3f c0       	rjmp	.+126    	; 0x2c9e <clock_wise_step+0x3a8>
	else if (__tmp > 65535)
    2c20:	6f 81       	ldd	r22, Y+7	; 0x07
    2c22:	78 85       	ldd	r23, Y+8	; 0x08
    2c24:	89 85       	ldd	r24, Y+9	; 0x09
    2c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	3f ef       	ldi	r19, 0xFF	; 255
    2c2c:	4f e7       	ldi	r20, 0x7F	; 127
    2c2e:	57 e4       	ldi	r21, 0x47	; 71
    2c30:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2c34:	18 16       	cp	r1, r24
    2c36:	4c f5       	brge	.+82     	; 0x2c8a <clock_wise_step+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e2       	ldi	r20, 0x20	; 32
    2c46:	51 e4       	ldi	r21, 0x41	; 65
    2c48:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	bc 01       	movw	r22, r24
    2c52:	cd 01       	movw	r24, r26
    2c54:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
    2c60:	0f c0       	rjmp	.+30     	; 0x2c80 <clock_wise_step+0x38a>
    2c62:	80 e7       	ldi	r24, 0x70	; 112
    2c64:	91 e0       	ldi	r25, 0x01	; 1
    2c66:	9c 83       	std	Y+4, r25	; 0x04
    2c68:	8b 83       	std	Y+3, r24	; 0x03
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <clock_wise_step+0x378>
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c76:	8d 81       	ldd	r24, Y+5	; 0x05
    2c78:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	9e 83       	std	Y+6, r25	; 0x06
    2c7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c80:	8d 81       	ldd	r24, Y+5	; 0x05
    2c82:	9e 81       	ldd	r25, Y+6	; 0x06
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	69 f7       	brne	.-38     	; 0x2c62 <clock_wise_step+0x36c>
    2c88:	14 c0       	rjmp	.+40     	; 0x2cb2 <clock_wise_step+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8c:	78 85       	ldd	r23, Y+8	; 0x08
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c92:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <clock_wise_step+0x3b4>
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
}
    2cb2:	e8 96       	adiw	r28, 0x38	; 56
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <counter_clock_wise_step>:
//--------------------------------------------------------------------------------
// This function is used for positioning robot's arms in counterclockwise direction 
// just before applying stroke to rotate the robot, counterclockwise.
//--------------------------------------------------------------------------------
void counter_clock_wise_step(void)
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	e8 97       	sbiw	r28, 0x38	; 56
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
 // arms are lifted and moved in the desired direction 
 even_B_servo_up_90(); even_A_servo_135(); _delay_ms(250); 
    2cd8:	0e 94 1b 14 	call	0x2836	; 0x2836 <even_B_servo_up_90>
    2cdc:	0e 94 0b 14 	call	0x2816	; 0x2816 <even_A_servo_135>
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	aa e7       	ldi	r26, 0x7A	; 122
    2ce6:	b3 e4       	ldi	r27, 0x43	; 67
    2ce8:	8d ab       	std	Y+53, r24	; 0x35
    2cea:	9e ab       	std	Y+54, r25	; 0x36
    2cec:	af ab       	std	Y+55, r26	; 0x37
    2cee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf0:	6d a9       	ldd	r22, Y+53	; 0x35
    2cf2:	7e a9       	ldd	r23, Y+54	; 0x36
    2cf4:	8f a9       	ldd	r24, Y+55	; 0x37
    2cf6:	98 ad       	ldd	r25, Y+56	; 0x38
    2cf8:	26 e6       	ldi	r18, 0x66	; 102
    2cfa:	36 e6       	ldi	r19, 0x66	; 102
    2cfc:	46 e6       	ldi	r20, 0x66	; 102
    2cfe:	55 e4       	ldi	r21, 0x45	; 69
    2d00:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	89 ab       	std	Y+49, r24	; 0x31
    2d0a:	9a ab       	std	Y+50, r25	; 0x32
    2d0c:	ab ab       	std	Y+51, r26	; 0x33
    2d0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d10:	69 a9       	ldd	r22, Y+49	; 0x31
    2d12:	7a a9       	ldd	r23, Y+50	; 0x32
    2d14:	8b a9       	ldd	r24, Y+51	; 0x33
    2d16:	9c a9       	ldd	r25, Y+52	; 0x34
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e8       	ldi	r20, 0x80	; 128
    2d1e:	5f e3       	ldi	r21, 0x3F	; 63
    2d20:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2d24:	88 23       	and	r24, r24
    2d26:	2c f4       	brge	.+10     	; 0x2d32 <counter_clock_wise_step+0x6e>
		__ticks = 1;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	98 ab       	std	Y+48, r25	; 0x30
    2d2e:	8f a7       	std	Y+47, r24	; 0x2f
    2d30:	3f c0       	rjmp	.+126    	; 0x2db0 <counter_clock_wise_step+0xec>
	else if (__tmp > 65535)
    2d32:	69 a9       	ldd	r22, Y+49	; 0x31
    2d34:	7a a9       	ldd	r23, Y+50	; 0x32
    2d36:	8b a9       	ldd	r24, Y+51	; 0x33
    2d38:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	3f ef       	ldi	r19, 0xFF	; 255
    2d3e:	4f e7       	ldi	r20, 0x7F	; 127
    2d40:	57 e4       	ldi	r21, 0x47	; 71
    2d42:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2d46:	18 16       	cp	r1, r24
    2d48:	4c f5       	brge	.+82     	; 0x2d9c <counter_clock_wise_step+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d4c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d4e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d50:	98 ad       	ldd	r25, Y+56	; 0x38
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e2       	ldi	r20, 0x20	; 32
    2d58:	51 e4       	ldi	r21, 0x41	; 65
    2d5a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	98 ab       	std	Y+48, r25	; 0x30
    2d70:	8f a7       	std	Y+47, r24	; 0x2f
    2d72:	0f c0       	rjmp	.+30     	; 0x2d92 <counter_clock_wise_step+0xce>
    2d74:	80 e7       	ldi	r24, 0x70	; 112
    2d76:	91 e0       	ldi	r25, 0x01	; 1
    2d78:	9e a7       	std	Y+46, r25	; 0x2e
    2d7a:	8d a7       	std	Y+45, r24	; 0x2d
    2d7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	f1 f7       	brne	.-4      	; 0x2d80 <counter_clock_wise_step+0xbc>
    2d84:	9e a7       	std	Y+46, r25	; 0x2e
    2d86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	98 ab       	std	Y+48, r25	; 0x30
    2d90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d94:	98 a9       	ldd	r25, Y+48	; 0x30
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	69 f7       	brne	.-38     	; 0x2d74 <counter_clock_wise_step+0xb0>
    2d9a:	14 c0       	rjmp	.+40     	; 0x2dc4 <counter_clock_wise_step+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2da0:	8b a9       	ldd	r24, Y+51	; 0x33
    2da2:	9c a9       	ldd	r25, Y+52	; 0x34
    2da4:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	98 ab       	std	Y+48, r25	; 0x30
    2dae:	8f a7       	std	Y+47, r24	; 0x2f
    2db0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2db2:	98 a9       	ldd	r25, Y+48	; 0x30
    2db4:	9c a7       	std	Y+44, r25	; 0x2c
    2db6:	8b a7       	std	Y+43, r24	; 0x2b
    2db8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dba:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <counter_clock_wise_step+0xf8>
    2dc0:	9c a7       	std	Y+44, r25	; 0x2c
    2dc2:	8b a7       	std	Y+43, r24	; 0x2b
 even_B_servo_down_125(); _delay_ms(250); 
    2dc4:	0e 94 2b 14 	call	0x2856	; 0x2856 <even_B_servo_down_125>
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	aa e7       	ldi	r26, 0x7A	; 122
    2dce:	b3 e4       	ldi	r27, 0x43	; 67
    2dd0:	8f a3       	std	Y+39, r24	; 0x27
    2dd2:	98 a7       	std	Y+40, r25	; 0x28
    2dd4:	a9 a7       	std	Y+41, r26	; 0x29
    2dd6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd8:	6f a1       	ldd	r22, Y+39	; 0x27
    2dda:	78 a5       	ldd	r23, Y+40	; 0x28
    2ddc:	89 a5       	ldd	r24, Y+41	; 0x29
    2dde:	9a a5       	ldd	r25, Y+42	; 0x2a
    2de0:	26 e6       	ldi	r18, 0x66	; 102
    2de2:	36 e6       	ldi	r19, 0x66	; 102
    2de4:	46 e6       	ldi	r20, 0x66	; 102
    2de6:	55 e4       	ldi	r21, 0x45	; 69
    2de8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	8b a3       	std	Y+35, r24	; 0x23
    2df2:	9c a3       	std	Y+36, r25	; 0x24
    2df4:	ad a3       	std	Y+37, r26	; 0x25
    2df6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2df8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dfa:	7c a1       	ldd	r23, Y+36	; 0x24
    2dfc:	8d a1       	ldd	r24, Y+37	; 0x25
    2dfe:	9e a1       	ldd	r25, Y+38	; 0x26
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e8       	ldi	r20, 0x80	; 128
    2e06:	5f e3       	ldi	r21, 0x3F	; 63
    2e08:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2e0c:	88 23       	and	r24, r24
    2e0e:	2c f4       	brge	.+10     	; 0x2e1a <counter_clock_wise_step+0x156>
		__ticks = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9a a3       	std	Y+34, r25	; 0x22
    2e16:	89 a3       	std	Y+33, r24	; 0x21
    2e18:	3f c0       	rjmp	.+126    	; 0x2e98 <counter_clock_wise_step+0x1d4>
	else if (__tmp > 65535)
    2e1a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e1c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e20:	9e a1       	ldd	r25, Y+38	; 0x26
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	3f ef       	ldi	r19, 0xFF	; 255
    2e26:	4f e7       	ldi	r20, 0x7F	; 127
    2e28:	57 e4       	ldi	r21, 0x47	; 71
    2e2a:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2e2e:	18 16       	cp	r1, r24
    2e30:	4c f5       	brge	.+82     	; 0x2e84 <counter_clock_wise_step+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e32:	6f a1       	ldd	r22, Y+39	; 0x27
    2e34:	78 a5       	ldd	r23, Y+40	; 0x28
    2e36:	89 a5       	ldd	r24, Y+41	; 0x29
    2e38:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e2       	ldi	r20, 0x20	; 32
    2e40:	51 e4       	ldi	r21, 0x41	; 65
    2e42:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	9a a3       	std	Y+34, r25	; 0x22
    2e58:	89 a3       	std	Y+33, r24	; 0x21
    2e5a:	0f c0       	rjmp	.+30     	; 0x2e7a <counter_clock_wise_step+0x1b6>
    2e5c:	80 e7       	ldi	r24, 0x70	; 112
    2e5e:	91 e0       	ldi	r25, 0x01	; 1
    2e60:	98 a3       	std	Y+32, r25	; 0x20
    2e62:	8f 8f       	std	Y+31, r24	; 0x1f
    2e64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e66:	98 a1       	ldd	r25, Y+32	; 0x20
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <counter_clock_wise_step+0x1a4>
    2e6c:	98 a3       	std	Y+32, r25	; 0x20
    2e6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	89 a1       	ldd	r24, Y+33	; 0x21
    2e72:	9a a1       	ldd	r25, Y+34	; 0x22
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	9a a3       	std	Y+34, r25	; 0x22
    2e78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	69 f7       	brne	.-38     	; 0x2e5c <counter_clock_wise_step+0x198>
    2e82:	14 c0       	rjmp	.+40     	; 0x2eac <counter_clock_wise_step+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e84:	6b a1       	ldd	r22, Y+35	; 0x23
    2e86:	7c a1       	ldd	r23, Y+36	; 0x24
    2e88:	8d a1       	ldd	r24, Y+37	; 0x25
    2e8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e8c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	9a a3       	std	Y+34, r25	; 0x22
    2e96:	89 a3       	std	Y+33, r24	; 0x21
    2e98:	89 a1       	ldd	r24, Y+33	; 0x21
    2e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e9c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e9e:	8d 8f       	std	Y+29, r24	; 0x1d
    2ea0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ea2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <counter_clock_wise_step+0x1e0>
    2ea8:	9e 8f       	std	Y+30, r25	; 0x1e
    2eaa:	8d 8f       	std	Y+29, r24	; 0x1d
 odd_B_servo_up_90(); odd_A_servo_135(); _delay_ms(250); 
    2eac:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <odd_B_servo_up_90>
    2eb0:	0e 94 4b 14 	call	0x2896	; 0x2896 <odd_A_servo_135>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	aa e7       	ldi	r26, 0x7A	; 122
    2eba:	b3 e4       	ldi	r27, 0x43	; 67
    2ebc:	89 8f       	std	Y+25, r24	; 0x19
    2ebe:	9a 8f       	std	Y+26, r25	; 0x1a
    2ec0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ec2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ecc:	26 e6       	ldi	r18, 0x66	; 102
    2ece:	36 e6       	ldi	r19, 0x66	; 102
    2ed0:	46 e6       	ldi	r20, 0x66	; 102
    2ed2:	55 e4       	ldi	r21, 0x45	; 69
    2ed4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	8d 8b       	std	Y+21, r24	; 0x15
    2ede:	9e 8b       	std	Y+22, r25	; 0x16
    2ee0:	af 8b       	std	Y+23, r26	; 0x17
    2ee2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eea:	98 8d       	ldd	r25, Y+24	; 0x18
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e8       	ldi	r20, 0x80	; 128
    2ef2:	5f e3       	ldi	r21, 0x3F	; 63
    2ef4:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2ef8:	88 23       	and	r24, r24
    2efa:	2c f4       	brge	.+10     	; 0x2f06 <counter_clock_wise_step+0x242>
		__ticks = 1;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	9c 8b       	std	Y+20, r25	; 0x14
    2f02:	8b 8b       	std	Y+19, r24	; 0x13
    2f04:	3f c0       	rjmp	.+126    	; 0x2f84 <counter_clock_wise_step+0x2c0>
	else if (__tmp > 65535)
    2f06:	6d 89       	ldd	r22, Y+21	; 0x15
    2f08:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	3f ef       	ldi	r19, 0xFF	; 255
    2f12:	4f e7       	ldi	r20, 0x7F	; 127
    2f14:	57 e4       	ldi	r21, 0x47	; 71
    2f16:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    2f1a:	18 16       	cp	r1, r24
    2f1c:	4c f5       	brge	.+82     	; 0x2f70 <counter_clock_wise_step+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e2       	ldi	r20, 0x20	; 32
    2f2c:	51 e4       	ldi	r21, 0x41	; 65
    2f2e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	9c 8b       	std	Y+20, r25	; 0x14
    2f44:	8b 8b       	std	Y+19, r24	; 0x13
    2f46:	0f c0       	rjmp	.+30     	; 0x2f66 <counter_clock_wise_step+0x2a2>
    2f48:	80 e7       	ldi	r24, 0x70	; 112
    2f4a:	91 e0       	ldi	r25, 0x01	; 1
    2f4c:	9a 8b       	std	Y+18, r25	; 0x12
    2f4e:	89 8b       	std	Y+17, r24	; 0x11
    2f50:	89 89       	ldd	r24, Y+17	; 0x11
    2f52:	9a 89       	ldd	r25, Y+18	; 0x12
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <counter_clock_wise_step+0x290>
    2f58:	9a 8b       	std	Y+18, r25	; 0x12
    2f5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	9c 8b       	std	Y+20, r25	; 0x14
    2f64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f66:	8b 89       	ldd	r24, Y+19	; 0x13
    2f68:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6a:	00 97       	sbiw	r24, 0x00	; 0
    2f6c:	69 f7       	brne	.-38     	; 0x2f48 <counter_clock_wise_step+0x284>
    2f6e:	14 c0       	rjmp	.+40     	; 0x2f98 <counter_clock_wise_step+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f70:	6d 89       	ldd	r22, Y+21	; 0x15
    2f72:	7e 89       	ldd	r23, Y+22	; 0x16
    2f74:	8f 89       	ldd	r24, Y+23	; 0x17
    2f76:	98 8d       	ldd	r25, Y+24	; 0x18
    2f78:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9c 8b       	std	Y+20, r25	; 0x14
    2f82:	8b 8b       	std	Y+19, r24	; 0x13
    2f84:	8b 89       	ldd	r24, Y+19	; 0x13
    2f86:	9c 89       	ldd	r25, Y+20	; 0x14
    2f88:	98 8b       	std	Y+16, r25	; 0x10
    2f8a:	8f 87       	std	Y+15, r24	; 0x0f
    2f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f8e:	98 89       	ldd	r25, Y+16	; 0x10
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <counter_clock_wise_step+0x2cc>
    2f94:	98 8b       	std	Y+16, r25	; 0x10
    2f96:	8f 87       	std	Y+15, r24	; 0x0f
 odd_B_servo_down_55(); _delay_ms(250); 
    2f98:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <odd_B_servo_down_55>
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	aa e7       	ldi	r26, 0x7A	; 122
    2fa2:	b3 e4       	ldi	r27, 0x43	; 67
    2fa4:	8b 87       	std	Y+11, r24	; 0x0b
    2fa6:	9c 87       	std	Y+12, r25	; 0x0c
    2fa8:	ad 87       	std	Y+13, r26	; 0x0d
    2faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb4:	26 e6       	ldi	r18, 0x66	; 102
    2fb6:	36 e6       	ldi	r19, 0x66	; 102
    2fb8:	46 e6       	ldi	r20, 0x66	; 102
    2fba:	55 e4       	ldi	r21, 0x45	; 69
    2fbc:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	8f 83       	std	Y+7, r24	; 0x07
    2fc6:	98 87       	std	Y+8, r25	; 0x08
    2fc8:	a9 87       	std	Y+9, r26	; 0x09
    2fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fce:	78 85       	ldd	r23, Y+8	; 0x08
    2fd0:	89 85       	ldd	r24, Y+9	; 0x09
    2fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e8       	ldi	r20, 0x80	; 128
    2fda:	5f e3       	ldi	r21, 0x3F	; 63
    2fdc:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    2fe0:	88 23       	and	r24, r24
    2fe2:	2c f4       	brge	.+10     	; 0x2fee <counter_clock_wise_step+0x32a>
		__ticks = 1;
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9e 83       	std	Y+6, r25	; 0x06
    2fea:	8d 83       	std	Y+5, r24	; 0x05
    2fec:	3f c0       	rjmp	.+126    	; 0x306c <counter_clock_wise_step+0x3a8>
	else if (__tmp > 65535)
    2fee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff0:	78 85       	ldd	r23, Y+8	; 0x08
    2ff2:	89 85       	ldd	r24, Y+9	; 0x09
    2ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	3f ef       	ldi	r19, 0xFF	; 255
    2ffa:	4f e7       	ldi	r20, 0x7F	; 127
    2ffc:	57 e4       	ldi	r21, 0x47	; 71
    2ffe:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    3002:	18 16       	cp	r1, r24
    3004:	4c f5       	brge	.+82     	; 0x3058 <counter_clock_wise_step+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3006:	6b 85       	ldd	r22, Y+11	; 0x0b
    3008:	7c 85       	ldd	r23, Y+12	; 0x0c
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e2       	ldi	r20, 0x20	; 32
    3014:	51 e4       	ldi	r21, 0x41	; 65
    3016:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	bc 01       	movw	r22, r24
    3020:	cd 01       	movw	r24, r26
    3022:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9e 83       	std	Y+6, r25	; 0x06
    302c:	8d 83       	std	Y+5, r24	; 0x05
    302e:	0f c0       	rjmp	.+30     	; 0x304e <counter_clock_wise_step+0x38a>
    3030:	80 e7       	ldi	r24, 0x70	; 112
    3032:	91 e0       	ldi	r25, 0x01	; 1
    3034:	9c 83       	std	Y+4, r25	; 0x04
    3036:	8b 83       	std	Y+3, r24	; 0x03
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	9c 81       	ldd	r25, Y+4	; 0x04
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <counter_clock_wise_step+0x378>
    3040:	9c 83       	std	Y+4, r25	; 0x04
    3042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3044:	8d 81       	ldd	r24, Y+5	; 0x05
    3046:	9e 81       	ldd	r25, Y+6	; 0x06
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	9e 83       	std	Y+6, r25	; 0x06
    304c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304e:	8d 81       	ldd	r24, Y+5	; 0x05
    3050:	9e 81       	ldd	r25, Y+6	; 0x06
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	69 f7       	brne	.-38     	; 0x3030 <counter_clock_wise_step+0x36c>
    3056:	14 c0       	rjmp	.+40     	; 0x3080 <counter_clock_wise_step+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3058:	6f 81       	ldd	r22, Y+7	; 0x07
    305a:	78 85       	ldd	r23, Y+8	; 0x08
    305c:	89 85       	ldd	r24, Y+9	; 0x09
    305e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3060:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	9e 83       	std	Y+6, r25	; 0x06
    306a:	8d 83       	std	Y+5, r24	; 0x05
    306c:	8d 81       	ldd	r24, Y+5	; 0x05
    306e:	9e 81       	ldd	r25, Y+6	; 0x06
    3070:	9a 83       	std	Y+2, r25	; 0x02
    3072:	89 83       	std	Y+1, r24	; 0x01
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	9a 81       	ldd	r25, Y+2	; 0x02
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <counter_clock_wise_step+0x3b4>
    307c:	9a 83       	std	Y+2, r25	; 0x02
    307e:	89 83       	std	Y+1, r24	; 0x01
}
    3080:	e8 96       	adiw	r28, 0x38	; 56
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <robot_rotate_clockwise>:

//--------------------------------------------------------------------------------
// function to turn right by single step in clockwise direction
//--------------------------------------------------------------------------------
void robot_rotate_clockwise (void)
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	2e 97       	sbiw	r28, 0x0e	; 14
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
 motion_busy = 1; 
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	80 93 12 03 	sts	0x0312, r24
 
 clock_wise_step();                       // move legs to desire direction
    30ac:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <clock_wise_step>
 robot_stand_position(); _delay_ms(250);  // apply rotation stroke
    30b0:	0e 94 ca 08 	call	0x1194	; 0x1194 <robot_stand_position>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	aa e7       	ldi	r26, 0x7A	; 122
    30ba:	b3 e4       	ldi	r27, 0x43	; 67
    30bc:	8b 87       	std	Y+11, r24	; 0x0b
    30be:	9c 87       	std	Y+12, r25	; 0x0c
    30c0:	ad 87       	std	Y+13, r26	; 0x0d
    30c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    30cc:	26 e6       	ldi	r18, 0x66	; 102
    30ce:	36 e6       	ldi	r19, 0x66	; 102
    30d0:	46 e6       	ldi	r20, 0x66	; 102
    30d2:	55 e4       	ldi	r21, 0x45	; 69
    30d4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	8f 83       	std	Y+7, r24	; 0x07
    30de:	98 87       	std	Y+8, r25	; 0x08
    30e0:	a9 87       	std	Y+9, r26	; 0x09
    30e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30e4:	6f 81       	ldd	r22, Y+7	; 0x07
    30e6:	78 85       	ldd	r23, Y+8	; 0x08
    30e8:	89 85       	ldd	r24, Y+9	; 0x09
    30ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e8       	ldi	r20, 0x80	; 128
    30f2:	5f e3       	ldi	r21, 0x3F	; 63
    30f4:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    30f8:	88 23       	and	r24, r24
    30fa:	2c f4       	brge	.+10     	; 0x3106 <robot_rotate_clockwise+0x74>
		__ticks = 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9e 83       	std	Y+6, r25	; 0x06
    3102:	8d 83       	std	Y+5, r24	; 0x05
    3104:	3f c0       	rjmp	.+126    	; 0x3184 <robot_rotate_clockwise+0xf2>
	else if (__tmp > 65535)
    3106:	6f 81       	ldd	r22, Y+7	; 0x07
    3108:	78 85       	ldd	r23, Y+8	; 0x08
    310a:	89 85       	ldd	r24, Y+9	; 0x09
    310c:	9a 85       	ldd	r25, Y+10	; 0x0a
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	3f ef       	ldi	r19, 0xFF	; 255
    3112:	4f e7       	ldi	r20, 0x7F	; 127
    3114:	57 e4       	ldi	r21, 0x47	; 71
    3116:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    311a:	18 16       	cp	r1, r24
    311c:	4c f5       	brge	.+82     	; 0x3170 <robot_rotate_clockwise+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3120:	7c 85       	ldd	r23, Y+12	; 0x0c
    3122:	8d 85       	ldd	r24, Y+13	; 0x0d
    3124:	9e 85       	ldd	r25, Y+14	; 0x0e
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	51 e4       	ldi	r21, 0x41	; 65
    312e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	bc 01       	movw	r22, r24
    3138:	cd 01       	movw	r24, r26
    313a:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9e 83       	std	Y+6, r25	; 0x06
    3144:	8d 83       	std	Y+5, r24	; 0x05
    3146:	0f c0       	rjmp	.+30     	; 0x3166 <robot_rotate_clockwise+0xd4>
    3148:	80 e7       	ldi	r24, 0x70	; 112
    314a:	91 e0       	ldi	r25, 0x01	; 1
    314c:	9c 83       	std	Y+4, r25	; 0x04
    314e:	8b 83       	std	Y+3, r24	; 0x03
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <robot_rotate_clockwise+0xc2>
    3158:	9c 83       	std	Y+4, r25	; 0x04
    315a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315c:	8d 81       	ldd	r24, Y+5	; 0x05
    315e:	9e 81       	ldd	r25, Y+6	; 0x06
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3166:	8d 81       	ldd	r24, Y+5	; 0x05
    3168:	9e 81       	ldd	r25, Y+6	; 0x06
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	69 f7       	brne	.-38     	; 0x3148 <robot_rotate_clockwise+0xb6>
    316e:	14 c0       	rjmp	.+40     	; 0x3198 <robot_rotate_clockwise+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3170:	6f 81       	ldd	r22, Y+7	; 0x07
    3172:	78 85       	ldd	r23, Y+8	; 0x08
    3174:	89 85       	ldd	r24, Y+9	; 0x09
    3176:	9a 85       	ldd	r25, Y+10	; 0x0a
    3178:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	8d 83       	std	Y+5, r24	; 0x05
    3184:	8d 81       	ldd	r24, Y+5	; 0x05
    3186:	9e 81       	ldd	r25, Y+6	; 0x06
    3188:	9a 83       	std	Y+2, r25	; 0x02
    318a:	89 83       	std	Y+1, r24	; 0x01
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <robot_rotate_clockwise+0xfe>
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
  
 motion_busy = 0; 
    3198:	10 92 12 03 	sts	0x0312, r1
}
    319c:	2e 96       	adiw	r28, 0x0e	; 14
    319e:	0f b6       	in	r0, 0x3f	; 63
    31a0:	f8 94       	cli
    31a2:	de bf       	out	0x3e, r29	; 62
    31a4:	0f be       	out	0x3f, r0	; 63
    31a6:	cd bf       	out	0x3d, r28	; 61
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <robot_rotate_counterclockwise>:

//--------------------------------------------------------------------------------
// function to turn left by single step  in counterclockwise direction
//--------------------------------------------------------------------------------
void robot_rotate_counterclockwise (void)
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	2e 97       	sbiw	r28, 0x0e	; 14
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
 motion_busy = 1; 
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	80 93 12 03 	sts	0x0312, r24
 
 counter_clock_wise_step();              // move legs to desire direction
    31c8:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <counter_clock_wise_step>
 robot_stand_position(); _delay_ms(250); // apply rotation stroke
    31cc:	0e 94 ca 08 	call	0x1194	; 0x1194 <robot_stand_position>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	aa e7       	ldi	r26, 0x7A	; 122
    31d6:	b3 e4       	ldi	r27, 0x43	; 67
    31d8:	8b 87       	std	Y+11, r24	; 0x0b
    31da:	9c 87       	std	Y+12, r25	; 0x0c
    31dc:	ad 87       	std	Y+13, r26	; 0x0d
    31de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e8:	26 e6       	ldi	r18, 0x66	; 102
    31ea:	36 e6       	ldi	r19, 0x66	; 102
    31ec:	46 e6       	ldi	r20, 0x66	; 102
    31ee:	55 e4       	ldi	r21, 0x45	; 69
    31f0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	8f 83       	std	Y+7, r24	; 0x07
    31fa:	98 87       	std	Y+8, r25	; 0x08
    31fc:	a9 87       	std	Y+9, r26	; 0x09
    31fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3200:	6f 81       	ldd	r22, Y+7	; 0x07
    3202:	78 85       	ldd	r23, Y+8	; 0x08
    3204:	89 85       	ldd	r24, Y+9	; 0x09
    3206:	9a 85       	ldd	r25, Y+10	; 0x0a
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e8       	ldi	r20, 0x80	; 128
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    3214:	88 23       	and	r24, r24
    3216:	2c f4       	brge	.+10     	; 0x3222 <robot_rotate_counterclockwise+0x74>
		__ticks = 1;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	9e 83       	std	Y+6, r25	; 0x06
    321e:	8d 83       	std	Y+5, r24	; 0x05
    3220:	3f c0       	rjmp	.+126    	; 0x32a0 <robot_rotate_counterclockwise+0xf2>
	else if (__tmp > 65535)
    3222:	6f 81       	ldd	r22, Y+7	; 0x07
    3224:	78 85       	ldd	r23, Y+8	; 0x08
    3226:	89 85       	ldd	r24, Y+9	; 0x09
    3228:	9a 85       	ldd	r25, Y+10	; 0x0a
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	3f ef       	ldi	r19, 0xFF	; 255
    322e:	4f e7       	ldi	r20, 0x7F	; 127
    3230:	57 e4       	ldi	r21, 0x47	; 71
    3232:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    3236:	18 16       	cp	r1, r24
    3238:	4c f5       	brge	.+82     	; 0x328c <robot_rotate_counterclockwise+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323a:	6b 85       	ldd	r22, Y+11	; 0x0b
    323c:	7c 85       	ldd	r23, Y+12	; 0x0c
    323e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3240:	9e 85       	ldd	r25, Y+14	; 0x0e
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	40 e2       	ldi	r20, 0x20	; 32
    3248:	51 e4       	ldi	r21, 0x41	; 65
    324a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	bc 01       	movw	r22, r24
    3254:	cd 01       	movw	r24, r26
    3256:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9e 83       	std	Y+6, r25	; 0x06
    3260:	8d 83       	std	Y+5, r24	; 0x05
    3262:	0f c0       	rjmp	.+30     	; 0x3282 <robot_rotate_counterclockwise+0xd4>
    3264:	80 e7       	ldi	r24, 0x70	; 112
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	9c 83       	std	Y+4, r25	; 0x04
    326a:	8b 83       	std	Y+3, r24	; 0x03
    326c:	8b 81       	ldd	r24, Y+3	; 0x03
    326e:	9c 81       	ldd	r25, Y+4	; 0x04
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <robot_rotate_counterclockwise+0xc2>
    3274:	9c 83       	std	Y+4, r25	; 0x04
    3276:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	9e 81       	ldd	r25, Y+6	; 0x06
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	9e 83       	std	Y+6, r25	; 0x06
    3280:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3282:	8d 81       	ldd	r24, Y+5	; 0x05
    3284:	9e 81       	ldd	r25, Y+6	; 0x06
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	69 f7       	brne	.-38     	; 0x3264 <robot_rotate_counterclockwise+0xb6>
    328a:	14 c0       	rjmp	.+40     	; 0x32b4 <robot_rotate_counterclockwise+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328c:	6f 81       	ldd	r22, Y+7	; 0x07
    328e:	78 85       	ldd	r23, Y+8	; 0x08
    3290:	89 85       	ldd	r24, Y+9	; 0x09
    3292:	9a 85       	ldd	r25, Y+10	; 0x0a
    3294:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	8d 81       	ldd	r24, Y+5	; 0x05
    32a2:	9e 81       	ldd	r25, Y+6	; 0x06
    32a4:	9a 83       	std	Y+2, r25	; 0x02
    32a6:	89 83       	std	Y+1, r24	; 0x01
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	9a 81       	ldd	r25, Y+2	; 0x02
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <robot_rotate_counterclockwise+0xfe>
    32b0:	9a 83       	std	Y+2, r25	; 0x02
    32b2:	89 83       	std	Y+1, r24	; 0x01

 motion_busy = 0; 
    32b4:	10 92 12 03 	sts	0x0312, r1
}
    32b8:	2e 96       	adiw	r28, 0x0e	; 14
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <forward>:

//--------------------------------------------------------------------------------
// function to move robot forward
//--------------------------------------------------------------------------------
void forward (void)
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
 motion_busy = 1; 
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	80 93 12 03 	sts	0x0312, r24
  //buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200); buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200);//use it to debug remote onnection
 fwd_front_step();         // move legs to desire direction
    32d8:	0e 94 07 09 	call	0x120e	; 0x120e <fwd_front_step>
 //buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200); buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200); buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200);//use it to debug remote onnection
 walk_stroke();            // apply backward stroke
    32dc:	0e 94 8d 08 	call	0x111a	; 0x111a <walk_stroke>
// buzzer_on();  _delay_ms(250); buzzer_off(); _delay_ms(200); buzzer_on();  _delay_ms(250); buzzer_off(); _delay_ms(200); buzzer_on();  _delay_ms(250); buzzer_off(); _delay_ms(200);  buzzer_on();  _delay_ms(250); buzzer_off(); _delay_ms(200)//use it to debug remote onnection;
 motion_busy = 0; 
    32e0:	10 92 12 03 	sts	0x0312, r1
}
    32e4:	cf 91       	pop	r28
    32e6:	df 91       	pop	r29
    32e8:	08 95       	ret

000032ea <back>:

//--------------------------------------------------------------------------------
// function to move robot back
//--------------------------------------------------------------------------------
void back (void)
{
    32ea:	df 93       	push	r29
    32ec:	cf 93       	push	r28
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
 motion_busy = 1; 
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	80 93 12 03 	sts	0x0312, r24
 back_front_step();        // move legs to desire direction
    32f8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <back_front_step>
 walk_stroke();            // apply backward stroke
    32fc:	0e 94 8d 08 	call	0x111a	; 0x111a <walk_stroke>
 motion_busy = 0; 
    3300:	10 92 12 03 	sts	0x0312, r1
}
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <remote_control>:

//--------------------------------------------------------------------------------
// control function for robot, action taken depending on data received from remote 
//--------------------------------------------------------------------------------
void remote_control(void)
{   
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
  if(motion_busy == 0)
    3312:	80 91 12 03 	lds	r24, 0x0312
    3316:	88 23       	and	r24, r24
    3318:	d9 f4       	brne	.+54     	; 0x3350 <remote_control+0x46>
  {
   if(FBV_ctrl_data[2] > 0x95)                   // Move forward if right joystick is moved fully northwards.
    331a:	80 91 28 03 	lds	r24, 0x0328
    331e:	86 39       	cpi	r24, 0x96	; 150
    3320:	18 f0       	brcs	.+6      	; 0x3328 <remote_control+0x1e>
    {
	 //buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200);//use it to debug remote onnection
     forward();                                  // move robot towards forward
    3322:	0e 94 65 19 	call	0x32ca	; 0x32ca <forward>
    3326:	14 c0       	rjmp	.+40     	; 0x3350 <remote_control+0x46>
    }

   else if(FBV_ctrl_data[2] < 0x6D)              // Move backward if right joystick is moved fully southwards
    3328:	80 91 28 03 	lds	r24, 0x0328
    332c:	8d 36       	cpi	r24, 0x6D	; 109
    332e:	18 f4       	brcc	.+6      	; 0x3336 <remote_control+0x2c>
    {
	 //buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200); buzzer_on();  _delay_ms(200); buzzer_off();  _delay_ms(200);//use it to debug remote onnection
     back();                                     // move robot towards backward
    3330:	0e 94 75 19 	call	0x32ea	; 0x32ea <back>
    3334:	0d c0       	rjmp	.+26     	; 0x3350 <remote_control+0x46>
    }
	
   else if(FBV_ctrl_data[3] > 0x95)              // Move left if right joystick is moved fully towards west 
    3336:	80 91 29 03 	lds	r24, 0x0329
    333a:	86 39       	cpi	r24, 0x96	; 150
    333c:	18 f0       	brcs	.+6      	; 0x3344 <remote_control+0x3a>
    { 
     //buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200); buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200); buzzer_on();  _delay_ms(200); buzzer_off();  _delay_ms(200);//use it to debug remote onnection
     robot_rotate_counterclockwise();            // move robot towards left
    333e:	0e 94 d7 18 	call	0x31ae	; 0x31ae <robot_rotate_counterclockwise>
    3342:	06 c0       	rjmp	.+12     	; 0x3350 <remote_control+0x46>
    }

   else if(FBV_ctrl_data[3] < 0x6D)              // Move right if right joystick is moved fully towards east 
    3344:	80 91 29 03 	lds	r24, 0x0329
    3348:	8d 36       	cpi	r24, 0x6D	; 109
    334a:	10 f4       	brcc	.+4      	; 0x3350 <remote_control+0x46>
    {
     //buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200);  buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200); buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200); buzzer_on();  _delay_ms(200); buzzer_off(); _delay_ms(200);//use it to debug remote onnection
     robot_rotate_clockwise();                   // move robot towards right  
    334c:	0e 94 49 18 	call	0x3092	; 0x3092 <robot_rotate_clockwise>
    {
     //robot_stand_position();  		        //must be called as the first instruction
    }
   } 
        
  angle_tilt_servo_pod (FBV_ctrl_data[0]);      // move tilt camera pod towards up or down     
    3350:	80 91 26 03 	lds	r24, 0x0326
    3354:	0e 94 db 07 	call	0xfb6	; 0xfb6 <angle_tilt_servo_pod>
  angle_pan_servo_pod (FBV_ctrl_data[1]);       // move pan camera pod towards left or right 
    3358:	80 91 27 03 	lds	r24, 0x0327
    335c:	0e 94 1d 08 	call	0x103a	; 0x103a <angle_pan_servo_pod>
  
  flag1 = 0;									// clear the falg to allow the new action					
    3360:	10 92 15 03 	sts	0x0315, r1
}
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <__vector_25>:
//--------------------------------------------------------------------------------
// In this isr, packet is received from remote,verified and action is taken  
//--------------------------------------------------------------------------------
SIGNAL(SIG_USART0_RECV) 		              // ISR for receive complete interrupt
{
    336a:	1f 92       	push	r1
    336c:	0f 92       	push	r0
    336e:	0f b6       	in	r0, 0x3f	; 63
    3370:	0f 92       	push	r0
    3372:	00 90 5b 00 	lds	r0, 0x005B
    3376:	0f 92       	push	r0
    3378:	11 24       	eor	r1, r1
    337a:	8f 93       	push	r24
    337c:	9f 93       	push	r25
    337e:	ef 93       	push	r30
    3380:	ff 93       	push	r31
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	0f 92       	push	r0
    3388:	cd b7       	in	r28, 0x3d	; 61
    338a:	de b7       	in	r29, 0x3e	; 62
 unsigned char ser_data = 0x00;
    338c:	19 82       	std	Y+1, r1	; 0x01
 static unsigned char packet_data_count = 1;  // as packet byte counter
 static unsigned char packet_valid = 0;       // to indicate complete packet received is valid
 static unsigned char rx_data_complete = 0;   // to enable or diable the if(rx_data_complete) loop
 static unsigned char rx_data_byte_count = 0; // counter for databyte received for array    
 
 ser_data = UDR0;                             //uart has received a character in UDR
    338e:	e6 ec       	ldi	r30, 0xC6	; 198
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	80 81       	ld	r24, Z
    3394:	89 83       	std	Y+1, r24	; 0x01
 
 if(packet_valid)                             // is 1 and 2 header byte packet Rx'vd is valid 
    3396:	80 91 1b 03 	lds	r24, 0x031B
    339a:	88 23       	and	r24, r24
    339c:	b9 f0       	breq	.+46     	; 0x33cc <__vector_25+0x62>
  {  
    FBV_ctrl_data[rx_data_byte_count] = ser_data;	 // receive the next six data bytes
    339e:	80 91 19 03 	lds	r24, 0x0319
    33a2:	88 2f       	mov	r24, r24
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	fc 01       	movw	r30, r24
    33a8:	ea 5d       	subi	r30, 0xDA	; 218
    33aa:	fc 4f       	sbci	r31, 0xFC	; 252
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	80 83       	st	Z, r24
    rx_data_byte_count++;
    33b0:	80 91 19 03 	lds	r24, 0x0319
    33b4:	8f 5f       	subi	r24, 0xFF	; 255
    33b6:	80 93 19 03 	sts	0x0319, r24
    if(rx_data_byte_count >= 8)
    33ba:	80 91 19 03 	lds	r24, 0x0319
    33be:	88 30       	cpi	r24, 0x08	; 8
    33c0:	28 f0       	brcs	.+10     	; 0x33cc <__vector_25+0x62>
	 {
      packet_valid = 0;                       // disable this loop
    33c2:	10 92 1b 03 	sts	0x031B, r1
      rx_data_complete = 1;                   // enable the if(rx_data_complete) loop
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	80 93 1a 03 	sts	0x031A, r24
     }
  }

 // confirm the packet received
 if(packet_data_count == 2)              // access count 2nd byte of packet
    33cc:	80 91 02 02 	lds	r24, 0x0202
    33d0:	82 30       	cpi	r24, 0x02	; 2
    33d2:	79 f4       	brne	.+30     	; 0x33f2 <__vector_25+0x88>
   {
     if(ser_data == 'B')                 // is 2nd byte is 'B' 
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	82 34       	cpi	r24, 0x42	; 66
    33d8:	49 f4       	brne	.+18     	; 0x33ec <__vector_25+0x82>
	   {
	     packet_data_count = 3;          // set any data other than 1 and 2
    33da:	83 e0       	ldi	r24, 0x03	; 3
    33dc:	80 93 02 02 	sts	0x0202, r24
		 rx_data_byte_count = 0;		 
    33e0:	10 92 19 03 	sts	0x0319, r1
         packet_valid = 1;
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	80 93 1b 03 	sts	0x031B, r24
    33ea:	03 c0       	rjmp	.+6      	; 0x33f2 <__vector_25+0x88>
	   }
     else 
	   {
	     packet_data_count = 1;          // allow for new packet to receive i.e 1st byte		 
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	80 93 02 02 	sts	0x0202, r24
	   }   
   }

 if(packet_data_count == 1)              // access count 1st byte of packet
    33f2:	80 91 02 02 	lds	r24, 0x0202
    33f6:	81 30       	cpi	r24, 0x01	; 1
    33f8:	31 f4       	brne	.+12     	; 0x3406 <__vector_25+0x9c>
   {
     if(ser_data == 'F')                 // is 1st byte is 'F'
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	86 34       	cpi	r24, 0x46	; 70
    33fe:	19 f4       	brne	.+6      	; 0x3406 <__vector_25+0x9c>
	   {
	     packet_data_count = 2;          // allow for receving 2nd byte 
    3400:	82 e0       	ldi	r24, 0x02	; 2
    3402:	80 93 02 02 	sts	0x0202, r24
	   }
   } 
  
 if(rx_data_complete == 1)               // is data received is complete          
    3406:	80 91 1a 03 	lds	r24, 0x031A
    340a:	81 30       	cpi	r24, 0x01	; 1
    340c:	69 f4       	brne	.+26     	; 0x3428 <__vector_25+0xbe>
   { 
    flag2 = 1;                           
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	80 93 16 03 	sts	0x0316, r24
    packet_data_count = 1;	                      
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	80 93 02 02 	sts	0x0202, r24
	rx_data_complete = 0;                // disable this loop 
    341a:	10 92 1a 03 	sts	0x031A, r1
	communication_proper_count++;         
    341e:	80 91 18 03 	lds	r24, 0x0318
    3422:	8f 5f       	subi	r24, 0xFF	; 255
    3424:	80 93 18 03 	sts	0x0318, r24
   }
}
    3428:	0f 90       	pop	r0
    342a:	cf 91       	pop	r28
    342c:	df 91       	pop	r29
    342e:	ff 91       	pop	r31
    3430:	ef 91       	pop	r30
    3432:	9f 91       	pop	r25
    3434:	8f 91       	pop	r24
    3436:	0f 90       	pop	r0
    3438:	00 92 5b 00 	sts	0x005B, r0
    343c:	0f 90       	pop	r0
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	0f 90       	pop	r0
    3442:	1f 90       	pop	r1
    3444:	18 95       	reti

00003446 <init_devices>:

//--------------------------------------------------------------------------------
// call this routine to initialize all peripherals
//--------------------------------------------------------------------------------
void init_devices(void)
{
    3446:	df 93       	push	r29
    3448:	cf 93       	push	r28
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli();                          // disable all interrupts
    344e:	f8 94       	cli

 servo_pin_config();             // servo configuration 
    3450:	0e 94 95 00 	call	0x12a	; 0x12a <servo_pin_config>
 timer1_init();                  // initilize timer1
    3454:	0e 94 05 01 	call	0x20a	; 0x20a <timer1_init>
 uart0_init();                   // initailize UART0 for serial communiaction
    3458:	0e 94 39 01 	call	0x272	; 0x272 <uart0_init>
 buzzer_pin_config();            // call buzzer config
    345c:	0e 94 c6 00 	call	0x18c	; 0x18c <buzzer_pin_config>

 TIMSK1 = 0x0F;                  // timer1 interrupt sources
    3460:	ef e6       	ldi	r30, 0x6F	; 111
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	8f e0       	ldi	r24, 0x0F	; 15
    3466:	80 83       	st	Z, r24

 sei(); //re-enable interrupts
    3468:	78 94       	sei
 //all peripherals are now initialized
}
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <main>:

//--------------------------------------------------------------------------------
// main fuction starts here
//--------------------------------------------------------------------------------
int main(void) 
{
    3470:	0f 93       	push	r16
    3472:	1f 93       	push	r17
    3474:	df 93       	push	r29
    3476:	cf 93       	push	r28
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
    347c:	c6 54       	subi	r28, 0x46	; 70
    347e:	d0 40       	sbci	r29, 0x00	; 0
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
 
 motion_busy = 0;
    348a:	10 92 12 03 	sts	0x0312, r1
 
 init_devices();
    348e:	0e 94 23 1a 	call	0x3446	; 0x3446 <init_devices>

 servo_on();					     //turning on the servo supply
    3492:	0e 94 55 01 	call	0x2aa	; 0x2aa <servo_on>

// robot_arm_calibration();          //call while replacing any servo or calibrating 
// _delay_ms(1500);                  //each arm 

 robot_stand_position();  		     //must be called as the first instruction
    3496:	0e 94 ca 08 	call	0x1194	; 0x1194 <robot_stand_position>
    349a:	fe 01       	movw	r30, r28
    349c:	ed 5b       	subi	r30, 0xBD	; 189
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	90 e8       	ldi	r25, 0x80	; 128
    34a4:	ab e3       	ldi	r26, 0x3B	; 59
    34a6:	b5 e4       	ldi	r27, 0x45	; 69
    34a8:	80 83       	st	Z, r24
    34aa:	91 83       	std	Z+1, r25	; 0x01
    34ac:	a2 83       	std	Z+2, r26	; 0x02
    34ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b0:	8e 01       	movw	r16, r28
    34b2:	01 5c       	subi	r16, 0xC1	; 193
    34b4:	1f 4f       	sbci	r17, 0xFF	; 255
    34b6:	fe 01       	movw	r30, r28
    34b8:	ed 5b       	subi	r30, 0xBD	; 189
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	60 81       	ld	r22, Z
    34be:	71 81       	ldd	r23, Z+1	; 0x01
    34c0:	82 81       	ldd	r24, Z+2	; 0x02
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	26 e6       	ldi	r18, 0x66	; 102
    34c6:	36 e6       	ldi	r19, 0x66	; 102
    34c8:	46 e6       	ldi	r20, 0x66	; 102
    34ca:	55 e4       	ldi	r21, 0x45	; 69
    34cc:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	f8 01       	movw	r30, r16
    34d6:	80 83       	st	Z, r24
    34d8:	91 83       	std	Z+1, r25	; 0x01
    34da:	a2 83       	std	Z+2, r26	; 0x02
    34dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34de:	fe 01       	movw	r30, r28
    34e0:	ff 96       	adiw	r30, 0x3f	; 63
    34e2:	60 81       	ld	r22, Z
    34e4:	71 81       	ldd	r23, Z+1	; 0x01
    34e6:	82 81       	ldd	r24, Z+2	; 0x02
    34e8:	93 81       	ldd	r25, Z+3	; 0x03
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e8       	ldi	r20, 0x80	; 128
    34f0:	5f e3       	ldi	r21, 0x3F	; 63
    34f2:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    34f6:	88 23       	and	r24, r24
    34f8:	2c f4       	brge	.+10     	; 0x3504 <main+0x94>
		__ticks = 1;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	9e af       	std	Y+62, r25	; 0x3e
    3500:	8d af       	std	Y+61, r24	; 0x3d
    3502:	46 c0       	rjmp	.+140    	; 0x3590 <main+0x120>
	else if (__tmp > 65535)
    3504:	fe 01       	movw	r30, r28
    3506:	ff 96       	adiw	r30, 0x3f	; 63
    3508:	60 81       	ld	r22, Z
    350a:	71 81       	ldd	r23, Z+1	; 0x01
    350c:	82 81       	ldd	r24, Z+2	; 0x02
    350e:	93 81       	ldd	r25, Z+3	; 0x03
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	3f ef       	ldi	r19, 0xFF	; 255
    3514:	4f e7       	ldi	r20, 0x7F	; 127
    3516:	57 e4       	ldi	r21, 0x47	; 71
    3518:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    351c:	18 16       	cp	r1, r24
    351e:	64 f5       	brge	.+88     	; 0x3578 <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3520:	fe 01       	movw	r30, r28
    3522:	ed 5b       	subi	r30, 0xBD	; 189
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	60 81       	ld	r22, Z
    3528:	71 81       	ldd	r23, Z+1	; 0x01
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	93 81       	ldd	r25, Z+3	; 0x03
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	40 e2       	ldi	r20, 0x20	; 32
    3534:	51 e4       	ldi	r21, 0x41	; 65
    3536:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	9e af       	std	Y+62, r25	; 0x3e
    354c:	8d af       	std	Y+61, r24	; 0x3d
    354e:	0f c0       	rjmp	.+30     	; 0x356e <main+0xfe>
    3550:	80 e7       	ldi	r24, 0x70	; 112
    3552:	91 e0       	ldi	r25, 0x01	; 1
    3554:	9c af       	std	Y+60, r25	; 0x3c
    3556:	8b af       	std	Y+59, r24	; 0x3b
    3558:	8b ad       	ldd	r24, Y+59	; 0x3b
    355a:	9c ad       	ldd	r25, Y+60	; 0x3c
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <main+0xec>
    3560:	9c af       	std	Y+60, r25	; 0x3c
    3562:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3564:	8d ad       	ldd	r24, Y+61	; 0x3d
    3566:	9e ad       	ldd	r25, Y+62	; 0x3e
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	9e af       	std	Y+62, r25	; 0x3e
    356c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3570:	9e ad       	ldd	r25, Y+62	; 0x3e
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	69 f7       	brne	.-38     	; 0x3550 <main+0xe0>
    3576:	16 c0       	rjmp	.+44     	; 0x35a4 <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3578:	fe 01       	movw	r30, r28
    357a:	ff 96       	adiw	r30, 0x3f	; 63
    357c:	60 81       	ld	r22, Z
    357e:	71 81       	ldd	r23, Z+1	; 0x01
    3580:	82 81       	ldd	r24, Z+2	; 0x02
    3582:	93 81       	ldd	r25, Z+3	; 0x03
    3584:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9e af       	std	Y+62, r25	; 0x3e
    358e:	8d af       	std	Y+61, r24	; 0x3d
    3590:	8d ad       	ldd	r24, Y+61	; 0x3d
    3592:	9e ad       	ldd	r25, Y+62	; 0x3e
    3594:	9a af       	std	Y+58, r25	; 0x3a
    3596:	89 af       	std	Y+57, r24	; 0x39
    3598:	89 ad       	ldd	r24, Y+57	; 0x39
    359a:	9a ad       	ldd	r25, Y+58	; 0x3a
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	f1 f7       	brne	.-4      	; 0x359c <main+0x12c>
    35a0:	9a af       	std	Y+58, r25	; 0x3a
    35a2:	89 af       	std	Y+57, r24	; 0x39
 _delay_ms(3000);
 
 while(1)
 { 
   // send the command packet to slave remote for getting the data packet from remote 
   if(flag1 == 1)
    35a4:	80 91 15 03 	lds	r24, 0x0315
    35a8:	81 30       	cpi	r24, 0x01	; 1
    35aa:	b1 f5       	brne	.+108    	; 0x3618 <main+0x1a8>
   {    
	 while(!(UCSR0A & (1<<UDRE0)));
    35ac:	e0 ec       	ldi	r30, 0xC0	; 192
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	88 2f       	mov	r24, r24
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	80 72       	andi	r24, 0x20	; 32
    35b8:	90 70       	andi	r25, 0x00	; 0
    35ba:	00 97       	sbiw	r24, 0x00	; 0
    35bc:	b9 f3       	breq	.-18     	; 0x35ac <main+0x13c>
	 UDR0 = 'N';                     // transmit the bytes from packet 
    35be:	e6 ec       	ldi	r30, 0xC6	; 198
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	8e e4       	ldi	r24, 0x4E	; 78
    35c4:	80 83       	st	Z, r24
	 while(!(UCSR0A & (1<<UDRE0)));
    35c6:	e0 ec       	ldi	r30, 0xC0	; 192
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	88 2f       	mov	r24, r24
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	80 72       	andi	r24, 0x20	; 32
    35d2:	90 70       	andi	r25, 0x00	; 0
    35d4:	00 97       	sbiw	r24, 0x00	; 0
    35d6:	b9 f3       	breq	.-18     	; 0x35c6 <main+0x156>
	 UDR0 = 'E';                     // transmit the bytes from packet
    35d8:	e6 ec       	ldi	r30, 0xC6	; 198
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	85 e4       	ldi	r24, 0x45	; 69
    35de:	80 83       	st	Z, r24
	 while(!(UCSR0A & (1<<UDRE0)));
    35e0:	e0 ec       	ldi	r30, 0xC0	; 192
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	80 81       	ld	r24, Z
    35e6:	88 2f       	mov	r24, r24
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	80 72       	andi	r24, 0x20	; 32
    35ec:	90 70       	andi	r25, 0x00	; 0
    35ee:	00 97       	sbiw	r24, 0x00	; 0
    35f0:	b9 f3       	breq	.-18     	; 0x35e0 <main+0x170>
	 UDR0 = 'X';                     // transmit the bytes from packet
    35f2:	e6 ec       	ldi	r30, 0xC6	; 198
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	88 e5       	ldi	r24, 0x58	; 88
    35f8:	80 83       	st	Z, r24
	 while(!(UCSR0A & (1<<UDRE0)));
    35fa:	e0 ec       	ldi	r30, 0xC0	; 192
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	80 81       	ld	r24, Z
    3600:	88 2f       	mov	r24, r24
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	80 72       	andi	r24, 0x20	; 32
    3606:	90 70       	andi	r25, 0x00	; 0
    3608:	00 97       	sbiw	r24, 0x00	; 0
    360a:	b9 f3       	breq	.-18     	; 0x35fa <main+0x18a>
	 UDR0 = 'R';                     // transmit the bytes from packet
    360c:	e6 ec       	ldi	r30, 0xC6	; 198
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	82 e5       	ldi	r24, 0x52	; 82
    3612:	80 83       	st	Z, r24

	 flag1 = 0;
    3614:	10 92 15 03 	sts	0x0315, r1
   }  
   
   // take the action on previous data byte received in the UART0 ISR
   if(flag2 == 1)
    3618:	80 91 16 03 	lds	r24, 0x0316
    361c:	81 30       	cpi	r24, 0x01	; 1
    361e:	21 f4       	brne	.+8      	; 0x3628 <main+0x1b8>
   {
     remote_control();   
    3620:	0e 94 85 19 	call	0x330a	; 0x330a <remote_control>
	 flag2 = 0;
    3624:	10 92 16 03 	sts	0x0316, r1
   } 
   
   // following function beeps the buzzer twice after sucessfully reciving 10 packets 
   // from the remote control.
   
   if(flag3 == 0)
    3628:	80 91 17 03 	lds	r24, 0x0317
    362c:	88 23       	and	r24, r24
    362e:	09 f0       	breq	.+2      	; 0x3632 <main+0x1c2>
    3630:	b9 cf       	rjmp	.-142    	; 0x35a4 <main+0x134>
   { 
    if(communication_proper_count > 10)
    3632:	80 91 18 03 	lds	r24, 0x0318
    3636:	8b 30       	cpi	r24, 0x0B	; 11
    3638:	08 f4       	brcc	.+2      	; 0x363c <main+0x1cc>
    363a:	b4 cf       	rjmp	.-152    	; 0x35a4 <main+0x134>
     { 
	   flag3 = 1;
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	80 93 17 03 	sts	0x0317, r24
	   buzzer_on();  _delay_ms(400); buzzer_off();_delay_ms(400);
    3642:	0e 94 db 00 	call	0x1b6	; 0x1b6 <buzzer_on>
    3646:	80 e0       	ldi	r24, 0x00	; 0
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	a8 ec       	ldi	r26, 0xC8	; 200
    364c:	b3 e4       	ldi	r27, 0x43	; 67
    364e:	8d ab       	std	Y+53, r24	; 0x35
    3650:	9e ab       	std	Y+54, r25	; 0x36
    3652:	af ab       	std	Y+55, r26	; 0x37
    3654:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3656:	6d a9       	ldd	r22, Y+53	; 0x35
    3658:	7e a9       	ldd	r23, Y+54	; 0x36
    365a:	8f a9       	ldd	r24, Y+55	; 0x37
    365c:	98 ad       	ldd	r25, Y+56	; 0x38
    365e:	26 e6       	ldi	r18, 0x66	; 102
    3660:	36 e6       	ldi	r19, 0x66	; 102
    3662:	46 e6       	ldi	r20, 0x66	; 102
    3664:	55 e4       	ldi	r21, 0x45	; 69
    3666:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	89 ab       	std	Y+49, r24	; 0x31
    3670:	9a ab       	std	Y+50, r25	; 0x32
    3672:	ab ab       	std	Y+51, r26	; 0x33
    3674:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3676:	69 a9       	ldd	r22, Y+49	; 0x31
    3678:	7a a9       	ldd	r23, Y+50	; 0x32
    367a:	8b a9       	ldd	r24, Y+51	; 0x33
    367c:	9c a9       	ldd	r25, Y+52	; 0x34
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	40 e8       	ldi	r20, 0x80	; 128
    3684:	5f e3       	ldi	r21, 0x3F	; 63
    3686:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    368a:	88 23       	and	r24, r24
    368c:	2c f4       	brge	.+10     	; 0x3698 <main+0x228>
		__ticks = 1;
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	98 ab       	std	Y+48, r25	; 0x30
    3694:	8f a7       	std	Y+47, r24	; 0x2f
    3696:	3f c0       	rjmp	.+126    	; 0x3716 <main+0x2a6>
	else if (__tmp > 65535)
    3698:	69 a9       	ldd	r22, Y+49	; 0x31
    369a:	7a a9       	ldd	r23, Y+50	; 0x32
    369c:	8b a9       	ldd	r24, Y+51	; 0x33
    369e:	9c a9       	ldd	r25, Y+52	; 0x34
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	3f ef       	ldi	r19, 0xFF	; 255
    36a4:	4f e7       	ldi	r20, 0x7F	; 127
    36a6:	57 e4       	ldi	r21, 0x47	; 71
    36a8:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    36ac:	18 16       	cp	r1, r24
    36ae:	4c f5       	brge	.+82     	; 0x3702 <main+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36b0:	6d a9       	ldd	r22, Y+53	; 0x35
    36b2:	7e a9       	ldd	r23, Y+54	; 0x36
    36b4:	8f a9       	ldd	r24, Y+55	; 0x37
    36b6:	98 ad       	ldd	r25, Y+56	; 0x38
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	40 e2       	ldi	r20, 0x20	; 32
    36be:	51 e4       	ldi	r21, 0x41	; 65
    36c0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	bc 01       	movw	r22, r24
    36ca:	cd 01       	movw	r24, r26
    36cc:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	98 ab       	std	Y+48, r25	; 0x30
    36d6:	8f a7       	std	Y+47, r24	; 0x2f
    36d8:	0f c0       	rjmp	.+30     	; 0x36f8 <main+0x288>
    36da:	80 e7       	ldi	r24, 0x70	; 112
    36dc:	91 e0       	ldi	r25, 0x01	; 1
    36de:	9e a7       	std	Y+46, r25	; 0x2e
    36e0:	8d a7       	std	Y+45, r24	; 0x2d
    36e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    36e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	f1 f7       	brne	.-4      	; 0x36e6 <main+0x276>
    36ea:	9e a7       	std	Y+46, r25	; 0x2e
    36ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    36f0:	98 a9       	ldd	r25, Y+48	; 0x30
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	98 ab       	std	Y+48, r25	; 0x30
    36f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    36fa:	98 a9       	ldd	r25, Y+48	; 0x30
    36fc:	00 97       	sbiw	r24, 0x00	; 0
    36fe:	69 f7       	brne	.-38     	; 0x36da <main+0x26a>
    3700:	14 c0       	rjmp	.+40     	; 0x372a <main+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3702:	69 a9       	ldd	r22, Y+49	; 0x31
    3704:	7a a9       	ldd	r23, Y+50	; 0x32
    3706:	8b a9       	ldd	r24, Y+51	; 0x33
    3708:	9c a9       	ldd	r25, Y+52	; 0x34
    370a:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	98 ab       	std	Y+48, r25	; 0x30
    3714:	8f a7       	std	Y+47, r24	; 0x2f
    3716:	8f a5       	ldd	r24, Y+47	; 0x2f
    3718:	98 a9       	ldd	r25, Y+48	; 0x30
    371a:	9c a7       	std	Y+44, r25	; 0x2c
    371c:	8b a7       	std	Y+43, r24	; 0x2b
    371e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3720:	9c a5       	ldd	r25, Y+44	; 0x2c
    3722:	01 97       	sbiw	r24, 0x01	; 1
    3724:	f1 f7       	brne	.-4      	; 0x3722 <main+0x2b2>
    3726:	9c a7       	std	Y+44, r25	; 0x2c
    3728:	8b a7       	std	Y+43, r24	; 0x2b
    372a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <buzzer_off>
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	a8 ec       	ldi	r26, 0xC8	; 200
    3734:	b3 e4       	ldi	r27, 0x43	; 67
    3736:	8f a3       	std	Y+39, r24	; 0x27
    3738:	98 a7       	std	Y+40, r25	; 0x28
    373a:	a9 a7       	std	Y+41, r26	; 0x29
    373c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373e:	6f a1       	ldd	r22, Y+39	; 0x27
    3740:	78 a5       	ldd	r23, Y+40	; 0x28
    3742:	89 a5       	ldd	r24, Y+41	; 0x29
    3744:	9a a5       	ldd	r25, Y+42	; 0x2a
    3746:	26 e6       	ldi	r18, 0x66	; 102
    3748:	36 e6       	ldi	r19, 0x66	; 102
    374a:	46 e6       	ldi	r20, 0x66	; 102
    374c:	55 e4       	ldi	r21, 0x45	; 69
    374e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	8b a3       	std	Y+35, r24	; 0x23
    3758:	9c a3       	std	Y+36, r25	; 0x24
    375a:	ad a3       	std	Y+37, r26	; 0x25
    375c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    375e:	6b a1       	ldd	r22, Y+35	; 0x23
    3760:	7c a1       	ldd	r23, Y+36	; 0x24
    3762:	8d a1       	ldd	r24, Y+37	; 0x25
    3764:	9e a1       	ldd	r25, Y+38	; 0x26
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	40 e8       	ldi	r20, 0x80	; 128
    376c:	5f e3       	ldi	r21, 0x3F	; 63
    376e:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    3772:	88 23       	and	r24, r24
    3774:	2c f4       	brge	.+10     	; 0x3780 <main+0x310>
		__ticks = 1;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	9a a3       	std	Y+34, r25	; 0x22
    377c:	89 a3       	std	Y+33, r24	; 0x21
    377e:	3f c0       	rjmp	.+126    	; 0x37fe <main+0x38e>
	else if (__tmp > 65535)
    3780:	6b a1       	ldd	r22, Y+35	; 0x23
    3782:	7c a1       	ldd	r23, Y+36	; 0x24
    3784:	8d a1       	ldd	r24, Y+37	; 0x25
    3786:	9e a1       	ldd	r25, Y+38	; 0x26
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	3f ef       	ldi	r19, 0xFF	; 255
    378c:	4f e7       	ldi	r20, 0x7F	; 127
    378e:	57 e4       	ldi	r21, 0x47	; 71
    3790:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    3794:	18 16       	cp	r1, r24
    3796:	4c f5       	brge	.+82     	; 0x37ea <main+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3798:	6f a1       	ldd	r22, Y+39	; 0x27
    379a:	78 a5       	ldd	r23, Y+40	; 0x28
    379c:	89 a5       	ldd	r24, Y+41	; 0x29
    379e:	9a a5       	ldd	r25, Y+42	; 0x2a
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e2       	ldi	r20, 0x20	; 32
    37a6:	51 e4       	ldi	r21, 0x41	; 65
    37a8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	bc 01       	movw	r22, r24
    37b2:	cd 01       	movw	r24, r26
    37b4:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	9a a3       	std	Y+34, r25	; 0x22
    37be:	89 a3       	std	Y+33, r24	; 0x21
    37c0:	0f c0       	rjmp	.+30     	; 0x37e0 <main+0x370>
    37c2:	80 e7       	ldi	r24, 0x70	; 112
    37c4:	91 e0       	ldi	r25, 0x01	; 1
    37c6:	98 a3       	std	Y+32, r25	; 0x20
    37c8:	8f 8f       	std	Y+31, r24	; 0x1f
    37ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37cc:	98 a1       	ldd	r25, Y+32	; 0x20
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	f1 f7       	brne	.-4      	; 0x37ce <main+0x35e>
    37d2:	98 a3       	std	Y+32, r25	; 0x20
    37d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d6:	89 a1       	ldd	r24, Y+33	; 0x21
    37d8:	9a a1       	ldd	r25, Y+34	; 0x22
    37da:	01 97       	sbiw	r24, 0x01	; 1
    37dc:	9a a3       	std	Y+34, r25	; 0x22
    37de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e0:	89 a1       	ldd	r24, Y+33	; 0x21
    37e2:	9a a1       	ldd	r25, Y+34	; 0x22
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	69 f7       	brne	.-38     	; 0x37c2 <main+0x352>
    37e8:	14 c0       	rjmp	.+40     	; 0x3812 <main+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ea:	6b a1       	ldd	r22, Y+35	; 0x23
    37ec:	7c a1       	ldd	r23, Y+36	; 0x24
    37ee:	8d a1       	ldd	r24, Y+37	; 0x25
    37f0:	9e a1       	ldd	r25, Y+38	; 0x26
    37f2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	9a a3       	std	Y+34, r25	; 0x22
    37fc:	89 a3       	std	Y+33, r24	; 0x21
    37fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3800:	9a a1       	ldd	r25, Y+34	; 0x22
    3802:	9e 8f       	std	Y+30, r25	; 0x1e
    3804:	8d 8f       	std	Y+29, r24	; 0x1d
    3806:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3808:	9e 8d       	ldd	r25, Y+30	; 0x1e
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <main+0x39a>
    380e:	9e 8f       	std	Y+30, r25	; 0x1e
    3810:	8d 8f       	std	Y+29, r24	; 0x1d
	   buzzer_on();  _delay_ms(400); buzzer_off();_delay_ms(400);
    3812:	0e 94 db 00 	call	0x1b6	; 0x1b6 <buzzer_on>
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	a8 ec       	ldi	r26, 0xC8	; 200
    381c:	b3 e4       	ldi	r27, 0x43	; 67
    381e:	89 8f       	std	Y+25, r24	; 0x19
    3820:	9a 8f       	std	Y+26, r25	; 0x1a
    3822:	ab 8f       	std	Y+27, r26	; 0x1b
    3824:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3826:	69 8d       	ldd	r22, Y+25	; 0x19
    3828:	7a 8d       	ldd	r23, Y+26	; 0x1a
    382a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    382c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    382e:	26 e6       	ldi	r18, 0x66	; 102
    3830:	36 e6       	ldi	r19, 0x66	; 102
    3832:	46 e6       	ldi	r20, 0x66	; 102
    3834:	55 e4       	ldi	r21, 0x45	; 69
    3836:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	8d 8b       	std	Y+21, r24	; 0x15
    3840:	9e 8b       	std	Y+22, r25	; 0x16
    3842:	af 8b       	std	Y+23, r26	; 0x17
    3844:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3846:	6d 89       	ldd	r22, Y+21	; 0x15
    3848:	7e 89       	ldd	r23, Y+22	; 0x16
    384a:	8f 89       	ldd	r24, Y+23	; 0x17
    384c:	98 8d       	ldd	r25, Y+24	; 0x18
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e8       	ldi	r20, 0x80	; 128
    3854:	5f e3       	ldi	r21, 0x3F	; 63
    3856:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    385a:	88 23       	and	r24, r24
    385c:	2c f4       	brge	.+10     	; 0x3868 <main+0x3f8>
		__ticks = 1;
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	9c 8b       	std	Y+20, r25	; 0x14
    3864:	8b 8b       	std	Y+19, r24	; 0x13
    3866:	3f c0       	rjmp	.+126    	; 0x38e6 <main+0x476>
	else if (__tmp > 65535)
    3868:	6d 89       	ldd	r22, Y+21	; 0x15
    386a:	7e 89       	ldd	r23, Y+22	; 0x16
    386c:	8f 89       	ldd	r24, Y+23	; 0x17
    386e:	98 8d       	ldd	r25, Y+24	; 0x18
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	3f ef       	ldi	r19, 0xFF	; 255
    3874:	4f e7       	ldi	r20, 0x7F	; 127
    3876:	57 e4       	ldi	r21, 0x47	; 71
    3878:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    387c:	18 16       	cp	r1, r24
    387e:	4c f5       	brge	.+82     	; 0x38d2 <main+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3880:	69 8d       	ldd	r22, Y+25	; 0x19
    3882:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3884:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3886:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e2       	ldi	r20, 0x20	; 32
    388e:	51 e4       	ldi	r21, 0x41	; 65
    3890:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	bc 01       	movw	r22, r24
    389a:	cd 01       	movw	r24, r26
    389c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	9c 8b       	std	Y+20, r25	; 0x14
    38a6:	8b 8b       	std	Y+19, r24	; 0x13
    38a8:	0f c0       	rjmp	.+30     	; 0x38c8 <main+0x458>
    38aa:	80 e7       	ldi	r24, 0x70	; 112
    38ac:	91 e0       	ldi	r25, 0x01	; 1
    38ae:	9a 8b       	std	Y+18, r25	; 0x12
    38b0:	89 8b       	std	Y+17, r24	; 0x11
    38b2:	89 89       	ldd	r24, Y+17	; 0x11
    38b4:	9a 89       	ldd	r25, Y+18	; 0x12
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <main+0x446>
    38ba:	9a 8b       	std	Y+18, r25	; 0x12
    38bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38be:	8b 89       	ldd	r24, Y+19	; 0x13
    38c0:	9c 89       	ldd	r25, Y+20	; 0x14
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	9c 8b       	std	Y+20, r25	; 0x14
    38c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c8:	8b 89       	ldd	r24, Y+19	; 0x13
    38ca:	9c 89       	ldd	r25, Y+20	; 0x14
    38cc:	00 97       	sbiw	r24, 0x00	; 0
    38ce:	69 f7       	brne	.-38     	; 0x38aa <main+0x43a>
    38d0:	14 c0       	rjmp	.+40     	; 0x38fa <main+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d2:	6d 89       	ldd	r22, Y+21	; 0x15
    38d4:	7e 89       	ldd	r23, Y+22	; 0x16
    38d6:	8f 89       	ldd	r24, Y+23	; 0x17
    38d8:	98 8d       	ldd	r25, Y+24	; 0x18
    38da:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	9c 8b       	std	Y+20, r25	; 0x14
    38e4:	8b 8b       	std	Y+19, r24	; 0x13
    38e6:	8b 89       	ldd	r24, Y+19	; 0x13
    38e8:	9c 89       	ldd	r25, Y+20	; 0x14
    38ea:	98 8b       	std	Y+16, r25	; 0x10
    38ec:	8f 87       	std	Y+15, r24	; 0x0f
    38ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    38f0:	98 89       	ldd	r25, Y+16	; 0x10
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	f1 f7       	brne	.-4      	; 0x38f2 <main+0x482>
    38f6:	98 8b       	std	Y+16, r25	; 0x10
    38f8:	8f 87       	std	Y+15, r24	; 0x0f
    38fa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <buzzer_off>
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	a8 ec       	ldi	r26, 0xC8	; 200
    3904:	b3 e4       	ldi	r27, 0x43	; 67
    3906:	8b 87       	std	Y+11, r24	; 0x0b
    3908:	9c 87       	std	Y+12, r25	; 0x0c
    390a:	ad 87       	std	Y+13, r26	; 0x0d
    390c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    390e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3910:	7c 85       	ldd	r23, Y+12	; 0x0c
    3912:	8d 85       	ldd	r24, Y+13	; 0x0d
    3914:	9e 85       	ldd	r25, Y+14	; 0x0e
    3916:	26 e6       	ldi	r18, 0x66	; 102
    3918:	36 e6       	ldi	r19, 0x66	; 102
    391a:	46 e6       	ldi	r20, 0x66	; 102
    391c:	55 e4       	ldi	r21, 0x45	; 69
    391e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	8f 83       	std	Y+7, r24	; 0x07
    3928:	98 87       	std	Y+8, r25	; 0x08
    392a:	a9 87       	std	Y+9, r26	; 0x09
    392c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    392e:	6f 81       	ldd	r22, Y+7	; 0x07
    3930:	78 85       	ldd	r23, Y+8	; 0x08
    3932:	89 85       	ldd	r24, Y+9	; 0x09
    3934:	9a 85       	ldd	r25, Y+10	; 0x0a
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	40 e8       	ldi	r20, 0x80	; 128
    393c:	5f e3       	ldi	r21, 0x3F	; 63
    393e:	0e 94 ce 20 	call	0x419c	; 0x419c <__ltsf2>
    3942:	88 23       	and	r24, r24
    3944:	2c f4       	brge	.+10     	; 0x3950 <main+0x4e0>
		__ticks = 1;
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	9e 83       	std	Y+6, r25	; 0x06
    394c:	8d 83       	std	Y+5, r24	; 0x05
    394e:	3f c0       	rjmp	.+126    	; 0x39ce <main+0x55e>
	else if (__tmp > 65535)
    3950:	6f 81       	ldd	r22, Y+7	; 0x07
    3952:	78 85       	ldd	r23, Y+8	; 0x08
    3954:	89 85       	ldd	r24, Y+9	; 0x09
    3956:	9a 85       	ldd	r25, Y+10	; 0x0a
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	3f ef       	ldi	r19, 0xFF	; 255
    395c:	4f e7       	ldi	r20, 0x7F	; 127
    395e:	57 e4       	ldi	r21, 0x47	; 71
    3960:	0e 94 6e 20 	call	0x40dc	; 0x40dc <__gtsf2>
    3964:	18 16       	cp	r1, r24
    3966:	4c f5       	brge	.+82     	; 0x39ba <main+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3968:	6b 85       	ldd	r22, Y+11	; 0x0b
    396a:	7c 85       	ldd	r23, Y+12	; 0x0c
    396c:	8d 85       	ldd	r24, Y+13	; 0x0d
    396e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e2       	ldi	r20, 0x20	; 32
    3976:	51 e4       	ldi	r21, 0x41	; 65
    3978:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsf3>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	bc 01       	movw	r22, r24
    3982:	cd 01       	movw	r24, r26
    3984:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	9e 83       	std	Y+6, r25	; 0x06
    398e:	8d 83       	std	Y+5, r24	; 0x05
    3990:	0f c0       	rjmp	.+30     	; 0x39b0 <main+0x540>
    3992:	80 e7       	ldi	r24, 0x70	; 112
    3994:	91 e0       	ldi	r25, 0x01	; 1
    3996:	9c 83       	std	Y+4, r25	; 0x04
    3998:	8b 83       	std	Y+3, r24	; 0x03
    399a:	8b 81       	ldd	r24, Y+3	; 0x03
    399c:	9c 81       	ldd	r25, Y+4	; 0x04
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	f1 f7       	brne	.-4      	; 0x399e <main+0x52e>
    39a2:	9c 83       	std	Y+4, r25	; 0x04
    39a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a6:	8d 81       	ldd	r24, Y+5	; 0x05
    39a8:	9e 81       	ldd	r25, Y+6	; 0x06
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	9e 83       	std	Y+6, r25	; 0x06
    39ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b0:	8d 81       	ldd	r24, Y+5	; 0x05
    39b2:	9e 81       	ldd	r25, Y+6	; 0x06
    39b4:	00 97       	sbiw	r24, 0x00	; 0
    39b6:	69 f7       	brne	.-38     	; 0x3992 <main+0x522>
    39b8:	f5 cd       	rjmp	.-1046   	; 0x35a4 <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ba:	6f 81       	ldd	r22, Y+7	; 0x07
    39bc:	78 85       	ldd	r23, Y+8	; 0x08
    39be:	89 85       	ldd	r24, Y+9	; 0x09
    39c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__fixunssfsi>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	9e 83       	std	Y+6, r25	; 0x06
    39cc:	8d 83       	std	Y+5, r24	; 0x05
    39ce:	8d 81       	ldd	r24, Y+5	; 0x05
    39d0:	9e 81       	ldd	r25, Y+6	; 0x06
    39d2:	9a 83       	std	Y+2, r25	; 0x02
    39d4:	89 83       	std	Y+1, r24	; 0x01
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	9a 81       	ldd	r25, Y+2	; 0x02
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <main+0x56a>
    39de:	9a 83       	std	Y+2, r25	; 0x02
    39e0:	89 83       	std	Y+1, r24	; 0x01
    39e2:	e0 cd       	rjmp	.-1088   	; 0x35a4 <main+0x134>

000039e4 <__fixunssfsi>:
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	7b 01       	movw	r14, r22
    39ee:	8c 01       	movw	r16, r24
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e0       	ldi	r20, 0x00	; 0
    39f6:	5f e4       	ldi	r21, 0x4F	; 79
    39f8:	0e 94 9e 20 	call	0x413c	; 0x413c <__gesf2>
    39fc:	88 23       	and	r24, r24
    39fe:	8c f0       	brlt	.+34     	; 0x3a22 <__fixunssfsi+0x3e>
    3a00:	c8 01       	movw	r24, r16
    3a02:	b7 01       	movw	r22, r14
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	40 e0       	ldi	r20, 0x00	; 0
    3a0a:	5f e4       	ldi	r21, 0x4F	; 79
    3a0c:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <__subsf3>
    3a10:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__fixsfsi>
    3a14:	9b 01       	movw	r18, r22
    3a16:	ac 01       	movw	r20, r24
    3a18:	20 50       	subi	r18, 0x00	; 0
    3a1a:	30 40       	sbci	r19, 0x00	; 0
    3a1c:	40 40       	sbci	r20, 0x00	; 0
    3a1e:	50 48       	sbci	r21, 0x80	; 128
    3a20:	06 c0       	rjmp	.+12     	; 0x3a2e <__fixunssfsi+0x4a>
    3a22:	c8 01       	movw	r24, r16
    3a24:	b7 01       	movw	r22, r14
    3a26:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__fixsfsi>
    3a2a:	9b 01       	movw	r18, r22
    3a2c:	ac 01       	movw	r20, r24
    3a2e:	b9 01       	movw	r22, r18
    3a30:	ca 01       	movw	r24, r20
    3a32:	1f 91       	pop	r17
    3a34:	0f 91       	pop	r16
    3a36:	ff 90       	pop	r15
    3a38:	ef 90       	pop	r14
    3a3a:	08 95       	ret

00003a3c <_fpadd_parts>:
    3a3c:	a0 e0       	ldi	r26, 0x00	; 0
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	e4 e2       	ldi	r30, 0x24	; 36
    3a42:	fd e1       	ldi	r31, 0x1D	; 29
    3a44:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__prologue_saves__>
    3a48:	dc 01       	movw	r26, r24
    3a4a:	2b 01       	movw	r4, r22
    3a4c:	fa 01       	movw	r30, r20
    3a4e:	9c 91       	ld	r25, X
    3a50:	92 30       	cpi	r25, 0x02	; 2
    3a52:	08 f4       	brcc	.+2      	; 0x3a56 <_fpadd_parts+0x1a>
    3a54:	39 c1       	rjmp	.+626    	; 0x3cc8 <_fpadd_parts+0x28c>
    3a56:	eb 01       	movw	r28, r22
    3a58:	88 81       	ld	r24, Y
    3a5a:	82 30       	cpi	r24, 0x02	; 2
    3a5c:	08 f4       	brcc	.+2      	; 0x3a60 <_fpadd_parts+0x24>
    3a5e:	33 c1       	rjmp	.+614    	; 0x3cc6 <_fpadd_parts+0x28a>
    3a60:	94 30       	cpi	r25, 0x04	; 4
    3a62:	69 f4       	brne	.+26     	; 0x3a7e <_fpadd_parts+0x42>
    3a64:	84 30       	cpi	r24, 0x04	; 4
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <_fpadd_parts+0x2e>
    3a68:	2f c1       	rjmp	.+606    	; 0x3cc8 <_fpadd_parts+0x28c>
    3a6a:	11 96       	adiw	r26, 0x01	; 1
    3a6c:	9c 91       	ld	r25, X
    3a6e:	11 97       	sbiw	r26, 0x01	; 1
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	98 17       	cp	r25, r24
    3a74:	09 f4       	brne	.+2      	; 0x3a78 <_fpadd_parts+0x3c>
    3a76:	28 c1       	rjmp	.+592    	; 0x3cc8 <_fpadd_parts+0x28c>
    3a78:	a3 e0       	ldi	r26, 0x03	; 3
    3a7a:	b2 e0       	ldi	r27, 0x02	; 2
    3a7c:	25 c1       	rjmp	.+586    	; 0x3cc8 <_fpadd_parts+0x28c>
    3a7e:	84 30       	cpi	r24, 0x04	; 4
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <_fpadd_parts+0x48>
    3a82:	21 c1       	rjmp	.+578    	; 0x3cc6 <_fpadd_parts+0x28a>
    3a84:	82 30       	cpi	r24, 0x02	; 2
    3a86:	a9 f4       	brne	.+42     	; 0x3ab2 <_fpadd_parts+0x76>
    3a88:	92 30       	cpi	r25, 0x02	; 2
    3a8a:	09 f0       	breq	.+2      	; 0x3a8e <_fpadd_parts+0x52>
    3a8c:	1d c1       	rjmp	.+570    	; 0x3cc8 <_fpadd_parts+0x28c>
    3a8e:	9a 01       	movw	r18, r20
    3a90:	ad 01       	movw	r20, r26
    3a92:	88 e0       	ldi	r24, 0x08	; 8
    3a94:	ea 01       	movw	r28, r20
    3a96:	09 90       	ld	r0, Y+
    3a98:	ae 01       	movw	r20, r28
    3a9a:	e9 01       	movw	r28, r18
    3a9c:	09 92       	st	Y+, r0
    3a9e:	9e 01       	movw	r18, r28
    3aa0:	81 50       	subi	r24, 0x01	; 1
    3aa2:	c1 f7       	brne	.-16     	; 0x3a94 <_fpadd_parts+0x58>
    3aa4:	e2 01       	movw	r28, r4
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01
    3aa8:	11 96       	adiw	r26, 0x01	; 1
    3aaa:	9c 91       	ld	r25, X
    3aac:	89 23       	and	r24, r25
    3aae:	81 83       	std	Z+1, r24	; 0x01
    3ab0:	08 c1       	rjmp	.+528    	; 0x3cc2 <_fpadd_parts+0x286>
    3ab2:	92 30       	cpi	r25, 0x02	; 2
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <_fpadd_parts+0x7c>
    3ab6:	07 c1       	rjmp	.+526    	; 0x3cc6 <_fpadd_parts+0x28a>
    3ab8:	12 96       	adiw	r26, 0x02	; 2
    3aba:	2d 90       	ld	r2, X+
    3abc:	3c 90       	ld	r3, X
    3abe:	13 97       	sbiw	r26, 0x03	; 3
    3ac0:	eb 01       	movw	r28, r22
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac6:	14 96       	adiw	r26, 0x04	; 4
    3ac8:	ad 90       	ld	r10, X+
    3aca:	bd 90       	ld	r11, X+
    3acc:	cd 90       	ld	r12, X+
    3ace:	dc 90       	ld	r13, X
    3ad0:	17 97       	sbiw	r26, 0x07	; 7
    3ad2:	ec 80       	ldd	r14, Y+4	; 0x04
    3ad4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ad6:	0e 81       	ldd	r16, Y+6	; 0x06
    3ad8:	1f 81       	ldd	r17, Y+7	; 0x07
    3ada:	91 01       	movw	r18, r2
    3adc:	28 1b       	sub	r18, r24
    3ade:	39 0b       	sbc	r19, r25
    3ae0:	b9 01       	movw	r22, r18
    3ae2:	37 ff       	sbrs	r19, 7
    3ae4:	04 c0       	rjmp	.+8      	; 0x3aee <_fpadd_parts+0xb2>
    3ae6:	66 27       	eor	r22, r22
    3ae8:	77 27       	eor	r23, r23
    3aea:	62 1b       	sub	r22, r18
    3aec:	73 0b       	sbc	r23, r19
    3aee:	60 32       	cpi	r22, 0x20	; 32
    3af0:	71 05       	cpc	r23, r1
    3af2:	0c f0       	brlt	.+2      	; 0x3af6 <_fpadd_parts+0xba>
    3af4:	61 c0       	rjmp	.+194    	; 0x3bb8 <_fpadd_parts+0x17c>
    3af6:	12 16       	cp	r1, r18
    3af8:	13 06       	cpc	r1, r19
    3afa:	6c f5       	brge	.+90     	; 0x3b56 <_fpadd_parts+0x11a>
    3afc:	37 01       	movw	r6, r14
    3afe:	48 01       	movw	r8, r16
    3b00:	06 2e       	mov	r0, r22
    3b02:	04 c0       	rjmp	.+8      	; 0x3b0c <_fpadd_parts+0xd0>
    3b04:	96 94       	lsr	r9
    3b06:	87 94       	ror	r8
    3b08:	77 94       	ror	r7
    3b0a:	67 94       	ror	r6
    3b0c:	0a 94       	dec	r0
    3b0e:	d2 f7       	brpl	.-12     	; 0x3b04 <_fpadd_parts+0xc8>
    3b10:	21 e0       	ldi	r18, 0x01	; 1
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	40 e0       	ldi	r20, 0x00	; 0
    3b16:	50 e0       	ldi	r21, 0x00	; 0
    3b18:	04 c0       	rjmp	.+8      	; 0x3b22 <_fpadd_parts+0xe6>
    3b1a:	22 0f       	add	r18, r18
    3b1c:	33 1f       	adc	r19, r19
    3b1e:	44 1f       	adc	r20, r20
    3b20:	55 1f       	adc	r21, r21
    3b22:	6a 95       	dec	r22
    3b24:	d2 f7       	brpl	.-12     	; 0x3b1a <_fpadd_parts+0xde>
    3b26:	21 50       	subi	r18, 0x01	; 1
    3b28:	30 40       	sbci	r19, 0x00	; 0
    3b2a:	40 40       	sbci	r20, 0x00	; 0
    3b2c:	50 40       	sbci	r21, 0x00	; 0
    3b2e:	2e 21       	and	r18, r14
    3b30:	3f 21       	and	r19, r15
    3b32:	40 23       	and	r20, r16
    3b34:	51 23       	and	r21, r17
    3b36:	21 15       	cp	r18, r1
    3b38:	31 05       	cpc	r19, r1
    3b3a:	41 05       	cpc	r20, r1
    3b3c:	51 05       	cpc	r21, r1
    3b3e:	21 f0       	breq	.+8      	; 0x3b48 <_fpadd_parts+0x10c>
    3b40:	21 e0       	ldi	r18, 0x01	; 1
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	40 e0       	ldi	r20, 0x00	; 0
    3b46:	50 e0       	ldi	r21, 0x00	; 0
    3b48:	79 01       	movw	r14, r18
    3b4a:	8a 01       	movw	r16, r20
    3b4c:	e6 28       	or	r14, r6
    3b4e:	f7 28       	or	r15, r7
    3b50:	08 29       	or	r16, r8
    3b52:	19 29       	or	r17, r9
    3b54:	3c c0       	rjmp	.+120    	; 0x3bce <_fpadd_parts+0x192>
    3b56:	23 2b       	or	r18, r19
    3b58:	d1 f1       	breq	.+116    	; 0x3bce <_fpadd_parts+0x192>
    3b5a:	26 0e       	add	r2, r22
    3b5c:	37 1e       	adc	r3, r23
    3b5e:	35 01       	movw	r6, r10
    3b60:	46 01       	movw	r8, r12
    3b62:	06 2e       	mov	r0, r22
    3b64:	04 c0       	rjmp	.+8      	; 0x3b6e <_fpadd_parts+0x132>
    3b66:	96 94       	lsr	r9
    3b68:	87 94       	ror	r8
    3b6a:	77 94       	ror	r7
    3b6c:	67 94       	ror	r6
    3b6e:	0a 94       	dec	r0
    3b70:	d2 f7       	brpl	.-12     	; 0x3b66 <_fpadd_parts+0x12a>
    3b72:	21 e0       	ldi	r18, 0x01	; 1
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	40 e0       	ldi	r20, 0x00	; 0
    3b78:	50 e0       	ldi	r21, 0x00	; 0
    3b7a:	04 c0       	rjmp	.+8      	; 0x3b84 <_fpadd_parts+0x148>
    3b7c:	22 0f       	add	r18, r18
    3b7e:	33 1f       	adc	r19, r19
    3b80:	44 1f       	adc	r20, r20
    3b82:	55 1f       	adc	r21, r21
    3b84:	6a 95       	dec	r22
    3b86:	d2 f7       	brpl	.-12     	; 0x3b7c <_fpadd_parts+0x140>
    3b88:	21 50       	subi	r18, 0x01	; 1
    3b8a:	30 40       	sbci	r19, 0x00	; 0
    3b8c:	40 40       	sbci	r20, 0x00	; 0
    3b8e:	50 40       	sbci	r21, 0x00	; 0
    3b90:	2a 21       	and	r18, r10
    3b92:	3b 21       	and	r19, r11
    3b94:	4c 21       	and	r20, r12
    3b96:	5d 21       	and	r21, r13
    3b98:	21 15       	cp	r18, r1
    3b9a:	31 05       	cpc	r19, r1
    3b9c:	41 05       	cpc	r20, r1
    3b9e:	51 05       	cpc	r21, r1
    3ba0:	21 f0       	breq	.+8      	; 0x3baa <_fpadd_parts+0x16e>
    3ba2:	21 e0       	ldi	r18, 0x01	; 1
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	40 e0       	ldi	r20, 0x00	; 0
    3ba8:	50 e0       	ldi	r21, 0x00	; 0
    3baa:	59 01       	movw	r10, r18
    3bac:	6a 01       	movw	r12, r20
    3bae:	a6 28       	or	r10, r6
    3bb0:	b7 28       	or	r11, r7
    3bb2:	c8 28       	or	r12, r8
    3bb4:	d9 28       	or	r13, r9
    3bb6:	0b c0       	rjmp	.+22     	; 0x3bce <_fpadd_parts+0x192>
    3bb8:	82 15       	cp	r24, r2
    3bba:	93 05       	cpc	r25, r3
    3bbc:	2c f0       	brlt	.+10     	; 0x3bc8 <_fpadd_parts+0x18c>
    3bbe:	1c 01       	movw	r2, r24
    3bc0:	aa 24       	eor	r10, r10
    3bc2:	bb 24       	eor	r11, r11
    3bc4:	65 01       	movw	r12, r10
    3bc6:	03 c0       	rjmp	.+6      	; 0x3bce <_fpadd_parts+0x192>
    3bc8:	ee 24       	eor	r14, r14
    3bca:	ff 24       	eor	r15, r15
    3bcc:	87 01       	movw	r16, r14
    3bce:	11 96       	adiw	r26, 0x01	; 1
    3bd0:	9c 91       	ld	r25, X
    3bd2:	d2 01       	movw	r26, r4
    3bd4:	11 96       	adiw	r26, 0x01	; 1
    3bd6:	8c 91       	ld	r24, X
    3bd8:	98 17       	cp	r25, r24
    3bda:	09 f4       	brne	.+2      	; 0x3bde <_fpadd_parts+0x1a2>
    3bdc:	45 c0       	rjmp	.+138    	; 0x3c68 <_fpadd_parts+0x22c>
    3bde:	99 23       	and	r25, r25
    3be0:	39 f0       	breq	.+14     	; 0x3bf0 <_fpadd_parts+0x1b4>
    3be2:	a8 01       	movw	r20, r16
    3be4:	97 01       	movw	r18, r14
    3be6:	2a 19       	sub	r18, r10
    3be8:	3b 09       	sbc	r19, r11
    3bea:	4c 09       	sbc	r20, r12
    3bec:	5d 09       	sbc	r21, r13
    3bee:	06 c0       	rjmp	.+12     	; 0x3bfc <_fpadd_parts+0x1c0>
    3bf0:	a6 01       	movw	r20, r12
    3bf2:	95 01       	movw	r18, r10
    3bf4:	2e 19       	sub	r18, r14
    3bf6:	3f 09       	sbc	r19, r15
    3bf8:	40 0b       	sbc	r20, r16
    3bfa:	51 0b       	sbc	r21, r17
    3bfc:	57 fd       	sbrc	r21, 7
    3bfe:	08 c0       	rjmp	.+16     	; 0x3c10 <_fpadd_parts+0x1d4>
    3c00:	11 82       	std	Z+1, r1	; 0x01
    3c02:	33 82       	std	Z+3, r3	; 0x03
    3c04:	22 82       	std	Z+2, r2	; 0x02
    3c06:	24 83       	std	Z+4, r18	; 0x04
    3c08:	35 83       	std	Z+5, r19	; 0x05
    3c0a:	46 83       	std	Z+6, r20	; 0x06
    3c0c:	57 83       	std	Z+7, r21	; 0x07
    3c0e:	1d c0       	rjmp	.+58     	; 0x3c4a <_fpadd_parts+0x20e>
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	81 83       	std	Z+1, r24	; 0x01
    3c14:	33 82       	std	Z+3, r3	; 0x03
    3c16:	22 82       	std	Z+2, r2	; 0x02
    3c18:	88 27       	eor	r24, r24
    3c1a:	99 27       	eor	r25, r25
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	82 1b       	sub	r24, r18
    3c20:	93 0b       	sbc	r25, r19
    3c22:	a4 0b       	sbc	r26, r20
    3c24:	b5 0b       	sbc	r27, r21
    3c26:	84 83       	std	Z+4, r24	; 0x04
    3c28:	95 83       	std	Z+5, r25	; 0x05
    3c2a:	a6 83       	std	Z+6, r26	; 0x06
    3c2c:	b7 83       	std	Z+7, r27	; 0x07
    3c2e:	0d c0       	rjmp	.+26     	; 0x3c4a <_fpadd_parts+0x20e>
    3c30:	22 0f       	add	r18, r18
    3c32:	33 1f       	adc	r19, r19
    3c34:	44 1f       	adc	r20, r20
    3c36:	55 1f       	adc	r21, r21
    3c38:	24 83       	std	Z+4, r18	; 0x04
    3c3a:	35 83       	std	Z+5, r19	; 0x05
    3c3c:	46 83       	std	Z+6, r20	; 0x06
    3c3e:	57 83       	std	Z+7, r21	; 0x07
    3c40:	82 81       	ldd	r24, Z+2	; 0x02
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	01 97       	sbiw	r24, 0x01	; 1
    3c46:	93 83       	std	Z+3, r25	; 0x03
    3c48:	82 83       	std	Z+2, r24	; 0x02
    3c4a:	24 81       	ldd	r18, Z+4	; 0x04
    3c4c:	35 81       	ldd	r19, Z+5	; 0x05
    3c4e:	46 81       	ldd	r20, Z+6	; 0x06
    3c50:	57 81       	ldd	r21, Z+7	; 0x07
    3c52:	da 01       	movw	r26, r20
    3c54:	c9 01       	movw	r24, r18
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	a1 09       	sbc	r26, r1
    3c5a:	b1 09       	sbc	r27, r1
    3c5c:	8f 5f       	subi	r24, 0xFF	; 255
    3c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c60:	af 4f       	sbci	r26, 0xFF	; 255
    3c62:	bf 43       	sbci	r27, 0x3F	; 63
    3c64:	28 f3       	brcs	.-54     	; 0x3c30 <_fpadd_parts+0x1f4>
    3c66:	0b c0       	rjmp	.+22     	; 0x3c7e <_fpadd_parts+0x242>
    3c68:	91 83       	std	Z+1, r25	; 0x01
    3c6a:	33 82       	std	Z+3, r3	; 0x03
    3c6c:	22 82       	std	Z+2, r2	; 0x02
    3c6e:	ea 0c       	add	r14, r10
    3c70:	fb 1c       	adc	r15, r11
    3c72:	0c 1d       	adc	r16, r12
    3c74:	1d 1d       	adc	r17, r13
    3c76:	e4 82       	std	Z+4, r14	; 0x04
    3c78:	f5 82       	std	Z+5, r15	; 0x05
    3c7a:	06 83       	std	Z+6, r16	; 0x06
    3c7c:	17 83       	std	Z+7, r17	; 0x07
    3c7e:	83 e0       	ldi	r24, 0x03	; 3
    3c80:	80 83       	st	Z, r24
    3c82:	24 81       	ldd	r18, Z+4	; 0x04
    3c84:	35 81       	ldd	r19, Z+5	; 0x05
    3c86:	46 81       	ldd	r20, Z+6	; 0x06
    3c88:	57 81       	ldd	r21, Z+7	; 0x07
    3c8a:	57 ff       	sbrs	r21, 7
    3c8c:	1a c0       	rjmp	.+52     	; 0x3cc2 <_fpadd_parts+0x286>
    3c8e:	c9 01       	movw	r24, r18
    3c90:	aa 27       	eor	r26, r26
    3c92:	97 fd       	sbrc	r25, 7
    3c94:	a0 95       	com	r26
    3c96:	ba 2f       	mov	r27, r26
    3c98:	81 70       	andi	r24, 0x01	; 1
    3c9a:	90 70       	andi	r25, 0x00	; 0
    3c9c:	a0 70       	andi	r26, 0x00	; 0
    3c9e:	b0 70       	andi	r27, 0x00	; 0
    3ca0:	56 95       	lsr	r21
    3ca2:	47 95       	ror	r20
    3ca4:	37 95       	ror	r19
    3ca6:	27 95       	ror	r18
    3ca8:	82 2b       	or	r24, r18
    3caa:	93 2b       	or	r25, r19
    3cac:	a4 2b       	or	r26, r20
    3cae:	b5 2b       	or	r27, r21
    3cb0:	84 83       	std	Z+4, r24	; 0x04
    3cb2:	95 83       	std	Z+5, r25	; 0x05
    3cb4:	a6 83       	std	Z+6, r26	; 0x06
    3cb6:	b7 83       	std	Z+7, r27	; 0x07
    3cb8:	82 81       	ldd	r24, Z+2	; 0x02
    3cba:	93 81       	ldd	r25, Z+3	; 0x03
    3cbc:	01 96       	adiw	r24, 0x01	; 1
    3cbe:	93 83       	std	Z+3, r25	; 0x03
    3cc0:	82 83       	std	Z+2, r24	; 0x02
    3cc2:	df 01       	movw	r26, r30
    3cc4:	01 c0       	rjmp	.+2      	; 0x3cc8 <_fpadd_parts+0x28c>
    3cc6:	d2 01       	movw	r26, r4
    3cc8:	cd 01       	movw	r24, r26
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	e2 e1       	ldi	r30, 0x12	; 18
    3cd0:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__epilogue_restores__>

00003cd4 <__subsf3>:
    3cd4:	a0 e2       	ldi	r26, 0x20	; 32
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	e0 e7       	ldi	r30, 0x70	; 112
    3cda:	fe e1       	ldi	r31, 0x1E	; 30
    3cdc:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__prologue_saves__+0x18>
    3ce0:	69 83       	std	Y+1, r22	; 0x01
    3ce2:	7a 83       	std	Y+2, r23	; 0x02
    3ce4:	8b 83       	std	Y+3, r24	; 0x03
    3ce6:	9c 83       	std	Y+4, r25	; 0x04
    3ce8:	2d 83       	std	Y+5, r18	; 0x05
    3cea:	3e 83       	std	Y+6, r19	; 0x06
    3cec:	4f 83       	std	Y+7, r20	; 0x07
    3cee:	58 87       	std	Y+8, r21	; 0x08
    3cf0:	e9 e0       	ldi	r30, 0x09	; 9
    3cf2:	ee 2e       	mov	r14, r30
    3cf4:	f1 2c       	mov	r15, r1
    3cf6:	ec 0e       	add	r14, r28
    3cf8:	fd 1e       	adc	r15, r29
    3cfa:	ce 01       	movw	r24, r28
    3cfc:	01 96       	adiw	r24, 0x01	; 1
    3cfe:	b7 01       	movw	r22, r14
    3d00:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    3d04:	8e 01       	movw	r16, r28
    3d06:	0f 5e       	subi	r16, 0xEF	; 239
    3d08:	1f 4f       	sbci	r17, 0xFF	; 255
    3d0a:	ce 01       	movw	r24, r28
    3d0c:	05 96       	adiw	r24, 0x05	; 5
    3d0e:	b8 01       	movw	r22, r16
    3d10:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    3d14:	8a 89       	ldd	r24, Y+18	; 0x12
    3d16:	91 e0       	ldi	r25, 0x01	; 1
    3d18:	89 27       	eor	r24, r25
    3d1a:	8a 8b       	std	Y+18, r24	; 0x12
    3d1c:	c7 01       	movw	r24, r14
    3d1e:	b8 01       	movw	r22, r16
    3d20:	ae 01       	movw	r20, r28
    3d22:	47 5e       	subi	r20, 0xE7	; 231
    3d24:	5f 4f       	sbci	r21, 0xFF	; 255
    3d26:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_fpadd_parts>
    3d2a:	0e 94 ff 21 	call	0x43fe	; 0x43fe <__pack_f>
    3d2e:	a0 96       	adiw	r28, 0x20	; 32
    3d30:	e6 e0       	ldi	r30, 0x06	; 6
    3d32:	0c 94 cd 23 	jmp	0x479a	; 0x479a <__epilogue_restores__+0x18>

00003d36 <__addsf3>:
    3d36:	a0 e2       	ldi	r26, 0x20	; 32
    3d38:	b0 e0       	ldi	r27, 0x00	; 0
    3d3a:	e1 ea       	ldi	r30, 0xA1	; 161
    3d3c:	fe e1       	ldi	r31, 0x1E	; 30
    3d3e:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__prologue_saves__+0x18>
    3d42:	69 83       	std	Y+1, r22	; 0x01
    3d44:	7a 83       	std	Y+2, r23	; 0x02
    3d46:	8b 83       	std	Y+3, r24	; 0x03
    3d48:	9c 83       	std	Y+4, r25	; 0x04
    3d4a:	2d 83       	std	Y+5, r18	; 0x05
    3d4c:	3e 83       	std	Y+6, r19	; 0x06
    3d4e:	4f 83       	std	Y+7, r20	; 0x07
    3d50:	58 87       	std	Y+8, r21	; 0x08
    3d52:	f9 e0       	ldi	r31, 0x09	; 9
    3d54:	ef 2e       	mov	r14, r31
    3d56:	f1 2c       	mov	r15, r1
    3d58:	ec 0e       	add	r14, r28
    3d5a:	fd 1e       	adc	r15, r29
    3d5c:	ce 01       	movw	r24, r28
    3d5e:	01 96       	adiw	r24, 0x01	; 1
    3d60:	b7 01       	movw	r22, r14
    3d62:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    3d66:	8e 01       	movw	r16, r28
    3d68:	0f 5e       	subi	r16, 0xEF	; 239
    3d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6c:	ce 01       	movw	r24, r28
    3d6e:	05 96       	adiw	r24, 0x05	; 5
    3d70:	b8 01       	movw	r22, r16
    3d72:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    3d76:	c7 01       	movw	r24, r14
    3d78:	b8 01       	movw	r22, r16
    3d7a:	ae 01       	movw	r20, r28
    3d7c:	47 5e       	subi	r20, 0xE7	; 231
    3d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d80:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <_fpadd_parts>
    3d84:	0e 94 ff 21 	call	0x43fe	; 0x43fe <__pack_f>
    3d88:	a0 96       	adiw	r28, 0x20	; 32
    3d8a:	e6 e0       	ldi	r30, 0x06	; 6
    3d8c:	0c 94 cd 23 	jmp	0x479a	; 0x479a <__epilogue_restores__+0x18>

00003d90 <__mulsf3>:
    3d90:	a0 e2       	ldi	r26, 0x20	; 32
    3d92:	b0 e0       	ldi	r27, 0x00	; 0
    3d94:	ee ec       	ldi	r30, 0xCE	; 206
    3d96:	fe e1       	ldi	r31, 0x1E	; 30
    3d98:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__prologue_saves__>
    3d9c:	69 83       	std	Y+1, r22	; 0x01
    3d9e:	7a 83       	std	Y+2, r23	; 0x02
    3da0:	8b 83       	std	Y+3, r24	; 0x03
    3da2:	9c 83       	std	Y+4, r25	; 0x04
    3da4:	2d 83       	std	Y+5, r18	; 0x05
    3da6:	3e 83       	std	Y+6, r19	; 0x06
    3da8:	4f 83       	std	Y+7, r20	; 0x07
    3daa:	58 87       	std	Y+8, r21	; 0x08
    3dac:	ce 01       	movw	r24, r28
    3dae:	01 96       	adiw	r24, 0x01	; 1
    3db0:	be 01       	movw	r22, r28
    3db2:	67 5f       	subi	r22, 0xF7	; 247
    3db4:	7f 4f       	sbci	r23, 0xFF	; 255
    3db6:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    3dba:	ce 01       	movw	r24, r28
    3dbc:	05 96       	adiw	r24, 0x05	; 5
    3dbe:	be 01       	movw	r22, r28
    3dc0:	6f 5e       	subi	r22, 0xEF	; 239
    3dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc4:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    3dc8:	99 85       	ldd	r25, Y+9	; 0x09
    3dca:	92 30       	cpi	r25, 0x02	; 2
    3dcc:	88 f0       	brcs	.+34     	; 0x3df0 <__mulsf3+0x60>
    3dce:	89 89       	ldd	r24, Y+17	; 0x11
    3dd0:	82 30       	cpi	r24, 0x02	; 2
    3dd2:	c8 f0       	brcs	.+50     	; 0x3e06 <__mulsf3+0x76>
    3dd4:	94 30       	cpi	r25, 0x04	; 4
    3dd6:	19 f4       	brne	.+6      	; 0x3dde <__mulsf3+0x4e>
    3dd8:	82 30       	cpi	r24, 0x02	; 2
    3dda:	51 f4       	brne	.+20     	; 0x3df0 <__mulsf3+0x60>
    3ddc:	04 c0       	rjmp	.+8      	; 0x3de6 <__mulsf3+0x56>
    3dde:	84 30       	cpi	r24, 0x04	; 4
    3de0:	29 f4       	brne	.+10     	; 0x3dec <__mulsf3+0x5c>
    3de2:	92 30       	cpi	r25, 0x02	; 2
    3de4:	81 f4       	brne	.+32     	; 0x3e06 <__mulsf3+0x76>
    3de6:	83 e0       	ldi	r24, 0x03	; 3
    3de8:	92 e0       	ldi	r25, 0x02	; 2
    3dea:	c6 c0       	rjmp	.+396    	; 0x3f78 <__mulsf3+0x1e8>
    3dec:	92 30       	cpi	r25, 0x02	; 2
    3dee:	49 f4       	brne	.+18     	; 0x3e02 <__mulsf3+0x72>
    3df0:	20 e0       	ldi	r18, 0x00	; 0
    3df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df4:	8a 89       	ldd	r24, Y+18	; 0x12
    3df6:	98 13       	cpse	r25, r24
    3df8:	21 e0       	ldi	r18, 0x01	; 1
    3dfa:	2a 87       	std	Y+10, r18	; 0x0a
    3dfc:	ce 01       	movw	r24, r28
    3dfe:	09 96       	adiw	r24, 0x09	; 9
    3e00:	bb c0       	rjmp	.+374    	; 0x3f78 <__mulsf3+0x1e8>
    3e02:	82 30       	cpi	r24, 0x02	; 2
    3e04:	49 f4       	brne	.+18     	; 0x3e18 <__mulsf3+0x88>
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e0a:	8a 89       	ldd	r24, Y+18	; 0x12
    3e0c:	98 13       	cpse	r25, r24
    3e0e:	21 e0       	ldi	r18, 0x01	; 1
    3e10:	2a 8b       	std	Y+18, r18	; 0x12
    3e12:	ce 01       	movw	r24, r28
    3e14:	41 96       	adiw	r24, 0x11	; 17
    3e16:	b0 c0       	rjmp	.+352    	; 0x3f78 <__mulsf3+0x1e8>
    3e18:	2d 84       	ldd	r2, Y+13	; 0x0d
    3e1a:	3e 84       	ldd	r3, Y+14	; 0x0e
    3e1c:	4f 84       	ldd	r4, Y+15	; 0x0f
    3e1e:	58 88       	ldd	r5, Y+16	; 0x10
    3e20:	6d 88       	ldd	r6, Y+21	; 0x15
    3e22:	7e 88       	ldd	r7, Y+22	; 0x16
    3e24:	8f 88       	ldd	r8, Y+23	; 0x17
    3e26:	98 8c       	ldd	r9, Y+24	; 0x18
    3e28:	ee 24       	eor	r14, r14
    3e2a:	ff 24       	eor	r15, r15
    3e2c:	87 01       	movw	r16, r14
    3e2e:	aa 24       	eor	r10, r10
    3e30:	bb 24       	eor	r11, r11
    3e32:	65 01       	movw	r12, r10
    3e34:	40 e0       	ldi	r20, 0x00	; 0
    3e36:	50 e0       	ldi	r21, 0x00	; 0
    3e38:	60 e0       	ldi	r22, 0x00	; 0
    3e3a:	70 e0       	ldi	r23, 0x00	; 0
    3e3c:	e0 e0       	ldi	r30, 0x00	; 0
    3e3e:	f0 e0       	ldi	r31, 0x00	; 0
    3e40:	c1 01       	movw	r24, r2
    3e42:	81 70       	andi	r24, 0x01	; 1
    3e44:	90 70       	andi	r25, 0x00	; 0
    3e46:	89 2b       	or	r24, r25
    3e48:	e9 f0       	breq	.+58     	; 0x3e84 <__mulsf3+0xf4>
    3e4a:	e6 0c       	add	r14, r6
    3e4c:	f7 1c       	adc	r15, r7
    3e4e:	08 1d       	adc	r16, r8
    3e50:	19 1d       	adc	r17, r9
    3e52:	9a 01       	movw	r18, r20
    3e54:	ab 01       	movw	r20, r22
    3e56:	2a 0d       	add	r18, r10
    3e58:	3b 1d       	adc	r19, r11
    3e5a:	4c 1d       	adc	r20, r12
    3e5c:	5d 1d       	adc	r21, r13
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	a0 e0       	ldi	r26, 0x00	; 0
    3e64:	b0 e0       	ldi	r27, 0x00	; 0
    3e66:	e6 14       	cp	r14, r6
    3e68:	f7 04       	cpc	r15, r7
    3e6a:	08 05       	cpc	r16, r8
    3e6c:	19 05       	cpc	r17, r9
    3e6e:	20 f4       	brcc	.+8      	; 0x3e78 <__mulsf3+0xe8>
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	a0 e0       	ldi	r26, 0x00	; 0
    3e76:	b0 e0       	ldi	r27, 0x00	; 0
    3e78:	ba 01       	movw	r22, r20
    3e7a:	a9 01       	movw	r20, r18
    3e7c:	48 0f       	add	r20, r24
    3e7e:	59 1f       	adc	r21, r25
    3e80:	6a 1f       	adc	r22, r26
    3e82:	7b 1f       	adc	r23, r27
    3e84:	aa 0c       	add	r10, r10
    3e86:	bb 1c       	adc	r11, r11
    3e88:	cc 1c       	adc	r12, r12
    3e8a:	dd 1c       	adc	r13, r13
    3e8c:	97 fe       	sbrs	r9, 7
    3e8e:	08 c0       	rjmp	.+16     	; 0x3ea0 <__mulsf3+0x110>
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	a0 e0       	ldi	r26, 0x00	; 0
    3e96:	b0 e0       	ldi	r27, 0x00	; 0
    3e98:	a8 2a       	or	r10, r24
    3e9a:	b9 2a       	or	r11, r25
    3e9c:	ca 2a       	or	r12, r26
    3e9e:	db 2a       	or	r13, r27
    3ea0:	31 96       	adiw	r30, 0x01	; 1
    3ea2:	e0 32       	cpi	r30, 0x20	; 32
    3ea4:	f1 05       	cpc	r31, r1
    3ea6:	49 f0       	breq	.+18     	; 0x3eba <__mulsf3+0x12a>
    3ea8:	66 0c       	add	r6, r6
    3eaa:	77 1c       	adc	r7, r7
    3eac:	88 1c       	adc	r8, r8
    3eae:	99 1c       	adc	r9, r9
    3eb0:	56 94       	lsr	r5
    3eb2:	47 94       	ror	r4
    3eb4:	37 94       	ror	r3
    3eb6:	27 94       	ror	r2
    3eb8:	c3 cf       	rjmp	.-122    	; 0x3e40 <__mulsf3+0xb0>
    3eba:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ebc:	ea 89       	ldd	r30, Y+18	; 0x12
    3ebe:	2b 89       	ldd	r18, Y+19	; 0x13
    3ec0:	3c 89       	ldd	r19, Y+20	; 0x14
    3ec2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ec4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ec6:	28 0f       	add	r18, r24
    3ec8:	39 1f       	adc	r19, r25
    3eca:	2e 5f       	subi	r18, 0xFE	; 254
    3ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ece:	17 c0       	rjmp	.+46     	; 0x3efe <__mulsf3+0x16e>
    3ed0:	ca 01       	movw	r24, r20
    3ed2:	81 70       	andi	r24, 0x01	; 1
    3ed4:	90 70       	andi	r25, 0x00	; 0
    3ed6:	89 2b       	or	r24, r25
    3ed8:	61 f0       	breq	.+24     	; 0x3ef2 <__mulsf3+0x162>
    3eda:	16 95       	lsr	r17
    3edc:	07 95       	ror	r16
    3ede:	f7 94       	ror	r15
    3ee0:	e7 94       	ror	r14
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	a0 e0       	ldi	r26, 0x00	; 0
    3ee8:	b0 e8       	ldi	r27, 0x80	; 128
    3eea:	e8 2a       	or	r14, r24
    3eec:	f9 2a       	or	r15, r25
    3eee:	0a 2b       	or	r16, r26
    3ef0:	1b 2b       	or	r17, r27
    3ef2:	76 95       	lsr	r23
    3ef4:	67 95       	ror	r22
    3ef6:	57 95       	ror	r21
    3ef8:	47 95       	ror	r20
    3efa:	2f 5f       	subi	r18, 0xFF	; 255
    3efc:	3f 4f       	sbci	r19, 0xFF	; 255
    3efe:	77 fd       	sbrc	r23, 7
    3f00:	e7 cf       	rjmp	.-50     	; 0x3ed0 <__mulsf3+0x140>
    3f02:	0c c0       	rjmp	.+24     	; 0x3f1c <__mulsf3+0x18c>
    3f04:	44 0f       	add	r20, r20
    3f06:	55 1f       	adc	r21, r21
    3f08:	66 1f       	adc	r22, r22
    3f0a:	77 1f       	adc	r23, r23
    3f0c:	17 fd       	sbrc	r17, 7
    3f0e:	41 60       	ori	r20, 0x01	; 1
    3f10:	ee 0c       	add	r14, r14
    3f12:	ff 1c       	adc	r15, r15
    3f14:	00 1f       	adc	r16, r16
    3f16:	11 1f       	adc	r17, r17
    3f18:	21 50       	subi	r18, 0x01	; 1
    3f1a:	30 40       	sbci	r19, 0x00	; 0
    3f1c:	40 30       	cpi	r20, 0x00	; 0
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	59 07       	cpc	r21, r25
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	69 07       	cpc	r22, r25
    3f26:	90 e4       	ldi	r25, 0x40	; 64
    3f28:	79 07       	cpc	r23, r25
    3f2a:	60 f3       	brcs	.-40     	; 0x3f04 <__mulsf3+0x174>
    3f2c:	2b 8f       	std	Y+27, r18	; 0x1b
    3f2e:	3c 8f       	std	Y+28, r19	; 0x1c
    3f30:	db 01       	movw	r26, r22
    3f32:	ca 01       	movw	r24, r20
    3f34:	8f 77       	andi	r24, 0x7F	; 127
    3f36:	90 70       	andi	r25, 0x00	; 0
    3f38:	a0 70       	andi	r26, 0x00	; 0
    3f3a:	b0 70       	andi	r27, 0x00	; 0
    3f3c:	80 34       	cpi	r24, 0x40	; 64
    3f3e:	91 05       	cpc	r25, r1
    3f40:	a1 05       	cpc	r26, r1
    3f42:	b1 05       	cpc	r27, r1
    3f44:	61 f4       	brne	.+24     	; 0x3f5e <__mulsf3+0x1ce>
    3f46:	47 fd       	sbrc	r20, 7
    3f48:	0a c0       	rjmp	.+20     	; 0x3f5e <__mulsf3+0x1ce>
    3f4a:	e1 14       	cp	r14, r1
    3f4c:	f1 04       	cpc	r15, r1
    3f4e:	01 05       	cpc	r16, r1
    3f50:	11 05       	cpc	r17, r1
    3f52:	29 f0       	breq	.+10     	; 0x3f5e <__mulsf3+0x1ce>
    3f54:	40 5c       	subi	r20, 0xC0	; 192
    3f56:	5f 4f       	sbci	r21, 0xFF	; 255
    3f58:	6f 4f       	sbci	r22, 0xFF	; 255
    3f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5c:	40 78       	andi	r20, 0x80	; 128
    3f5e:	1a 8e       	std	Y+26, r1	; 0x1a
    3f60:	fe 17       	cp	r31, r30
    3f62:	11 f0       	breq	.+4      	; 0x3f68 <__mulsf3+0x1d8>
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	8a 8f       	std	Y+26, r24	; 0x1a
    3f68:	4d 8f       	std	Y+29, r20	; 0x1d
    3f6a:	5e 8f       	std	Y+30, r21	; 0x1e
    3f6c:	6f 8f       	std	Y+31, r22	; 0x1f
    3f6e:	78 a3       	std	Y+32, r23	; 0x20
    3f70:	83 e0       	ldi	r24, 0x03	; 3
    3f72:	89 8f       	std	Y+25, r24	; 0x19
    3f74:	ce 01       	movw	r24, r28
    3f76:	49 96       	adiw	r24, 0x19	; 25
    3f78:	0e 94 ff 21 	call	0x43fe	; 0x43fe <__pack_f>
    3f7c:	a0 96       	adiw	r28, 0x20	; 32
    3f7e:	e2 e1       	ldi	r30, 0x12	; 18
    3f80:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__epilogue_restores__>

00003f84 <__divsf3>:
    3f84:	a8 e1       	ldi	r26, 0x18	; 24
    3f86:	b0 e0       	ldi	r27, 0x00	; 0
    3f88:	e8 ec       	ldi	r30, 0xC8	; 200
    3f8a:	ff e1       	ldi	r31, 0x1F	; 31
    3f8c:	0c 94 ad 23 	jmp	0x475a	; 0x475a <__prologue_saves__+0x10>
    3f90:	69 83       	std	Y+1, r22	; 0x01
    3f92:	7a 83       	std	Y+2, r23	; 0x02
    3f94:	8b 83       	std	Y+3, r24	; 0x03
    3f96:	9c 83       	std	Y+4, r25	; 0x04
    3f98:	2d 83       	std	Y+5, r18	; 0x05
    3f9a:	3e 83       	std	Y+6, r19	; 0x06
    3f9c:	4f 83       	std	Y+7, r20	; 0x07
    3f9e:	58 87       	std	Y+8, r21	; 0x08
    3fa0:	b9 e0       	ldi	r27, 0x09	; 9
    3fa2:	eb 2e       	mov	r14, r27
    3fa4:	f1 2c       	mov	r15, r1
    3fa6:	ec 0e       	add	r14, r28
    3fa8:	fd 1e       	adc	r15, r29
    3faa:	ce 01       	movw	r24, r28
    3fac:	01 96       	adiw	r24, 0x01	; 1
    3fae:	b7 01       	movw	r22, r14
    3fb0:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    3fb4:	8e 01       	movw	r16, r28
    3fb6:	0f 5e       	subi	r16, 0xEF	; 239
    3fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fba:	ce 01       	movw	r24, r28
    3fbc:	05 96       	adiw	r24, 0x05	; 5
    3fbe:	b8 01       	movw	r22, r16
    3fc0:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    3fc4:	29 85       	ldd	r18, Y+9	; 0x09
    3fc6:	22 30       	cpi	r18, 0x02	; 2
    3fc8:	08 f4       	brcc	.+2      	; 0x3fcc <__divsf3+0x48>
    3fca:	7e c0       	rjmp	.+252    	; 0x40c8 <__divsf3+0x144>
    3fcc:	39 89       	ldd	r19, Y+17	; 0x11
    3fce:	32 30       	cpi	r19, 0x02	; 2
    3fd0:	10 f4       	brcc	.+4      	; 0x3fd6 <__divsf3+0x52>
    3fd2:	b8 01       	movw	r22, r16
    3fd4:	7c c0       	rjmp	.+248    	; 0x40ce <__divsf3+0x14a>
    3fd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    3fda:	89 27       	eor	r24, r25
    3fdc:	8a 87       	std	Y+10, r24	; 0x0a
    3fde:	24 30       	cpi	r18, 0x04	; 4
    3fe0:	11 f0       	breq	.+4      	; 0x3fe6 <__divsf3+0x62>
    3fe2:	22 30       	cpi	r18, 0x02	; 2
    3fe4:	31 f4       	brne	.+12     	; 0x3ff2 <__divsf3+0x6e>
    3fe6:	23 17       	cp	r18, r19
    3fe8:	09 f0       	breq	.+2      	; 0x3fec <__divsf3+0x68>
    3fea:	6e c0       	rjmp	.+220    	; 0x40c8 <__divsf3+0x144>
    3fec:	63 e0       	ldi	r22, 0x03	; 3
    3fee:	72 e0       	ldi	r23, 0x02	; 2
    3ff0:	6e c0       	rjmp	.+220    	; 0x40ce <__divsf3+0x14a>
    3ff2:	34 30       	cpi	r19, 0x04	; 4
    3ff4:	39 f4       	brne	.+14     	; 0x4004 <__divsf3+0x80>
    3ff6:	1d 86       	std	Y+13, r1	; 0x0d
    3ff8:	1e 86       	std	Y+14, r1	; 0x0e
    3ffa:	1f 86       	std	Y+15, r1	; 0x0f
    3ffc:	18 8a       	std	Y+16, r1	; 0x10
    3ffe:	1c 86       	std	Y+12, r1	; 0x0c
    4000:	1b 86       	std	Y+11, r1	; 0x0b
    4002:	04 c0       	rjmp	.+8      	; 0x400c <__divsf3+0x88>
    4004:	32 30       	cpi	r19, 0x02	; 2
    4006:	21 f4       	brne	.+8      	; 0x4010 <__divsf3+0x8c>
    4008:	84 e0       	ldi	r24, 0x04	; 4
    400a:	89 87       	std	Y+9, r24	; 0x09
    400c:	b7 01       	movw	r22, r14
    400e:	5f c0       	rjmp	.+190    	; 0x40ce <__divsf3+0x14a>
    4010:	2b 85       	ldd	r18, Y+11	; 0x0b
    4012:	3c 85       	ldd	r19, Y+12	; 0x0c
    4014:	8b 89       	ldd	r24, Y+19	; 0x13
    4016:	9c 89       	ldd	r25, Y+20	; 0x14
    4018:	28 1b       	sub	r18, r24
    401a:	39 0b       	sbc	r19, r25
    401c:	3c 87       	std	Y+12, r19	; 0x0c
    401e:	2b 87       	std	Y+11, r18	; 0x0b
    4020:	ed 84       	ldd	r14, Y+13	; 0x0d
    4022:	fe 84       	ldd	r15, Y+14	; 0x0e
    4024:	0f 85       	ldd	r16, Y+15	; 0x0f
    4026:	18 89       	ldd	r17, Y+16	; 0x10
    4028:	ad 88       	ldd	r10, Y+21	; 0x15
    402a:	be 88       	ldd	r11, Y+22	; 0x16
    402c:	cf 88       	ldd	r12, Y+23	; 0x17
    402e:	d8 8c       	ldd	r13, Y+24	; 0x18
    4030:	ea 14       	cp	r14, r10
    4032:	fb 04       	cpc	r15, r11
    4034:	0c 05       	cpc	r16, r12
    4036:	1d 05       	cpc	r17, r13
    4038:	40 f4       	brcc	.+16     	; 0x404a <__divsf3+0xc6>
    403a:	ee 0c       	add	r14, r14
    403c:	ff 1c       	adc	r15, r15
    403e:	00 1f       	adc	r16, r16
    4040:	11 1f       	adc	r17, r17
    4042:	21 50       	subi	r18, 0x01	; 1
    4044:	30 40       	sbci	r19, 0x00	; 0
    4046:	3c 87       	std	Y+12, r19	; 0x0c
    4048:	2b 87       	std	Y+11, r18	; 0x0b
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	40 e0       	ldi	r20, 0x00	; 0
    4050:	50 e0       	ldi	r21, 0x00	; 0
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	a0 e0       	ldi	r26, 0x00	; 0
    4058:	b0 e4       	ldi	r27, 0x40	; 64
    405a:	60 e0       	ldi	r22, 0x00	; 0
    405c:	70 e0       	ldi	r23, 0x00	; 0
    405e:	ea 14       	cp	r14, r10
    4060:	fb 04       	cpc	r15, r11
    4062:	0c 05       	cpc	r16, r12
    4064:	1d 05       	cpc	r17, r13
    4066:	40 f0       	brcs	.+16     	; 0x4078 <__divsf3+0xf4>
    4068:	28 2b       	or	r18, r24
    406a:	39 2b       	or	r19, r25
    406c:	4a 2b       	or	r20, r26
    406e:	5b 2b       	or	r21, r27
    4070:	ea 18       	sub	r14, r10
    4072:	fb 08       	sbc	r15, r11
    4074:	0c 09       	sbc	r16, r12
    4076:	1d 09       	sbc	r17, r13
    4078:	b6 95       	lsr	r27
    407a:	a7 95       	ror	r26
    407c:	97 95       	ror	r25
    407e:	87 95       	ror	r24
    4080:	ee 0c       	add	r14, r14
    4082:	ff 1c       	adc	r15, r15
    4084:	00 1f       	adc	r16, r16
    4086:	11 1f       	adc	r17, r17
    4088:	6f 5f       	subi	r22, 0xFF	; 255
    408a:	7f 4f       	sbci	r23, 0xFF	; 255
    408c:	6f 31       	cpi	r22, 0x1F	; 31
    408e:	71 05       	cpc	r23, r1
    4090:	31 f7       	brne	.-52     	; 0x405e <__divsf3+0xda>
    4092:	da 01       	movw	r26, r20
    4094:	c9 01       	movw	r24, r18
    4096:	8f 77       	andi	r24, 0x7F	; 127
    4098:	90 70       	andi	r25, 0x00	; 0
    409a:	a0 70       	andi	r26, 0x00	; 0
    409c:	b0 70       	andi	r27, 0x00	; 0
    409e:	80 34       	cpi	r24, 0x40	; 64
    40a0:	91 05       	cpc	r25, r1
    40a2:	a1 05       	cpc	r26, r1
    40a4:	b1 05       	cpc	r27, r1
    40a6:	61 f4       	brne	.+24     	; 0x40c0 <__divsf3+0x13c>
    40a8:	27 fd       	sbrc	r18, 7
    40aa:	0a c0       	rjmp	.+20     	; 0x40c0 <__divsf3+0x13c>
    40ac:	e1 14       	cp	r14, r1
    40ae:	f1 04       	cpc	r15, r1
    40b0:	01 05       	cpc	r16, r1
    40b2:	11 05       	cpc	r17, r1
    40b4:	29 f0       	breq	.+10     	; 0x40c0 <__divsf3+0x13c>
    40b6:	20 5c       	subi	r18, 0xC0	; 192
    40b8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ba:	4f 4f       	sbci	r20, 0xFF	; 255
    40bc:	5f 4f       	sbci	r21, 0xFF	; 255
    40be:	20 78       	andi	r18, 0x80	; 128
    40c0:	2d 87       	std	Y+13, r18	; 0x0d
    40c2:	3e 87       	std	Y+14, r19	; 0x0e
    40c4:	4f 87       	std	Y+15, r20	; 0x0f
    40c6:	58 8b       	std	Y+16, r21	; 0x10
    40c8:	be 01       	movw	r22, r28
    40ca:	67 5f       	subi	r22, 0xF7	; 247
    40cc:	7f 4f       	sbci	r23, 0xFF	; 255
    40ce:	cb 01       	movw	r24, r22
    40d0:	0e 94 ff 21 	call	0x43fe	; 0x43fe <__pack_f>
    40d4:	68 96       	adiw	r28, 0x18	; 24
    40d6:	ea e0       	ldi	r30, 0x0A	; 10
    40d8:	0c 94 c9 23 	jmp	0x4792	; 0x4792 <__epilogue_restores__+0x10>

000040dc <__gtsf2>:
    40dc:	a8 e1       	ldi	r26, 0x18	; 24
    40de:	b0 e0       	ldi	r27, 0x00	; 0
    40e0:	e4 e7       	ldi	r30, 0x74	; 116
    40e2:	f0 e2       	ldi	r31, 0x20	; 32
    40e4:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__prologue_saves__+0x18>
    40e8:	69 83       	std	Y+1, r22	; 0x01
    40ea:	7a 83       	std	Y+2, r23	; 0x02
    40ec:	8b 83       	std	Y+3, r24	; 0x03
    40ee:	9c 83       	std	Y+4, r25	; 0x04
    40f0:	2d 83       	std	Y+5, r18	; 0x05
    40f2:	3e 83       	std	Y+6, r19	; 0x06
    40f4:	4f 83       	std	Y+7, r20	; 0x07
    40f6:	58 87       	std	Y+8, r21	; 0x08
    40f8:	89 e0       	ldi	r24, 0x09	; 9
    40fa:	e8 2e       	mov	r14, r24
    40fc:	f1 2c       	mov	r15, r1
    40fe:	ec 0e       	add	r14, r28
    4100:	fd 1e       	adc	r15, r29
    4102:	ce 01       	movw	r24, r28
    4104:	01 96       	adiw	r24, 0x01	; 1
    4106:	b7 01       	movw	r22, r14
    4108:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    410c:	8e 01       	movw	r16, r28
    410e:	0f 5e       	subi	r16, 0xEF	; 239
    4110:	1f 4f       	sbci	r17, 0xFF	; 255
    4112:	ce 01       	movw	r24, r28
    4114:	05 96       	adiw	r24, 0x05	; 5
    4116:	b8 01       	movw	r22, r16
    4118:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    411c:	89 85       	ldd	r24, Y+9	; 0x09
    411e:	82 30       	cpi	r24, 0x02	; 2
    4120:	40 f0       	brcs	.+16     	; 0x4132 <__gtsf2+0x56>
    4122:	89 89       	ldd	r24, Y+17	; 0x11
    4124:	82 30       	cpi	r24, 0x02	; 2
    4126:	28 f0       	brcs	.+10     	; 0x4132 <__gtsf2+0x56>
    4128:	c7 01       	movw	r24, r14
    412a:	b8 01       	movw	r22, r16
    412c:	0e 94 4c 23 	call	0x4698	; 0x4698 <__fpcmp_parts_f>
    4130:	01 c0       	rjmp	.+2      	; 0x4134 <__gtsf2+0x58>
    4132:	8f ef       	ldi	r24, 0xFF	; 255
    4134:	68 96       	adiw	r28, 0x18	; 24
    4136:	e6 e0       	ldi	r30, 0x06	; 6
    4138:	0c 94 cd 23 	jmp	0x479a	; 0x479a <__epilogue_restores__+0x18>

0000413c <__gesf2>:
    413c:	a8 e1       	ldi	r26, 0x18	; 24
    413e:	b0 e0       	ldi	r27, 0x00	; 0
    4140:	e4 ea       	ldi	r30, 0xA4	; 164
    4142:	f0 e2       	ldi	r31, 0x20	; 32
    4144:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__prologue_saves__+0x18>
    4148:	69 83       	std	Y+1, r22	; 0x01
    414a:	7a 83       	std	Y+2, r23	; 0x02
    414c:	8b 83       	std	Y+3, r24	; 0x03
    414e:	9c 83       	std	Y+4, r25	; 0x04
    4150:	2d 83       	std	Y+5, r18	; 0x05
    4152:	3e 83       	std	Y+6, r19	; 0x06
    4154:	4f 83       	std	Y+7, r20	; 0x07
    4156:	58 87       	std	Y+8, r21	; 0x08
    4158:	89 e0       	ldi	r24, 0x09	; 9
    415a:	e8 2e       	mov	r14, r24
    415c:	f1 2c       	mov	r15, r1
    415e:	ec 0e       	add	r14, r28
    4160:	fd 1e       	adc	r15, r29
    4162:	ce 01       	movw	r24, r28
    4164:	01 96       	adiw	r24, 0x01	; 1
    4166:	b7 01       	movw	r22, r14
    4168:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    416c:	8e 01       	movw	r16, r28
    416e:	0f 5e       	subi	r16, 0xEF	; 239
    4170:	1f 4f       	sbci	r17, 0xFF	; 255
    4172:	ce 01       	movw	r24, r28
    4174:	05 96       	adiw	r24, 0x05	; 5
    4176:	b8 01       	movw	r22, r16
    4178:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    417c:	89 85       	ldd	r24, Y+9	; 0x09
    417e:	82 30       	cpi	r24, 0x02	; 2
    4180:	40 f0       	brcs	.+16     	; 0x4192 <__gesf2+0x56>
    4182:	89 89       	ldd	r24, Y+17	; 0x11
    4184:	82 30       	cpi	r24, 0x02	; 2
    4186:	28 f0       	brcs	.+10     	; 0x4192 <__gesf2+0x56>
    4188:	c7 01       	movw	r24, r14
    418a:	b8 01       	movw	r22, r16
    418c:	0e 94 4c 23 	call	0x4698	; 0x4698 <__fpcmp_parts_f>
    4190:	01 c0       	rjmp	.+2      	; 0x4194 <__gesf2+0x58>
    4192:	8f ef       	ldi	r24, 0xFF	; 255
    4194:	68 96       	adiw	r28, 0x18	; 24
    4196:	e6 e0       	ldi	r30, 0x06	; 6
    4198:	0c 94 cd 23 	jmp	0x479a	; 0x479a <__epilogue_restores__+0x18>

0000419c <__ltsf2>:
    419c:	a8 e1       	ldi	r26, 0x18	; 24
    419e:	b0 e0       	ldi	r27, 0x00	; 0
    41a0:	e4 ed       	ldi	r30, 0xD4	; 212
    41a2:	f0 e2       	ldi	r31, 0x20	; 32
    41a4:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__prologue_saves__+0x18>
    41a8:	69 83       	std	Y+1, r22	; 0x01
    41aa:	7a 83       	std	Y+2, r23	; 0x02
    41ac:	8b 83       	std	Y+3, r24	; 0x03
    41ae:	9c 83       	std	Y+4, r25	; 0x04
    41b0:	2d 83       	std	Y+5, r18	; 0x05
    41b2:	3e 83       	std	Y+6, r19	; 0x06
    41b4:	4f 83       	std	Y+7, r20	; 0x07
    41b6:	58 87       	std	Y+8, r21	; 0x08
    41b8:	89 e0       	ldi	r24, 0x09	; 9
    41ba:	e8 2e       	mov	r14, r24
    41bc:	f1 2c       	mov	r15, r1
    41be:	ec 0e       	add	r14, r28
    41c0:	fd 1e       	adc	r15, r29
    41c2:	ce 01       	movw	r24, r28
    41c4:	01 96       	adiw	r24, 0x01	; 1
    41c6:	b7 01       	movw	r22, r14
    41c8:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    41cc:	8e 01       	movw	r16, r28
    41ce:	0f 5e       	subi	r16, 0xEF	; 239
    41d0:	1f 4f       	sbci	r17, 0xFF	; 255
    41d2:	ce 01       	movw	r24, r28
    41d4:	05 96       	adiw	r24, 0x05	; 5
    41d6:	b8 01       	movw	r22, r16
    41d8:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    41dc:	89 85       	ldd	r24, Y+9	; 0x09
    41de:	82 30       	cpi	r24, 0x02	; 2
    41e0:	40 f0       	brcs	.+16     	; 0x41f2 <__ltsf2+0x56>
    41e2:	89 89       	ldd	r24, Y+17	; 0x11
    41e4:	82 30       	cpi	r24, 0x02	; 2
    41e6:	28 f0       	brcs	.+10     	; 0x41f2 <__ltsf2+0x56>
    41e8:	c7 01       	movw	r24, r14
    41ea:	b8 01       	movw	r22, r16
    41ec:	0e 94 4c 23 	call	0x4698	; 0x4698 <__fpcmp_parts_f>
    41f0:	01 c0       	rjmp	.+2      	; 0x41f4 <__ltsf2+0x58>
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	68 96       	adiw	r28, 0x18	; 24
    41f6:	e6 e0       	ldi	r30, 0x06	; 6
    41f8:	0c 94 cd 23 	jmp	0x479a	; 0x479a <__epilogue_restores__+0x18>

000041fc <__floatsisf>:
    41fc:	a8 e0       	ldi	r26, 0x08	; 8
    41fe:	b0 e0       	ldi	r27, 0x00	; 0
    4200:	e4 e0       	ldi	r30, 0x04	; 4
    4202:	f1 e2       	ldi	r31, 0x21	; 33
    4204:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__prologue_saves__+0x12>
    4208:	9b 01       	movw	r18, r22
    420a:	ac 01       	movw	r20, r24
    420c:	83 e0       	ldi	r24, 0x03	; 3
    420e:	89 83       	std	Y+1, r24	; 0x01
    4210:	da 01       	movw	r26, r20
    4212:	c9 01       	movw	r24, r18
    4214:	88 27       	eor	r24, r24
    4216:	b7 fd       	sbrc	r27, 7
    4218:	83 95       	inc	r24
    421a:	99 27       	eor	r25, r25
    421c:	aa 27       	eor	r26, r26
    421e:	bb 27       	eor	r27, r27
    4220:	b8 2e       	mov	r11, r24
    4222:	21 15       	cp	r18, r1
    4224:	31 05       	cpc	r19, r1
    4226:	41 05       	cpc	r20, r1
    4228:	51 05       	cpc	r21, r1
    422a:	19 f4       	brne	.+6      	; 0x4232 <__floatsisf+0x36>
    422c:	82 e0       	ldi	r24, 0x02	; 2
    422e:	89 83       	std	Y+1, r24	; 0x01
    4230:	3a c0       	rjmp	.+116    	; 0x42a6 <__floatsisf+0xaa>
    4232:	88 23       	and	r24, r24
    4234:	a9 f0       	breq	.+42     	; 0x4260 <__floatsisf+0x64>
    4236:	20 30       	cpi	r18, 0x00	; 0
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	38 07       	cpc	r19, r24
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	48 07       	cpc	r20, r24
    4240:	80 e8       	ldi	r24, 0x80	; 128
    4242:	58 07       	cpc	r21, r24
    4244:	29 f4       	brne	.+10     	; 0x4250 <__floatsisf+0x54>
    4246:	60 e0       	ldi	r22, 0x00	; 0
    4248:	70 e0       	ldi	r23, 0x00	; 0
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	9f ec       	ldi	r25, 0xCF	; 207
    424e:	30 c0       	rjmp	.+96     	; 0x42b0 <__floatsisf+0xb4>
    4250:	ee 24       	eor	r14, r14
    4252:	ff 24       	eor	r15, r15
    4254:	87 01       	movw	r16, r14
    4256:	e2 1a       	sub	r14, r18
    4258:	f3 0a       	sbc	r15, r19
    425a:	04 0b       	sbc	r16, r20
    425c:	15 0b       	sbc	r17, r21
    425e:	02 c0       	rjmp	.+4      	; 0x4264 <__floatsisf+0x68>
    4260:	79 01       	movw	r14, r18
    4262:	8a 01       	movw	r16, r20
    4264:	8e e1       	ldi	r24, 0x1E	; 30
    4266:	c8 2e       	mov	r12, r24
    4268:	d1 2c       	mov	r13, r1
    426a:	dc 82       	std	Y+4, r13	; 0x04
    426c:	cb 82       	std	Y+3, r12	; 0x03
    426e:	ed 82       	std	Y+5, r14	; 0x05
    4270:	fe 82       	std	Y+6, r15	; 0x06
    4272:	0f 83       	std	Y+7, r16	; 0x07
    4274:	18 87       	std	Y+8, r17	; 0x08
    4276:	c8 01       	movw	r24, r16
    4278:	b7 01       	movw	r22, r14
    427a:	0e 94 b0 21 	call	0x4360	; 0x4360 <__clzsi2>
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	18 16       	cp	r1, r24
    4282:	19 06       	cpc	r1, r25
    4284:	84 f4       	brge	.+32     	; 0x42a6 <__floatsisf+0xaa>
    4286:	08 2e       	mov	r0, r24
    4288:	04 c0       	rjmp	.+8      	; 0x4292 <__floatsisf+0x96>
    428a:	ee 0c       	add	r14, r14
    428c:	ff 1c       	adc	r15, r15
    428e:	00 1f       	adc	r16, r16
    4290:	11 1f       	adc	r17, r17
    4292:	0a 94       	dec	r0
    4294:	d2 f7       	brpl	.-12     	; 0x428a <__floatsisf+0x8e>
    4296:	ed 82       	std	Y+5, r14	; 0x05
    4298:	fe 82       	std	Y+6, r15	; 0x06
    429a:	0f 83       	std	Y+7, r16	; 0x07
    429c:	18 87       	std	Y+8, r17	; 0x08
    429e:	c8 1a       	sub	r12, r24
    42a0:	d9 0a       	sbc	r13, r25
    42a2:	dc 82       	std	Y+4, r13	; 0x04
    42a4:	cb 82       	std	Y+3, r12	; 0x03
    42a6:	ba 82       	std	Y+2, r11	; 0x02
    42a8:	ce 01       	movw	r24, r28
    42aa:	01 96       	adiw	r24, 0x01	; 1
    42ac:	0e 94 ff 21 	call	0x43fe	; 0x43fe <__pack_f>
    42b0:	28 96       	adiw	r28, 0x08	; 8
    42b2:	e9 e0       	ldi	r30, 0x09	; 9
    42b4:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <__epilogue_restores__+0x12>

000042b8 <__fixsfsi>:
    42b8:	ac e0       	ldi	r26, 0x0C	; 12
    42ba:	b0 e0       	ldi	r27, 0x00	; 0
    42bc:	e2 e6       	ldi	r30, 0x62	; 98
    42be:	f1 e2       	ldi	r31, 0x21	; 33
    42c0:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__prologue_saves__+0x20>
    42c4:	69 83       	std	Y+1, r22	; 0x01
    42c6:	7a 83       	std	Y+2, r23	; 0x02
    42c8:	8b 83       	std	Y+3, r24	; 0x03
    42ca:	9c 83       	std	Y+4, r25	; 0x04
    42cc:	ce 01       	movw	r24, r28
    42ce:	01 96       	adiw	r24, 0x01	; 1
    42d0:	be 01       	movw	r22, r28
    42d2:	6b 5f       	subi	r22, 0xFB	; 251
    42d4:	7f 4f       	sbci	r23, 0xFF	; 255
    42d6:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__unpack_f>
    42da:	8d 81       	ldd	r24, Y+5	; 0x05
    42dc:	82 30       	cpi	r24, 0x02	; 2
    42de:	61 f1       	breq	.+88     	; 0x4338 <__fixsfsi+0x80>
    42e0:	82 30       	cpi	r24, 0x02	; 2
    42e2:	50 f1       	brcs	.+84     	; 0x4338 <__fixsfsi+0x80>
    42e4:	84 30       	cpi	r24, 0x04	; 4
    42e6:	21 f4       	brne	.+8      	; 0x42f0 <__fixsfsi+0x38>
    42e8:	8e 81       	ldd	r24, Y+6	; 0x06
    42ea:	88 23       	and	r24, r24
    42ec:	51 f1       	breq	.+84     	; 0x4342 <__fixsfsi+0x8a>
    42ee:	2e c0       	rjmp	.+92     	; 0x434c <__fixsfsi+0x94>
    42f0:	2f 81       	ldd	r18, Y+7	; 0x07
    42f2:	38 85       	ldd	r19, Y+8	; 0x08
    42f4:	37 fd       	sbrc	r19, 7
    42f6:	20 c0       	rjmp	.+64     	; 0x4338 <__fixsfsi+0x80>
    42f8:	6e 81       	ldd	r22, Y+6	; 0x06
    42fa:	2f 31       	cpi	r18, 0x1F	; 31
    42fc:	31 05       	cpc	r19, r1
    42fe:	1c f0       	brlt	.+6      	; 0x4306 <__fixsfsi+0x4e>
    4300:	66 23       	and	r22, r22
    4302:	f9 f0       	breq	.+62     	; 0x4342 <__fixsfsi+0x8a>
    4304:	23 c0       	rjmp	.+70     	; 0x434c <__fixsfsi+0x94>
    4306:	8e e1       	ldi	r24, 0x1E	; 30
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	82 1b       	sub	r24, r18
    430c:	93 0b       	sbc	r25, r19
    430e:	29 85       	ldd	r18, Y+9	; 0x09
    4310:	3a 85       	ldd	r19, Y+10	; 0x0a
    4312:	4b 85       	ldd	r20, Y+11	; 0x0b
    4314:	5c 85       	ldd	r21, Y+12	; 0x0c
    4316:	04 c0       	rjmp	.+8      	; 0x4320 <__fixsfsi+0x68>
    4318:	56 95       	lsr	r21
    431a:	47 95       	ror	r20
    431c:	37 95       	ror	r19
    431e:	27 95       	ror	r18
    4320:	8a 95       	dec	r24
    4322:	d2 f7       	brpl	.-12     	; 0x4318 <__fixsfsi+0x60>
    4324:	66 23       	and	r22, r22
    4326:	b1 f0       	breq	.+44     	; 0x4354 <__fixsfsi+0x9c>
    4328:	50 95       	com	r21
    432a:	40 95       	com	r20
    432c:	30 95       	com	r19
    432e:	21 95       	neg	r18
    4330:	3f 4f       	sbci	r19, 0xFF	; 255
    4332:	4f 4f       	sbci	r20, 0xFF	; 255
    4334:	5f 4f       	sbci	r21, 0xFF	; 255
    4336:	0e c0       	rjmp	.+28     	; 0x4354 <__fixsfsi+0x9c>
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	40 e0       	ldi	r20, 0x00	; 0
    433e:	50 e0       	ldi	r21, 0x00	; 0
    4340:	09 c0       	rjmp	.+18     	; 0x4354 <__fixsfsi+0x9c>
    4342:	2f ef       	ldi	r18, 0xFF	; 255
    4344:	3f ef       	ldi	r19, 0xFF	; 255
    4346:	4f ef       	ldi	r20, 0xFF	; 255
    4348:	5f e7       	ldi	r21, 0x7F	; 127
    434a:	04 c0       	rjmp	.+8      	; 0x4354 <__fixsfsi+0x9c>
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	40 e0       	ldi	r20, 0x00	; 0
    4352:	50 e8       	ldi	r21, 0x80	; 128
    4354:	b9 01       	movw	r22, r18
    4356:	ca 01       	movw	r24, r20
    4358:	2c 96       	adiw	r28, 0x0c	; 12
    435a:	e2 e0       	ldi	r30, 0x02	; 2
    435c:	0c 94 d1 23 	jmp	0x47a2	; 0x47a2 <__epilogue_restores__+0x20>

00004360 <__clzsi2>:
    4360:	ef 92       	push	r14
    4362:	ff 92       	push	r15
    4364:	0f 93       	push	r16
    4366:	1f 93       	push	r17
    4368:	7b 01       	movw	r14, r22
    436a:	8c 01       	movw	r16, r24
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	e8 16       	cp	r14, r24
    4370:	80 e0       	ldi	r24, 0x00	; 0
    4372:	f8 06       	cpc	r15, r24
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	08 07       	cpc	r16, r24
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	18 07       	cpc	r17, r24
    437c:	88 f4       	brcc	.+34     	; 0x43a0 <__clzsi2+0x40>
    437e:	8f ef       	ldi	r24, 0xFF	; 255
    4380:	e8 16       	cp	r14, r24
    4382:	f1 04       	cpc	r15, r1
    4384:	01 05       	cpc	r16, r1
    4386:	11 05       	cpc	r17, r1
    4388:	31 f0       	breq	.+12     	; 0x4396 <__clzsi2+0x36>
    438a:	28 f0       	brcs	.+10     	; 0x4396 <__clzsi2+0x36>
    438c:	88 e0       	ldi	r24, 0x08	; 8
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	a0 e0       	ldi	r26, 0x00	; 0
    4392:	b0 e0       	ldi	r27, 0x00	; 0
    4394:	17 c0       	rjmp	.+46     	; 0x43c4 <__clzsi2+0x64>
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	a0 e0       	ldi	r26, 0x00	; 0
    439c:	b0 e0       	ldi	r27, 0x00	; 0
    439e:	12 c0       	rjmp	.+36     	; 0x43c4 <__clzsi2+0x64>
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	e8 16       	cp	r14, r24
    43a4:	80 e0       	ldi	r24, 0x00	; 0
    43a6:	f8 06       	cpc	r15, r24
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	08 07       	cpc	r16, r24
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	18 07       	cpc	r17, r24
    43b0:	28 f0       	brcs	.+10     	; 0x43bc <__clzsi2+0x5c>
    43b2:	88 e1       	ldi	r24, 0x18	; 24
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	a0 e0       	ldi	r26, 0x00	; 0
    43b8:	b0 e0       	ldi	r27, 0x00	; 0
    43ba:	04 c0       	rjmp	.+8      	; 0x43c4 <__clzsi2+0x64>
    43bc:	80 e1       	ldi	r24, 0x10	; 16
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	a0 e0       	ldi	r26, 0x00	; 0
    43c2:	b0 e0       	ldi	r27, 0x00	; 0
    43c4:	20 e2       	ldi	r18, 0x20	; 32
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	40 e0       	ldi	r20, 0x00	; 0
    43ca:	50 e0       	ldi	r21, 0x00	; 0
    43cc:	28 1b       	sub	r18, r24
    43ce:	39 0b       	sbc	r19, r25
    43d0:	4a 0b       	sbc	r20, r26
    43d2:	5b 0b       	sbc	r21, r27
    43d4:	04 c0       	rjmp	.+8      	; 0x43de <__clzsi2+0x7e>
    43d6:	16 95       	lsr	r17
    43d8:	07 95       	ror	r16
    43da:	f7 94       	ror	r15
    43dc:	e7 94       	ror	r14
    43de:	8a 95       	dec	r24
    43e0:	d2 f7       	brpl	.-12     	; 0x43d6 <__clzsi2+0x76>
    43e2:	f7 01       	movw	r30, r14
    43e4:	e5 5f       	subi	r30, 0xF5	; 245
    43e6:	fd 4f       	sbci	r31, 0xFD	; 253
    43e8:	80 81       	ld	r24, Z
    43ea:	28 1b       	sub	r18, r24
    43ec:	31 09       	sbc	r19, r1
    43ee:	41 09       	sbc	r20, r1
    43f0:	51 09       	sbc	r21, r1
    43f2:	c9 01       	movw	r24, r18
    43f4:	1f 91       	pop	r17
    43f6:	0f 91       	pop	r16
    43f8:	ff 90       	pop	r15
    43fa:	ef 90       	pop	r14
    43fc:	08 95       	ret

000043fe <__pack_f>:
    43fe:	df 92       	push	r13
    4400:	ef 92       	push	r14
    4402:	ff 92       	push	r15
    4404:	0f 93       	push	r16
    4406:	1f 93       	push	r17
    4408:	fc 01       	movw	r30, r24
    440a:	e4 80       	ldd	r14, Z+4	; 0x04
    440c:	f5 80       	ldd	r15, Z+5	; 0x05
    440e:	06 81       	ldd	r16, Z+6	; 0x06
    4410:	17 81       	ldd	r17, Z+7	; 0x07
    4412:	d1 80       	ldd	r13, Z+1	; 0x01
    4414:	80 81       	ld	r24, Z
    4416:	82 30       	cpi	r24, 0x02	; 2
    4418:	48 f4       	brcc	.+18     	; 0x442c <__pack_f+0x2e>
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	a0 e1       	ldi	r26, 0x10	; 16
    4420:	b0 e0       	ldi	r27, 0x00	; 0
    4422:	e8 2a       	or	r14, r24
    4424:	f9 2a       	or	r15, r25
    4426:	0a 2b       	or	r16, r26
    4428:	1b 2b       	or	r17, r27
    442a:	a5 c0       	rjmp	.+330    	; 0x4576 <__pack_f+0x178>
    442c:	84 30       	cpi	r24, 0x04	; 4
    442e:	09 f4       	brne	.+2      	; 0x4432 <__pack_f+0x34>
    4430:	9f c0       	rjmp	.+318    	; 0x4570 <__pack_f+0x172>
    4432:	82 30       	cpi	r24, 0x02	; 2
    4434:	21 f4       	brne	.+8      	; 0x443e <__pack_f+0x40>
    4436:	ee 24       	eor	r14, r14
    4438:	ff 24       	eor	r15, r15
    443a:	87 01       	movw	r16, r14
    443c:	05 c0       	rjmp	.+10     	; 0x4448 <__pack_f+0x4a>
    443e:	e1 14       	cp	r14, r1
    4440:	f1 04       	cpc	r15, r1
    4442:	01 05       	cpc	r16, r1
    4444:	11 05       	cpc	r17, r1
    4446:	19 f4       	brne	.+6      	; 0x444e <__pack_f+0x50>
    4448:	e0 e0       	ldi	r30, 0x00	; 0
    444a:	f0 e0       	ldi	r31, 0x00	; 0
    444c:	96 c0       	rjmp	.+300    	; 0x457a <__pack_f+0x17c>
    444e:	62 81       	ldd	r22, Z+2	; 0x02
    4450:	73 81       	ldd	r23, Z+3	; 0x03
    4452:	9f ef       	ldi	r25, 0xFF	; 255
    4454:	62 38       	cpi	r22, 0x82	; 130
    4456:	79 07       	cpc	r23, r25
    4458:	0c f0       	brlt	.+2      	; 0x445c <__pack_f+0x5e>
    445a:	5b c0       	rjmp	.+182    	; 0x4512 <__pack_f+0x114>
    445c:	22 e8       	ldi	r18, 0x82	; 130
    445e:	3f ef       	ldi	r19, 0xFF	; 255
    4460:	26 1b       	sub	r18, r22
    4462:	37 0b       	sbc	r19, r23
    4464:	2a 31       	cpi	r18, 0x1A	; 26
    4466:	31 05       	cpc	r19, r1
    4468:	2c f0       	brlt	.+10     	; 0x4474 <__pack_f+0x76>
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e0       	ldi	r20, 0x00	; 0
    4470:	50 e0       	ldi	r21, 0x00	; 0
    4472:	2a c0       	rjmp	.+84     	; 0x44c8 <__pack_f+0xca>
    4474:	b8 01       	movw	r22, r16
    4476:	a7 01       	movw	r20, r14
    4478:	02 2e       	mov	r0, r18
    447a:	04 c0       	rjmp	.+8      	; 0x4484 <__pack_f+0x86>
    447c:	76 95       	lsr	r23
    447e:	67 95       	ror	r22
    4480:	57 95       	ror	r21
    4482:	47 95       	ror	r20
    4484:	0a 94       	dec	r0
    4486:	d2 f7       	brpl	.-12     	; 0x447c <__pack_f+0x7e>
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	a0 e0       	ldi	r26, 0x00	; 0
    448e:	b0 e0       	ldi	r27, 0x00	; 0
    4490:	04 c0       	rjmp	.+8      	; 0x449a <__pack_f+0x9c>
    4492:	88 0f       	add	r24, r24
    4494:	99 1f       	adc	r25, r25
    4496:	aa 1f       	adc	r26, r26
    4498:	bb 1f       	adc	r27, r27
    449a:	2a 95       	dec	r18
    449c:	d2 f7       	brpl	.-12     	; 0x4492 <__pack_f+0x94>
    449e:	01 97       	sbiw	r24, 0x01	; 1
    44a0:	a1 09       	sbc	r26, r1
    44a2:	b1 09       	sbc	r27, r1
    44a4:	8e 21       	and	r24, r14
    44a6:	9f 21       	and	r25, r15
    44a8:	a0 23       	and	r26, r16
    44aa:	b1 23       	and	r27, r17
    44ac:	00 97       	sbiw	r24, 0x00	; 0
    44ae:	a1 05       	cpc	r26, r1
    44b0:	b1 05       	cpc	r27, r1
    44b2:	21 f0       	breq	.+8      	; 0x44bc <__pack_f+0xbe>
    44b4:	81 e0       	ldi	r24, 0x01	; 1
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	a0 e0       	ldi	r26, 0x00	; 0
    44ba:	b0 e0       	ldi	r27, 0x00	; 0
    44bc:	9a 01       	movw	r18, r20
    44be:	ab 01       	movw	r20, r22
    44c0:	28 2b       	or	r18, r24
    44c2:	39 2b       	or	r19, r25
    44c4:	4a 2b       	or	r20, r26
    44c6:	5b 2b       	or	r21, r27
    44c8:	da 01       	movw	r26, r20
    44ca:	c9 01       	movw	r24, r18
    44cc:	8f 77       	andi	r24, 0x7F	; 127
    44ce:	90 70       	andi	r25, 0x00	; 0
    44d0:	a0 70       	andi	r26, 0x00	; 0
    44d2:	b0 70       	andi	r27, 0x00	; 0
    44d4:	80 34       	cpi	r24, 0x40	; 64
    44d6:	91 05       	cpc	r25, r1
    44d8:	a1 05       	cpc	r26, r1
    44da:	b1 05       	cpc	r27, r1
    44dc:	39 f4       	brne	.+14     	; 0x44ec <__pack_f+0xee>
    44de:	27 ff       	sbrs	r18, 7
    44e0:	09 c0       	rjmp	.+18     	; 0x44f4 <__pack_f+0xf6>
    44e2:	20 5c       	subi	r18, 0xC0	; 192
    44e4:	3f 4f       	sbci	r19, 0xFF	; 255
    44e6:	4f 4f       	sbci	r20, 0xFF	; 255
    44e8:	5f 4f       	sbci	r21, 0xFF	; 255
    44ea:	04 c0       	rjmp	.+8      	; 0x44f4 <__pack_f+0xf6>
    44ec:	21 5c       	subi	r18, 0xC1	; 193
    44ee:	3f 4f       	sbci	r19, 0xFF	; 255
    44f0:	4f 4f       	sbci	r20, 0xFF	; 255
    44f2:	5f 4f       	sbci	r21, 0xFF	; 255
    44f4:	e0 e0       	ldi	r30, 0x00	; 0
    44f6:	f0 e0       	ldi	r31, 0x00	; 0
    44f8:	20 30       	cpi	r18, 0x00	; 0
    44fa:	a0 e0       	ldi	r26, 0x00	; 0
    44fc:	3a 07       	cpc	r19, r26
    44fe:	a0 e0       	ldi	r26, 0x00	; 0
    4500:	4a 07       	cpc	r20, r26
    4502:	a0 e4       	ldi	r26, 0x40	; 64
    4504:	5a 07       	cpc	r21, r26
    4506:	10 f0       	brcs	.+4      	; 0x450c <__pack_f+0x10e>
    4508:	e1 e0       	ldi	r30, 0x01	; 1
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	79 01       	movw	r14, r18
    450e:	8a 01       	movw	r16, r20
    4510:	27 c0       	rjmp	.+78     	; 0x4560 <__pack_f+0x162>
    4512:	60 38       	cpi	r22, 0x80	; 128
    4514:	71 05       	cpc	r23, r1
    4516:	64 f5       	brge	.+88     	; 0x4570 <__pack_f+0x172>
    4518:	fb 01       	movw	r30, r22
    451a:	e1 58       	subi	r30, 0x81	; 129
    451c:	ff 4f       	sbci	r31, 0xFF	; 255
    451e:	d8 01       	movw	r26, r16
    4520:	c7 01       	movw	r24, r14
    4522:	8f 77       	andi	r24, 0x7F	; 127
    4524:	90 70       	andi	r25, 0x00	; 0
    4526:	a0 70       	andi	r26, 0x00	; 0
    4528:	b0 70       	andi	r27, 0x00	; 0
    452a:	80 34       	cpi	r24, 0x40	; 64
    452c:	91 05       	cpc	r25, r1
    452e:	a1 05       	cpc	r26, r1
    4530:	b1 05       	cpc	r27, r1
    4532:	39 f4       	brne	.+14     	; 0x4542 <__pack_f+0x144>
    4534:	e7 fe       	sbrs	r14, 7
    4536:	0d c0       	rjmp	.+26     	; 0x4552 <__pack_f+0x154>
    4538:	80 e4       	ldi	r24, 0x40	; 64
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	a0 e0       	ldi	r26, 0x00	; 0
    453e:	b0 e0       	ldi	r27, 0x00	; 0
    4540:	04 c0       	rjmp	.+8      	; 0x454a <__pack_f+0x14c>
    4542:	8f e3       	ldi	r24, 0x3F	; 63
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	a0 e0       	ldi	r26, 0x00	; 0
    4548:	b0 e0       	ldi	r27, 0x00	; 0
    454a:	e8 0e       	add	r14, r24
    454c:	f9 1e       	adc	r15, r25
    454e:	0a 1f       	adc	r16, r26
    4550:	1b 1f       	adc	r17, r27
    4552:	17 ff       	sbrs	r17, 7
    4554:	05 c0       	rjmp	.+10     	; 0x4560 <__pack_f+0x162>
    4556:	16 95       	lsr	r17
    4558:	07 95       	ror	r16
    455a:	f7 94       	ror	r15
    455c:	e7 94       	ror	r14
    455e:	31 96       	adiw	r30, 0x01	; 1
    4560:	87 e0       	ldi	r24, 0x07	; 7
    4562:	16 95       	lsr	r17
    4564:	07 95       	ror	r16
    4566:	f7 94       	ror	r15
    4568:	e7 94       	ror	r14
    456a:	8a 95       	dec	r24
    456c:	d1 f7       	brne	.-12     	; 0x4562 <__pack_f+0x164>
    456e:	05 c0       	rjmp	.+10     	; 0x457a <__pack_f+0x17c>
    4570:	ee 24       	eor	r14, r14
    4572:	ff 24       	eor	r15, r15
    4574:	87 01       	movw	r16, r14
    4576:	ef ef       	ldi	r30, 0xFF	; 255
    4578:	f0 e0       	ldi	r31, 0x00	; 0
    457a:	6e 2f       	mov	r22, r30
    457c:	67 95       	ror	r22
    457e:	66 27       	eor	r22, r22
    4580:	67 95       	ror	r22
    4582:	90 2f       	mov	r25, r16
    4584:	9f 77       	andi	r25, 0x7F	; 127
    4586:	d7 94       	ror	r13
    4588:	dd 24       	eor	r13, r13
    458a:	d7 94       	ror	r13
    458c:	8e 2f       	mov	r24, r30
    458e:	86 95       	lsr	r24
    4590:	49 2f       	mov	r20, r25
    4592:	46 2b       	or	r20, r22
    4594:	58 2f       	mov	r21, r24
    4596:	5d 29       	or	r21, r13
    4598:	b7 01       	movw	r22, r14
    459a:	ca 01       	movw	r24, r20
    459c:	1f 91       	pop	r17
    459e:	0f 91       	pop	r16
    45a0:	ff 90       	pop	r15
    45a2:	ef 90       	pop	r14
    45a4:	df 90       	pop	r13
    45a6:	08 95       	ret

000045a8 <__unpack_f>:
    45a8:	fc 01       	movw	r30, r24
    45aa:	db 01       	movw	r26, r22
    45ac:	40 81       	ld	r20, Z
    45ae:	51 81       	ldd	r21, Z+1	; 0x01
    45b0:	22 81       	ldd	r18, Z+2	; 0x02
    45b2:	62 2f       	mov	r22, r18
    45b4:	6f 77       	andi	r22, 0x7F	; 127
    45b6:	70 e0       	ldi	r23, 0x00	; 0
    45b8:	22 1f       	adc	r18, r18
    45ba:	22 27       	eor	r18, r18
    45bc:	22 1f       	adc	r18, r18
    45be:	93 81       	ldd	r25, Z+3	; 0x03
    45c0:	89 2f       	mov	r24, r25
    45c2:	88 0f       	add	r24, r24
    45c4:	82 2b       	or	r24, r18
    45c6:	28 2f       	mov	r18, r24
    45c8:	30 e0       	ldi	r19, 0x00	; 0
    45ca:	99 1f       	adc	r25, r25
    45cc:	99 27       	eor	r25, r25
    45ce:	99 1f       	adc	r25, r25
    45d0:	11 96       	adiw	r26, 0x01	; 1
    45d2:	9c 93       	st	X, r25
    45d4:	11 97       	sbiw	r26, 0x01	; 1
    45d6:	21 15       	cp	r18, r1
    45d8:	31 05       	cpc	r19, r1
    45da:	a9 f5       	brne	.+106    	; 0x4646 <__unpack_f+0x9e>
    45dc:	41 15       	cp	r20, r1
    45de:	51 05       	cpc	r21, r1
    45e0:	61 05       	cpc	r22, r1
    45e2:	71 05       	cpc	r23, r1
    45e4:	11 f4       	brne	.+4      	; 0x45ea <__unpack_f+0x42>
    45e6:	82 e0       	ldi	r24, 0x02	; 2
    45e8:	37 c0       	rjmp	.+110    	; 0x4658 <__unpack_f+0xb0>
    45ea:	82 e8       	ldi	r24, 0x82	; 130
    45ec:	9f ef       	ldi	r25, 0xFF	; 255
    45ee:	13 96       	adiw	r26, 0x03	; 3
    45f0:	9c 93       	st	X, r25
    45f2:	8e 93       	st	-X, r24
    45f4:	12 97       	sbiw	r26, 0x02	; 2
    45f6:	9a 01       	movw	r18, r20
    45f8:	ab 01       	movw	r20, r22
    45fa:	67 e0       	ldi	r22, 0x07	; 7
    45fc:	22 0f       	add	r18, r18
    45fe:	33 1f       	adc	r19, r19
    4600:	44 1f       	adc	r20, r20
    4602:	55 1f       	adc	r21, r21
    4604:	6a 95       	dec	r22
    4606:	d1 f7       	brne	.-12     	; 0x45fc <__unpack_f+0x54>
    4608:	83 e0       	ldi	r24, 0x03	; 3
    460a:	8c 93       	st	X, r24
    460c:	0d c0       	rjmp	.+26     	; 0x4628 <__unpack_f+0x80>
    460e:	22 0f       	add	r18, r18
    4610:	33 1f       	adc	r19, r19
    4612:	44 1f       	adc	r20, r20
    4614:	55 1f       	adc	r21, r21
    4616:	12 96       	adiw	r26, 0x02	; 2
    4618:	8d 91       	ld	r24, X+
    461a:	9c 91       	ld	r25, X
    461c:	13 97       	sbiw	r26, 0x03	; 3
    461e:	01 97       	sbiw	r24, 0x01	; 1
    4620:	13 96       	adiw	r26, 0x03	; 3
    4622:	9c 93       	st	X, r25
    4624:	8e 93       	st	-X, r24
    4626:	12 97       	sbiw	r26, 0x02	; 2
    4628:	20 30       	cpi	r18, 0x00	; 0
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	38 07       	cpc	r19, r24
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	48 07       	cpc	r20, r24
    4632:	80 e4       	ldi	r24, 0x40	; 64
    4634:	58 07       	cpc	r21, r24
    4636:	58 f3       	brcs	.-42     	; 0x460e <__unpack_f+0x66>
    4638:	14 96       	adiw	r26, 0x04	; 4
    463a:	2d 93       	st	X+, r18
    463c:	3d 93       	st	X+, r19
    463e:	4d 93       	st	X+, r20
    4640:	5c 93       	st	X, r21
    4642:	17 97       	sbiw	r26, 0x07	; 7
    4644:	08 95       	ret
    4646:	2f 3f       	cpi	r18, 0xFF	; 255
    4648:	31 05       	cpc	r19, r1
    464a:	79 f4       	brne	.+30     	; 0x466a <__unpack_f+0xc2>
    464c:	41 15       	cp	r20, r1
    464e:	51 05       	cpc	r21, r1
    4650:	61 05       	cpc	r22, r1
    4652:	71 05       	cpc	r23, r1
    4654:	19 f4       	brne	.+6      	; 0x465c <__unpack_f+0xb4>
    4656:	84 e0       	ldi	r24, 0x04	; 4
    4658:	8c 93       	st	X, r24
    465a:	08 95       	ret
    465c:	64 ff       	sbrs	r22, 4
    465e:	03 c0       	rjmp	.+6      	; 0x4666 <__unpack_f+0xbe>
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	8c 93       	st	X, r24
    4664:	12 c0       	rjmp	.+36     	; 0x468a <__unpack_f+0xe2>
    4666:	1c 92       	st	X, r1
    4668:	10 c0       	rjmp	.+32     	; 0x468a <__unpack_f+0xe2>
    466a:	2f 57       	subi	r18, 0x7F	; 127
    466c:	30 40       	sbci	r19, 0x00	; 0
    466e:	13 96       	adiw	r26, 0x03	; 3
    4670:	3c 93       	st	X, r19
    4672:	2e 93       	st	-X, r18
    4674:	12 97       	sbiw	r26, 0x02	; 2
    4676:	83 e0       	ldi	r24, 0x03	; 3
    4678:	8c 93       	st	X, r24
    467a:	87 e0       	ldi	r24, 0x07	; 7
    467c:	44 0f       	add	r20, r20
    467e:	55 1f       	adc	r21, r21
    4680:	66 1f       	adc	r22, r22
    4682:	77 1f       	adc	r23, r23
    4684:	8a 95       	dec	r24
    4686:	d1 f7       	brne	.-12     	; 0x467c <__unpack_f+0xd4>
    4688:	70 64       	ori	r23, 0x40	; 64
    468a:	14 96       	adiw	r26, 0x04	; 4
    468c:	4d 93       	st	X+, r20
    468e:	5d 93       	st	X+, r21
    4690:	6d 93       	st	X+, r22
    4692:	7c 93       	st	X, r23
    4694:	17 97       	sbiw	r26, 0x07	; 7
    4696:	08 95       	ret

00004698 <__fpcmp_parts_f>:
    4698:	1f 93       	push	r17
    469a:	dc 01       	movw	r26, r24
    469c:	fb 01       	movw	r30, r22
    469e:	9c 91       	ld	r25, X
    46a0:	92 30       	cpi	r25, 0x02	; 2
    46a2:	08 f4       	brcc	.+2      	; 0x46a6 <__fpcmp_parts_f+0xe>
    46a4:	47 c0       	rjmp	.+142    	; 0x4734 <__fpcmp_parts_f+0x9c>
    46a6:	80 81       	ld	r24, Z
    46a8:	82 30       	cpi	r24, 0x02	; 2
    46aa:	08 f4       	brcc	.+2      	; 0x46ae <__fpcmp_parts_f+0x16>
    46ac:	43 c0       	rjmp	.+134    	; 0x4734 <__fpcmp_parts_f+0x9c>
    46ae:	94 30       	cpi	r25, 0x04	; 4
    46b0:	51 f4       	brne	.+20     	; 0x46c6 <__fpcmp_parts_f+0x2e>
    46b2:	11 96       	adiw	r26, 0x01	; 1
    46b4:	1c 91       	ld	r17, X
    46b6:	84 30       	cpi	r24, 0x04	; 4
    46b8:	99 f5       	brne	.+102    	; 0x4720 <__fpcmp_parts_f+0x88>
    46ba:	81 81       	ldd	r24, Z+1	; 0x01
    46bc:	68 2f       	mov	r22, r24
    46be:	70 e0       	ldi	r23, 0x00	; 0
    46c0:	61 1b       	sub	r22, r17
    46c2:	71 09       	sbc	r23, r1
    46c4:	3f c0       	rjmp	.+126    	; 0x4744 <__fpcmp_parts_f+0xac>
    46c6:	84 30       	cpi	r24, 0x04	; 4
    46c8:	21 f0       	breq	.+8      	; 0x46d2 <__fpcmp_parts_f+0x3a>
    46ca:	92 30       	cpi	r25, 0x02	; 2
    46cc:	31 f4       	brne	.+12     	; 0x46da <__fpcmp_parts_f+0x42>
    46ce:	82 30       	cpi	r24, 0x02	; 2
    46d0:	b9 f1       	breq	.+110    	; 0x4740 <__fpcmp_parts_f+0xa8>
    46d2:	81 81       	ldd	r24, Z+1	; 0x01
    46d4:	88 23       	and	r24, r24
    46d6:	89 f1       	breq	.+98     	; 0x473a <__fpcmp_parts_f+0xa2>
    46d8:	2d c0       	rjmp	.+90     	; 0x4734 <__fpcmp_parts_f+0x9c>
    46da:	11 96       	adiw	r26, 0x01	; 1
    46dc:	1c 91       	ld	r17, X
    46de:	11 97       	sbiw	r26, 0x01	; 1
    46e0:	82 30       	cpi	r24, 0x02	; 2
    46e2:	f1 f0       	breq	.+60     	; 0x4720 <__fpcmp_parts_f+0x88>
    46e4:	81 81       	ldd	r24, Z+1	; 0x01
    46e6:	18 17       	cp	r17, r24
    46e8:	d9 f4       	brne	.+54     	; 0x4720 <__fpcmp_parts_f+0x88>
    46ea:	12 96       	adiw	r26, 0x02	; 2
    46ec:	2d 91       	ld	r18, X+
    46ee:	3c 91       	ld	r19, X
    46f0:	13 97       	sbiw	r26, 0x03	; 3
    46f2:	82 81       	ldd	r24, Z+2	; 0x02
    46f4:	93 81       	ldd	r25, Z+3	; 0x03
    46f6:	82 17       	cp	r24, r18
    46f8:	93 07       	cpc	r25, r19
    46fa:	94 f0       	brlt	.+36     	; 0x4720 <__fpcmp_parts_f+0x88>
    46fc:	28 17       	cp	r18, r24
    46fe:	39 07       	cpc	r19, r25
    4700:	bc f0       	brlt	.+46     	; 0x4730 <__fpcmp_parts_f+0x98>
    4702:	14 96       	adiw	r26, 0x04	; 4
    4704:	8d 91       	ld	r24, X+
    4706:	9d 91       	ld	r25, X+
    4708:	0d 90       	ld	r0, X+
    470a:	bc 91       	ld	r27, X
    470c:	a0 2d       	mov	r26, r0
    470e:	24 81       	ldd	r18, Z+4	; 0x04
    4710:	35 81       	ldd	r19, Z+5	; 0x05
    4712:	46 81       	ldd	r20, Z+6	; 0x06
    4714:	57 81       	ldd	r21, Z+7	; 0x07
    4716:	28 17       	cp	r18, r24
    4718:	39 07       	cpc	r19, r25
    471a:	4a 07       	cpc	r20, r26
    471c:	5b 07       	cpc	r21, r27
    471e:	18 f4       	brcc	.+6      	; 0x4726 <__fpcmp_parts_f+0x8e>
    4720:	11 23       	and	r17, r17
    4722:	41 f0       	breq	.+16     	; 0x4734 <__fpcmp_parts_f+0x9c>
    4724:	0a c0       	rjmp	.+20     	; 0x473a <__fpcmp_parts_f+0xa2>
    4726:	82 17       	cp	r24, r18
    4728:	93 07       	cpc	r25, r19
    472a:	a4 07       	cpc	r26, r20
    472c:	b5 07       	cpc	r27, r21
    472e:	40 f4       	brcc	.+16     	; 0x4740 <__fpcmp_parts_f+0xa8>
    4730:	11 23       	and	r17, r17
    4732:	19 f0       	breq	.+6      	; 0x473a <__fpcmp_parts_f+0xa2>
    4734:	61 e0       	ldi	r22, 0x01	; 1
    4736:	70 e0       	ldi	r23, 0x00	; 0
    4738:	05 c0       	rjmp	.+10     	; 0x4744 <__fpcmp_parts_f+0xac>
    473a:	6f ef       	ldi	r22, 0xFF	; 255
    473c:	7f ef       	ldi	r23, 0xFF	; 255
    473e:	02 c0       	rjmp	.+4      	; 0x4744 <__fpcmp_parts_f+0xac>
    4740:	60 e0       	ldi	r22, 0x00	; 0
    4742:	70 e0       	ldi	r23, 0x00	; 0
    4744:	cb 01       	movw	r24, r22
    4746:	1f 91       	pop	r17
    4748:	08 95       	ret

0000474a <__prologue_saves__>:
    474a:	2f 92       	push	r2
    474c:	3f 92       	push	r3
    474e:	4f 92       	push	r4
    4750:	5f 92       	push	r5
    4752:	6f 92       	push	r6
    4754:	7f 92       	push	r7
    4756:	8f 92       	push	r8
    4758:	9f 92       	push	r9
    475a:	af 92       	push	r10
    475c:	bf 92       	push	r11
    475e:	cf 92       	push	r12
    4760:	df 92       	push	r13
    4762:	ef 92       	push	r14
    4764:	ff 92       	push	r15
    4766:	0f 93       	push	r16
    4768:	1f 93       	push	r17
    476a:	cf 93       	push	r28
    476c:	df 93       	push	r29
    476e:	cd b7       	in	r28, 0x3d	; 61
    4770:	de b7       	in	r29, 0x3e	; 62
    4772:	ca 1b       	sub	r28, r26
    4774:	db 0b       	sbc	r29, r27
    4776:	0f b6       	in	r0, 0x3f	; 63
    4778:	f8 94       	cli
    477a:	de bf       	out	0x3e, r29	; 62
    477c:	0f be       	out	0x3f, r0	; 63
    477e:	cd bf       	out	0x3d, r28	; 61
    4780:	19 94       	eijmp

00004782 <__epilogue_restores__>:
    4782:	2a 88       	ldd	r2, Y+18	; 0x12
    4784:	39 88       	ldd	r3, Y+17	; 0x11
    4786:	48 88       	ldd	r4, Y+16	; 0x10
    4788:	5f 84       	ldd	r5, Y+15	; 0x0f
    478a:	6e 84       	ldd	r6, Y+14	; 0x0e
    478c:	7d 84       	ldd	r7, Y+13	; 0x0d
    478e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4790:	9b 84       	ldd	r9, Y+11	; 0x0b
    4792:	aa 84       	ldd	r10, Y+10	; 0x0a
    4794:	b9 84       	ldd	r11, Y+9	; 0x09
    4796:	c8 84       	ldd	r12, Y+8	; 0x08
    4798:	df 80       	ldd	r13, Y+7	; 0x07
    479a:	ee 80       	ldd	r14, Y+6	; 0x06
    479c:	fd 80       	ldd	r15, Y+5	; 0x05
    479e:	0c 81       	ldd	r16, Y+4	; 0x04
    47a0:	1b 81       	ldd	r17, Y+3	; 0x03
    47a2:	aa 81       	ldd	r26, Y+2	; 0x02
    47a4:	b9 81       	ldd	r27, Y+1	; 0x01
    47a6:	ce 0f       	add	r28, r30
    47a8:	d1 1d       	adc	r29, r1
    47aa:	0f b6       	in	r0, 0x3f	; 63
    47ac:	f8 94       	cli
    47ae:	de bf       	out	0x3e, r29	; 62
    47b0:	0f be       	out	0x3f, r0	; 63
    47b2:	cd bf       	out	0x3d, r28	; 61
    47b4:	ed 01       	movw	r28, r26
    47b6:	08 95       	ret

000047b8 <_exit>:
    47b8:	f8 94       	cli

000047ba <__stop_program>:
    47ba:	ff cf       	rjmp	.-2      	; 0x47ba <__stop_program>


Robot_gripper_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00002492  00002506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002492  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000260e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001d0  00000000  00000000  0000262e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000081c  00000000  00000000  000027fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016e  00000000  00000000  0000301a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000b6a  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001f0  00000000  00000000  00003cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002c3  00000000  00000000  00003ee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e9       	ldi	r30, 0x92	; 146
      fc:	f4 e2       	ldi	r31, 0x24	; 36
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <main>
     112:	0c 94 47 12 	jmp	0x248e	; 0x248e <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <servo1_pin_config>:
#include <avr/interrupt.h>
#include <util/delay.h>

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     122:	a4 e2       	ldi	r26, 0x24	; 36
     124:	b0 e0       	ldi	r27, 0x00	; 0
     126:	e4 e2       	ldi	r30, 0x24	; 36
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	80 62       	ori	r24, 0x20	; 32
     12e:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     130:	a5 e2       	ldi	r26, 0x25	; 37
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	e5 e2       	ldi	r30, 0x25	; 37
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	80 62       	ori	r24, 0x20	; 32
     13c:	8c 93       	st	X, r24
}
     13e:	cf 91       	pop	r28
     140:	df 91       	pop	r29
     142:	08 95       	ret

00000144 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     14c:	a4 e2       	ldi	r26, 0x24	; 36
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	e4 e2       	ldi	r30, 0x24	; 36
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 64       	ori	r24, 0x40	; 64
     158:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     15a:	a5 e2       	ldi	r26, 0x25	; 37
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	e5 e2       	ldi	r30, 0x25	; 37
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	80 64       	ori	r24, 0x40	; 64
     166:	8c 93       	st	X, r24
}
     168:	cf 91       	pop	r28
     16a:	df 91       	pop	r29
     16c:	08 95       	ret

0000016e <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
     16e:	df 93       	push	r29
     170:	cf 93       	push	r28
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     176:	a4 e2       	ldi	r26, 0x24	; 36
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	e4 e2       	ldi	r30, 0x24	; 36
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	80 68       	ori	r24, 0x80	; 128
     182:	8c 93       	st	X, r24
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     184:	a5 e2       	ldi	r26, 0x25	; 37
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	e5 e2       	ldi	r30, 0x25	; 37
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	80 68       	ori	r24, 0x80	; 128
     190:	8c 93       	st	X, r24
}
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
     1a0:	a1 e2       	ldi	r26, 0x21	; 33
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e1 e2       	ldi	r30, 0x21	; 33
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	8f 60       	ori	r24, 0x0F	; 15
     1ac:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
     1ae:	a2 e2       	ldi	r26, 0x22	; 34
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e2 e2       	ldi	r30, 0x22	; 34
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 7f       	andi	r24, 0xF0	; 240
     1ba:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     1bc:	aa e0       	ldi	r26, 0x0A	; 10
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	ea e0       	ldi	r30, 0x0A	; 10
     1c2:	f1 e0       	ldi	r31, 0x01	; 1
     1c4:	80 81       	ld	r24, Z
     1c6:	88 61       	ori	r24, 0x18	; 24
     1c8:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     1ca:	ab e0       	ldi	r26, 0x0B	; 11
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	eb e0       	ldi	r30, 0x0B	; 11
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	80 81       	ld	r24, Z
     1d4:	88 61       	ori	r24, 0x18	; 24
     1d6:	8c 93       	st	X, r24
}
     1d8:	cf 91       	pop	r28
     1da:	df 91       	pop	r29
     1dc:	08 95       	ret

000001de <port_init>:

//Initialize the ports
void port_init(void)
{
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     1e6:	0e 94 8d 00 	call	0x11a	; 0x11a <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
     1ea:	0e 94 a2 00 	call	0x144	; 0x144 <servo2_pin_config>
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
     1ee:	0e 94 b7 00 	call	0x16e	; 0x16e <servo3_pin_config>
 motion_pin_config(); //Configure pins required for motion control
     1f2:	0e 94 cc 00 	call	0x198	; 0x198 <motion_pin_config>
}
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 42.187Hz 
void timer1_init(void)
{
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
     204:	e1 e8       	ldi	r30, 0x81	; 129
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     20a:	e5 e8       	ldi	r30, 0x85	; 133
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	8c ef       	ldi	r24, 0xFC	; 252
     210:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     212:	e4 e8       	ldi	r30, 0x84	; 132
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     21a:	e9 e8       	ldi	r30, 0x89	; 137
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     222:	e8 e8       	ldi	r30, 0x88	; 136
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	80 83       	st	Z, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     22a:	eb e8       	ldi	r30, 0x8B	; 139
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	80 83       	st	Z, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     232:	ea e8       	ldi	r30, 0x8A	; 138
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	80 83       	st	Z, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     23a:	ed e8       	ldi	r30, 0x8D	; 141
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	80 83       	st	Z, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     242:	ec e8       	ldi	r30, 0x8C	; 140
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	8f ef       	ldi	r24, 0xFF	; 255
     248:	80 83       	st	Z, r24
 ICR1H  = 0x03;	
     24a:	e7 e8       	ldi	r30, 0x87	; 135
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
     252:	e6 e8       	ldi	r30, 0x86	; 134
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     25a:	e0 e8       	ldi	r30, 0x80	; 128
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	8b ea       	ldi	r24, 0xAB	; 171
     260:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     262:	e2 e8       	ldi	r30, 0x82	; 130
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     268:	e1 e8       	ldi	r30, 0x81	; 129
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	8c e0       	ldi	r24, 0x0C	; 12
     26e:	80 83       	st	Z, r24
}
     270:	cf 91       	pop	r28
     272:	df 91       	pop	r29
     274:	08 95       	ret

00000276 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
     276:	df 93       	push	r29
     278:	cf 93       	push	r28
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     27e:	e1 e2       	ldi	r30, 0x21	; 33
     280:	f1 e0       	ldi	r31, 0x01	; 1
     282:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     284:	e5 e2       	ldi	r30, 0x25	; 37
     286:	f1 e0       	ldi	r31, 0x01	; 1
     288:	8f ef       	ldi	r24, 0xFF	; 255
     28a:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     28c:	e4 e2       	ldi	r30, 0x24	; 36
     28e:	f1 e0       	ldi	r31, 0x01	; 1
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     294:	e9 e2       	ldi	r30, 0x29	; 41
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     29a:	e8 e2       	ldi	r30, 0x28	; 40
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	8f ef       	ldi	r24, 0xFF	; 255
     2a0:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     2a2:	eb e2       	ldi	r30, 0x2B	; 43
     2a4:	f1 e0       	ldi	r31, 0x01	; 1
     2a6:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     2a8:	ea e2       	ldi	r30, 0x2A	; 42
     2aa:	f1 e0       	ldi	r31, 0x01	; 1
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
     2ae:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     2b0:	ed e2       	ldi	r30, 0x2D	; 45
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
     2b4:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     2b6:	ec e2       	ldi	r30, 0x2C	; 44
     2b8:	f1 e0       	ldi	r31, 0x01	; 1
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     2be:	e0 e2       	ldi	r30, 0x20	; 32
     2c0:	f1 e0       	ldi	r31, 0x01	; 1
     2c2:	89 ea       	ldi	r24, 0xA9	; 169
     2c4:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     2c6:	e1 e2       	ldi	r30, 0x21	; 33
     2c8:	f1 e0       	ldi	r31, 0x01	; 1
     2ca:	8b e0       	ldi	r24, 0x0B	; 11
     2cc:	80 83       	st	Z, r24
}
     2ce:	cf 91       	pop	r28
     2d0:	df 91       	pop	r29
     2d2:	08 95       	ret

000002d4 <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
     2d4:	df 93       	push	r29
     2d6:	cf 93       	push	r28
     2d8:	0f 92       	push	r0
     2da:	0f 92       	push	r0
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	89 83       	std	Y+1, r24	; 0x01
     2e2:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     2e4:	e8 e2       	ldi	r30, 0x28	; 40
     2e6:	f1 e0       	ldi	r31, 0x01	; 1
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     2ec:	ea e2       	ldi	r30, 0x2A	; 42
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	80 83       	st	Z, r24
}
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	cf 91       	pop	r28
     2fa:	df 91       	pop	r29
     2fc:	08 95       	ret

000002fe <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	0f 92       	push	r0
     304:	0f 92       	push	r0
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     30c:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     30e:	8a 81       	ldd	r24, Y+2	; 0x02
     310:	8f 70       	andi	r24, 0x0F	; 15
     312:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     314:	e2 e2       	ldi	r30, 0x22	; 34
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	80 7f       	andi	r24, 0xF0	; 240
     320:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     322:	99 81       	ldd	r25, Y+1	; 0x01
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	89 2b       	or	r24, r25
     328:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     32a:	e2 e2       	ldi	r30, 0x22	; 34
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	80 83       	st	Z, r24
}
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	cf 91       	pop	r28
     338:	df 91       	pop	r29
     33a:	08 95       	ret

0000033c <forward>:


void forward (void) //both wheels forward
{
     33c:	df 93       	push	r29
     33e:	cf 93       	push	r28
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     34a:	cf 91       	pop	r28
     34c:	df 91       	pop	r29
     34e:	08 95       	ret

00000350 <back>:

void back (void) //both wheels backward
{
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     358:	89 e0       	ldi	r24, 0x09	; 9
     35a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     35e:	cf 91       	pop	r28
     360:	df 91       	pop	r29
     362:	08 95       	ret

00000364 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
     364:	df 93       	push	r29
     366:	cf 93       	push	r28
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     36c:	85 e0       	ldi	r24, 0x05	; 5
     36e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     372:	cf 91       	pop	r28
     374:	df 91       	pop	r29
     376:	08 95       	ret

00000378 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     380:	8a e0       	ldi	r24, 0x0A	; 10
     382:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     386:	cf 91       	pop	r28
     388:	df 91       	pop	r29
     38a:	08 95       	ret

0000038c <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     394:	84 e0       	ldi	r24, 0x04	; 4
     396:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     39a:	cf 91       	pop	r28
     39c:	df 91       	pop	r29
     39e:	08 95       	ret

000003a0 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	08 95       	ret

000003b4 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     3c2:	cf 91       	pop	r28
     3c4:	df 91       	pop	r29
     3c6:	08 95       	ret

000003c8 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     3d0:	88 e0       	ldi	r24, 0x08	; 8
     3d2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     3d6:	cf 91       	pop	r28
     3d8:	df 91       	pop	r29
     3da:	08 95       	ret

000003dc <stop>:

void stop (void)
{
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <motion_set>
}
     3ea:	cf 91       	pop	r28
     3ec:	df 91       	pop	r29
     3ee:	08 95       	ret

000003f0 <init_devices>:



//Function to initialize all the peripherals
void init_devices(void)
{
     3f0:	df 93       	push	r29
     3f2:	cf 93       	push	r28
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
     3f8:	f8 94       	cli
 port_init();
     3fa:	0e 94 ef 00 	call	0x1de	; 0x1de <port_init>
 timer1_init();
     3fe:	0e 94 fe 00 	call	0x1fc	; 0x1fc <timer1_init>
 timer5_init();
     402:	0e 94 3b 01 	call	0x276	; 0x276 <timer5_init>
 sei(); //re-enable interrupts 
     406:	78 94       	sei
}
     408:	cf 91       	pop	r28
     40a:	df 91       	pop	r29
     40c:	08 95       	ret

0000040e <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	00 d0       	rcall	.+0      	; 0x418 <servo_1+0xa>
     418:	0f 92       	push	r0
     41a:	0f 92       	push	r0
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	a0 e0       	ldi	r26, 0x00	; 0
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	ab 83       	std	Y+3, r26	; 0x03
     430:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees / 1.86) + 35.0;
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	a0 e0       	ldi	r26, 0x00	; 0
     43a:	b0 e0       	ldi	r27, 0x00	; 0
     43c:	bc 01       	movw	r22, r24
     43e:	cd 01       	movw	r24, r26
     440:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__floatunsisf>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	bc 01       	movw	r22, r24
     44a:	cd 01       	movw	r24, r26
     44c:	2b e7       	ldi	r18, 0x7B	; 123
     44e:	34 e1       	ldi	r19, 0x14	; 20
     450:	4e ee       	ldi	r20, 0xEE	; 238
     452:	5f e3       	ldi	r21, 0x3F	; 63
     454:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__divsf3>
     458:	dc 01       	movw	r26, r24
     45a:	cb 01       	movw	r24, r22
     45c:	bc 01       	movw	r22, r24
     45e:	cd 01       	movw	r24, r26
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	4c e0       	ldi	r20, 0x0C	; 12
     466:	52 e4       	ldi	r21, 0x42	; 66
     468:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__addsf3>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	89 83       	std	Y+1, r24	; 0x01
     472:	9a 83       	std	Y+2, r25	; 0x02
     474:	ab 83       	std	Y+3, r26	; 0x03
     476:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
     478:	e9 e8       	ldi	r30, 0x89	; 137
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
     47e:	08 e8       	ldi	r16, 0x88	; 136
     480:	10 e0       	ldi	r17, 0x00	; 0
     482:	69 81       	ldd	r22, Y+1	; 0x01
     484:	7a 81       	ldd	r23, Y+2	; 0x02
     486:	8b 81       	ldd	r24, Y+3	; 0x03
     488:	9c 81       	ldd	r25, Y+4	; 0x04
     48a:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	f8 01       	movw	r30, r16
     494:	80 83       	st	Z, r24
}
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	cf 91       	pop	r28
     4a2:	df 91       	pop	r29
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	08 95       	ret

000004aa <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <servo_2+0xa>
     4b4:	0f 92       	push	r0
     4b6:	0f 92       	push	r0
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	a0 e0       	ldi	r26, 0x00	; 0
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	89 83       	std	Y+1, r24	; 0x01
     4c8:	9a 83       	std	Y+2, r25	; 0x02
     4ca:	ab 83       	std	Y+3, r26	; 0x03
     4cc:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     4ce:	8d 81       	ldd	r24, Y+5	; 0x05
     4d0:	88 2f       	mov	r24, r24
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	a0 e0       	ldi	r26, 0x00	; 0
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	bc 01       	movw	r22, r24
     4da:	cd 01       	movw	r24, r26
     4dc:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__floatunsisf>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	bc 01       	movw	r22, r24
     4e6:	cd 01       	movw	r24, r26
     4e8:	2b e7       	ldi	r18, 0x7B	; 123
     4ea:	34 e1       	ldi	r19, 0x14	; 20
     4ec:	4e ee       	ldi	r20, 0xEE	; 238
     4ee:	5f e3       	ldi	r21, 0x3F	; 63
     4f0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__divsf3>
     4f4:	dc 01       	movw	r26, r24
     4f6:	cb 01       	movw	r24, r22
     4f8:	bc 01       	movw	r22, r24
     4fa:	cd 01       	movw	r24, r26
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	4c e0       	ldi	r20, 0x0C	; 12
     502:	52 e4       	ldi	r21, 0x42	; 66
     504:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__addsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	89 83       	std	Y+1, r24	; 0x01
     50e:	9a 83       	std	Y+2, r25	; 0x02
     510:	ab 83       	std	Y+3, r26	; 0x03
     512:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
     514:	eb e8       	ldi	r30, 0x8B	; 139
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     51a:	0a e8       	ldi	r16, 0x8A	; 138
     51c:	10 e0       	ldi	r17, 0x00	; 0
     51e:	69 81       	ldd	r22, Y+1	; 0x01
     520:	7a 81       	ldd	r23, Y+2	; 0x02
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	f8 01       	movw	r30, r16
     530:	80 83       	st	Z, r24
}
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	00 d0       	rcall	.+0      	; 0x550 <servo_3+0xa>
     550:	0f 92       	push	r0
     552:	0f 92       	push	r0
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	9a 83       	std	Y+2, r25	; 0x02
     566:	ab 83       	std	Y+3, r26	; 0x03
     568:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees / 1.86) + 35.0;
     56a:	8d 81       	ldd	r24, Y+5	; 0x05
     56c:	88 2f       	mov	r24, r24
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	a0 e0       	ldi	r26, 0x00	; 0
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__floatunsisf>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	2b e7       	ldi	r18, 0x7B	; 123
     586:	34 e1       	ldi	r19, 0x14	; 20
     588:	4e ee       	ldi	r20, 0xEE	; 238
     58a:	5f e3       	ldi	r21, 0x3F	; 63
     58c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__divsf3>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	bc 01       	movw	r22, r24
     596:	cd 01       	movw	r24, r26
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	4c e0       	ldi	r20, 0x0C	; 12
     59e:	52 e4       	ldi	r21, 0x42	; 66
     5a0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__addsf3>
     5a4:	dc 01       	movw	r26, r24
     5a6:	cb 01       	movw	r24, r22
     5a8:	89 83       	std	Y+1, r24	; 0x01
     5aa:	9a 83       	std	Y+2, r25	; 0x02
     5ac:	ab 83       	std	Y+3, r26	; 0x03
     5ae:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
     5b0:	ed e8       	ldi	r30, 0x8D	; 141
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
     5b6:	0c e8       	ldi	r16, 0x8C	; 140
     5b8:	10 e0       	ldi	r17, 0x00	; 0
     5ba:	69 81       	ldd	r22, Y+1	; 0x01
     5bc:	7a 81       	ldd	r23, Y+2	; 0x02
     5be:	8b 81       	ldd	r24, Y+3	; 0x03
     5c0:	9c 81       	ldd	r25, Y+4	; 0x04
     5c2:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     5c6:	dc 01       	movw	r26, r24
     5c8:	cb 01       	movw	r24, r22
     5ca:	f8 01       	movw	r30, r16
     5cc:	80 83       	st	Z, r24
}
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	cf 91       	pop	r28
     5da:	df 91       	pop	r29
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	08 95       	ret

000005e2 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
     5ea:	e9 e8       	ldi	r30, 0x89	; 137
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	80 83       	st	Z, r24
 OCR1AL = 0xFF; //Servo 1 off
     5f2:	e8 e8       	ldi	r30, 0x88	; 136
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	80 83       	st	Z, r24
}
     5fa:	cf 91       	pop	r28
     5fc:	df 91       	pop	r29
     5fe:	08 95       	ret

00000600 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
     600:	df 93       	push	r29
     602:	cf 93       	push	r28
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
     608:	eb e8       	ldi	r30, 0x8B	; 139
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	80 83       	st	Z, r24
 OCR1BL = 0xFF; //Servo 2 off
     610:	ea e8       	ldi	r30, 0x8A	; 138
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	80 83       	st	Z, r24
}
     618:	cf 91       	pop	r28
     61a:	df 91       	pop	r29
     61c:	08 95       	ret

0000061e <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
     626:	ed e8       	ldi	r30, 0x8D	; 141
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	80 83       	st	Z, r24
 OCR1CL = 0xFF; //Servo 3 off
     62e:	ec e8       	ldi	r30, 0x8C	; 140
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	80 83       	st	Z, r24
} 
     636:	cf 91       	pop	r28
     638:	df 91       	pop	r29
     63a:	08 95       	ret

0000063c <object_grip>:

void object_grip (void) // grip the object
{
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	2e 97       	sbiw	r28, 0x0e	; 14
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
 servo_2 (35);
     650:	83 e2       	ldi	r24, 0x23	; 35
     652:	0e 94 55 02 	call	0x4aa	; 0x4aa <servo_2>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	aa e7       	ldi	r26, 0x7A	; 122
     65c:	b4 e4       	ldi	r27, 0x44	; 68
     65e:	8b 87       	std	Y+11, r24	; 0x0b
     660:	9c 87       	std	Y+12, r25	; 0x0c
     662:	ad 87       	std	Y+13, r26	; 0x0d
     664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     666:	6b 85       	ldd	r22, Y+11	; 0x0b
     668:	7c 85       	ldd	r23, Y+12	; 0x0c
     66a:	8d 85       	ldd	r24, Y+13	; 0x0d
     66c:	9e 85       	ldd	r25, Y+14	; 0x0e
     66e:	26 e6       	ldi	r18, 0x66	; 102
     670:	36 e6       	ldi	r19, 0x66	; 102
     672:	46 e6       	ldi	r20, 0x66	; 102
     674:	55 e4       	ldi	r21, 0x45	; 69
     676:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     67a:	dc 01       	movw	r26, r24
     67c:	cb 01       	movw	r24, r22
     67e:	8f 83       	std	Y+7, r24	; 0x07
     680:	98 87       	std	Y+8, r25	; 0x08
     682:	a9 87       	std	Y+9, r26	; 0x09
     684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     686:	6f 81       	ldd	r22, Y+7	; 0x07
     688:	78 85       	ldd	r23, Y+8	; 0x08
     68a:	89 85       	ldd	r24, Y+9	; 0x09
     68c:	9a 85       	ldd	r25, Y+10	; 0x0a
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 e8       	ldi	r20, 0x80	; 128
     694:	5f e3       	ldi	r21, 0x3F	; 63
     696:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     69a:	88 23       	and	r24, r24
     69c:	2c f4       	brge	.+10     	; 0x6a8 <object_grip+0x6c>
		__ticks = 1;
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	9e 83       	std	Y+6, r25	; 0x06
     6a4:	8d 83       	std	Y+5, r24	; 0x05
     6a6:	3f c0       	rjmp	.+126    	; 0x726 <object_grip+0xea>
	else if (__tmp > 65535)
     6a8:	6f 81       	ldd	r22, Y+7	; 0x07
     6aa:	78 85       	ldd	r23, Y+8	; 0x08
     6ac:	89 85       	ldd	r24, Y+9	; 0x09
     6ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	3f ef       	ldi	r19, 0xFF	; 255
     6b4:	4f e7       	ldi	r20, 0x7F	; 127
     6b6:	57 e4       	ldi	r21, 0x47	; 71
     6b8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     6bc:	18 16       	cp	r1, r24
     6be:	4c f5       	brge	.+82     	; 0x712 <object_grip+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     6c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     6c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     6c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e2       	ldi	r20, 0x20	; 32
     6ce:	51 e4       	ldi	r21, 0x41	; 65
     6d0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	bc 01       	movw	r22, r24
     6da:	cd 01       	movw	r24, r26
     6dc:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	9e 83       	std	Y+6, r25	; 0x06
     6e6:	8d 83       	std	Y+5, r24	; 0x05
     6e8:	0f c0       	rjmp	.+30     	; 0x708 <object_grip+0xcc>
     6ea:	80 e7       	ldi	r24, 0x70	; 112
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	9c 83       	std	Y+4, r25	; 0x04
     6f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	9c 81       	ldd	r25, Y+4	; 0x04
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <object_grip+0xba>
     6fa:	9c 83       	std	Y+4, r25	; 0x04
     6fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6fe:	8d 81       	ldd	r24, Y+5	; 0x05
     700:	9e 81       	ldd	r25, Y+6	; 0x06
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	9e 83       	std	Y+6, r25	; 0x06
     706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     708:	8d 81       	ldd	r24, Y+5	; 0x05
     70a:	9e 81       	ldd	r25, Y+6	; 0x06
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	69 f7       	brne	.-38     	; 0x6ea <object_grip+0xae>
     710:	14 c0       	rjmp	.+40     	; 0x73a <object_grip+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     712:	6f 81       	ldd	r22, Y+7	; 0x07
     714:	78 85       	ldd	r23, Y+8	; 0x08
     716:	89 85       	ldd	r24, Y+9	; 0x09
     718:	9a 85       	ldd	r25, Y+10	; 0x0a
     71a:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     71e:	dc 01       	movw	r26, r24
     720:	cb 01       	movw	r24, r22
     722:	9e 83       	std	Y+6, r25	; 0x06
     724:	8d 83       	std	Y+5, r24	; 0x05
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	9e 81       	ldd	r25, Y+6	; 0x06
     72a:	9a 83       	std	Y+2, r25	; 0x02
     72c:	89 83       	std	Y+1, r24	; 0x01
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	9a 81       	ldd	r25, Y+2	; 0x02
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <object_grip+0xf6>
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(1000);
}
     73a:	2e 96       	adiw	r28, 0x0e	; 14
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	cf 91       	pop	r28
     748:	df 91       	pop	r29
     74a:	08 95       	ret

0000074c <object_ungrip>:

void object_ungrip (void) // relase the object
{
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	2e 97       	sbiw	r28, 0x0e	; 14
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
 servo_2 (90);
     760:	8a e5       	ldi	r24, 0x5A	; 90
     762:	0e 94 55 02 	call	0x4aa	; 0x4aa <servo_2>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	aa e7       	ldi	r26, 0x7A	; 122
     76c:	b4 e4       	ldi	r27, 0x44	; 68
     76e:	8b 87       	std	Y+11, r24	; 0x0b
     770:	9c 87       	std	Y+12, r25	; 0x0c
     772:	ad 87       	std	Y+13, r26	; 0x0d
     774:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     776:	6b 85       	ldd	r22, Y+11	; 0x0b
     778:	7c 85       	ldd	r23, Y+12	; 0x0c
     77a:	8d 85       	ldd	r24, Y+13	; 0x0d
     77c:	9e 85       	ldd	r25, Y+14	; 0x0e
     77e:	26 e6       	ldi	r18, 0x66	; 102
     780:	36 e6       	ldi	r19, 0x66	; 102
     782:	46 e6       	ldi	r20, 0x66	; 102
     784:	55 e4       	ldi	r21, 0x45	; 69
     786:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	8f 83       	std	Y+7, r24	; 0x07
     790:	98 87       	std	Y+8, r25	; 0x08
     792:	a9 87       	std	Y+9, r26	; 0x09
     794:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     796:	6f 81       	ldd	r22, Y+7	; 0x07
     798:	78 85       	ldd	r23, Y+8	; 0x08
     79a:	89 85       	ldd	r24, Y+9	; 0x09
     79c:	9a 85       	ldd	r25, Y+10	; 0x0a
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e8       	ldi	r20, 0x80	; 128
     7a4:	5f e3       	ldi	r21, 0x3F	; 63
     7a6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     7aa:	88 23       	and	r24, r24
     7ac:	2c f4       	brge	.+10     	; 0x7b8 <object_ungrip+0x6c>
		__ticks = 1;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	9e 83       	std	Y+6, r25	; 0x06
     7b4:	8d 83       	std	Y+5, r24	; 0x05
     7b6:	3f c0       	rjmp	.+126    	; 0x836 <object_ungrip+0xea>
	else if (__tmp > 65535)
     7b8:	6f 81       	ldd	r22, Y+7	; 0x07
     7ba:	78 85       	ldd	r23, Y+8	; 0x08
     7bc:	89 85       	ldd	r24, Y+9	; 0x09
     7be:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	3f ef       	ldi	r19, 0xFF	; 255
     7c4:	4f e7       	ldi	r20, 0x7F	; 127
     7c6:	57 e4       	ldi	r21, 0x47	; 71
     7c8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     7cc:	18 16       	cp	r1, r24
     7ce:	4c f5       	brge	.+82     	; 0x822 <object_ungrip+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7d0:	6b 85       	ldd	r22, Y+11	; 0x0b
     7d2:	7c 85       	ldd	r23, Y+12	; 0x0c
     7d4:	8d 85       	ldd	r24, Y+13	; 0x0d
     7d6:	9e 85       	ldd	r25, Y+14	; 0x0e
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e2       	ldi	r20, 0x20	; 32
     7de:	51 e4       	ldi	r21, 0x41	; 65
     7e0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	bc 01       	movw	r22, r24
     7ea:	cd 01       	movw	r24, r26
     7ec:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	9e 83       	std	Y+6, r25	; 0x06
     7f6:	8d 83       	std	Y+5, r24	; 0x05
     7f8:	0f c0       	rjmp	.+30     	; 0x818 <object_ungrip+0xcc>
     7fa:	80 e7       	ldi	r24, 0x70	; 112
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	8b 83       	std	Y+3, r24	; 0x03
     802:	8b 81       	ldd	r24, Y+3	; 0x03
     804:	9c 81       	ldd	r25, Y+4	; 0x04
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <object_ungrip+0xba>
     80a:	9c 83       	std	Y+4, r25	; 0x04
     80c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     80e:	8d 81       	ldd	r24, Y+5	; 0x05
     810:	9e 81       	ldd	r25, Y+6	; 0x06
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	9e 83       	std	Y+6, r25	; 0x06
     816:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     818:	8d 81       	ldd	r24, Y+5	; 0x05
     81a:	9e 81       	ldd	r25, Y+6	; 0x06
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	69 f7       	brne	.-38     	; 0x7fa <object_ungrip+0xae>
     820:	14 c0       	rjmp	.+40     	; 0x84a <object_ungrip+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     822:	6f 81       	ldd	r22, Y+7	; 0x07
     824:	78 85       	ldd	r23, Y+8	; 0x08
     826:	89 85       	ldd	r24, Y+9	; 0x09
     828:	9a 85       	ldd	r25, Y+10	; 0x0a
     82a:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     82e:	dc 01       	movw	r26, r24
     830:	cb 01       	movw	r24, r22
     832:	9e 83       	std	Y+6, r25	; 0x06
     834:	8d 83       	std	Y+5, r24	; 0x05
     836:	8d 81       	ldd	r24, Y+5	; 0x05
     838:	9e 81       	ldd	r25, Y+6	; 0x06
     83a:	9a 83       	std	Y+2, r25	; 0x02
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	9a 81       	ldd	r25, Y+2	; 0x02
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <object_ungrip+0xf6>
     846:	9a 83       	std	Y+2, r25	; 0x02
     848:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(1000);

}
     84a:	2e 96       	adiw	r28, 0x0e	; 14
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
     856:	cf 91       	pop	r28
     858:	df 91       	pop	r29
     85a:	08 95       	ret

0000085c <arm_lift>:

void arm_lift (void)
{
     85c:	df 93       	push	r29
     85e:	cf 93       	push	r28
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	2e 97       	sbiw	r28, 0x0e	; 14
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
 servo_3 (40);
     870:	88 e2       	ldi	r24, 0x28	; 40
     872:	0e 94 a3 02 	call	0x546	; 0x546 <servo_3>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	aa e7       	ldi	r26, 0x7A	; 122
     87c:	b4 e4       	ldi	r27, 0x44	; 68
     87e:	8b 87       	std	Y+11, r24	; 0x0b
     880:	9c 87       	std	Y+12, r25	; 0x0c
     882:	ad 87       	std	Y+13, r26	; 0x0d
     884:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     886:	6b 85       	ldd	r22, Y+11	; 0x0b
     888:	7c 85       	ldd	r23, Y+12	; 0x0c
     88a:	8d 85       	ldd	r24, Y+13	; 0x0d
     88c:	9e 85       	ldd	r25, Y+14	; 0x0e
     88e:	26 e6       	ldi	r18, 0x66	; 102
     890:	36 e6       	ldi	r19, 0x66	; 102
     892:	46 e6       	ldi	r20, 0x66	; 102
     894:	55 e4       	ldi	r21, 0x45	; 69
     896:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	8f 83       	std	Y+7, r24	; 0x07
     8a0:	98 87       	std	Y+8, r25	; 0x08
     8a2:	a9 87       	std	Y+9, r26	; 0x09
     8a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     8a6:	6f 81       	ldd	r22, Y+7	; 0x07
     8a8:	78 85       	ldd	r23, Y+8	; 0x08
     8aa:	89 85       	ldd	r24, Y+9	; 0x09
     8ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e8       	ldi	r20, 0x80	; 128
     8b4:	5f e3       	ldi	r21, 0x3F	; 63
     8b6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     8ba:	88 23       	and	r24, r24
     8bc:	2c f4       	brge	.+10     	; 0x8c8 <arm_lift+0x6c>
		__ticks = 1;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	9e 83       	std	Y+6, r25	; 0x06
     8c4:	8d 83       	std	Y+5, r24	; 0x05
     8c6:	3f c0       	rjmp	.+126    	; 0x946 <arm_lift+0xea>
	else if (__tmp > 65535)
     8c8:	6f 81       	ldd	r22, Y+7	; 0x07
     8ca:	78 85       	ldd	r23, Y+8	; 0x08
     8cc:	89 85       	ldd	r24, Y+9	; 0x09
     8ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	3f ef       	ldi	r19, 0xFF	; 255
     8d4:	4f e7       	ldi	r20, 0x7F	; 127
     8d6:	57 e4       	ldi	r21, 0x47	; 71
     8d8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     8dc:	18 16       	cp	r1, r24
     8de:	4c f5       	brge	.+82     	; 0x932 <arm_lift+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8e0:	6b 85       	ldd	r22, Y+11	; 0x0b
     8e2:	7c 85       	ldd	r23, Y+12	; 0x0c
     8e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e2       	ldi	r20, 0x20	; 32
     8ee:	51 e4       	ldi	r21, 0x41	; 65
     8f0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	bc 01       	movw	r22, r24
     8fa:	cd 01       	movw	r24, r26
     8fc:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     900:	dc 01       	movw	r26, r24
     902:	cb 01       	movw	r24, r22
     904:	9e 83       	std	Y+6, r25	; 0x06
     906:	8d 83       	std	Y+5, r24	; 0x05
     908:	0f c0       	rjmp	.+30     	; 0x928 <arm_lift+0xcc>
     90a:	80 e7       	ldi	r24, 0x70	; 112
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	9c 83       	std	Y+4, r25	; 0x04
     910:	8b 83       	std	Y+3, r24	; 0x03
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <arm_lift+0xba>
     91a:	9c 83       	std	Y+4, r25	; 0x04
     91c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91e:	8d 81       	ldd	r24, Y+5	; 0x05
     920:	9e 81       	ldd	r25, Y+6	; 0x06
     922:	01 97       	sbiw	r24, 0x01	; 1
     924:	9e 83       	std	Y+6, r25	; 0x06
     926:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	9e 81       	ldd	r25, Y+6	; 0x06
     92c:	00 97       	sbiw	r24, 0x00	; 0
     92e:	69 f7       	brne	.-38     	; 0x90a <arm_lift+0xae>
     930:	14 c0       	rjmp	.+40     	; 0x95a <arm_lift+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     932:	6f 81       	ldd	r22, Y+7	; 0x07
     934:	78 85       	ldd	r23, Y+8	; 0x08
     936:	89 85       	ldd	r24, Y+9	; 0x09
     938:	9a 85       	ldd	r25, Y+10	; 0x0a
     93a:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     93e:	dc 01       	movw	r26, r24
     940:	cb 01       	movw	r24, r22
     942:	9e 83       	std	Y+6, r25	; 0x06
     944:	8d 83       	std	Y+5, r24	; 0x05
     946:	8d 81       	ldd	r24, Y+5	; 0x05
     948:	9e 81       	ldd	r25, Y+6	; 0x06
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	89 83       	std	Y+1, r24	; 0x01
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	9a 81       	ldd	r25, Y+2	; 0x02
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <arm_lift+0xf6>
     956:	9a 83       	std	Y+2, r25	; 0x02
     958:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(1000);
}
     95a:	2e 96       	adiw	r28, 0x0e	; 14
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	cf 91       	pop	r28
     968:	df 91       	pop	r29
     96a:	08 95       	ret

0000096c <arm_down>:

void arm_down (void)
{
     96c:	df 93       	push	r29
     96e:	cf 93       	push	r28
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	2e 97       	sbiw	r28, 0x0e	; 14
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
 servo_3 (90);
     980:	8a e5       	ldi	r24, 0x5A	; 90
     982:	0e 94 a3 02 	call	0x546	; 0x546 <servo_3>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	aa e7       	ldi	r26, 0x7A	; 122
     98c:	b4 e4       	ldi	r27, 0x44	; 68
     98e:	8b 87       	std	Y+11, r24	; 0x0b
     990:	9c 87       	std	Y+12, r25	; 0x0c
     992:	ad 87       	std	Y+13, r26	; 0x0d
     994:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     996:	6b 85       	ldd	r22, Y+11	; 0x0b
     998:	7c 85       	ldd	r23, Y+12	; 0x0c
     99a:	8d 85       	ldd	r24, Y+13	; 0x0d
     99c:	9e 85       	ldd	r25, Y+14	; 0x0e
     99e:	26 e6       	ldi	r18, 0x66	; 102
     9a0:	36 e6       	ldi	r19, 0x66	; 102
     9a2:	46 e6       	ldi	r20, 0x66	; 102
     9a4:	55 e4       	ldi	r21, 0x45	; 69
     9a6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	8f 83       	std	Y+7, r24	; 0x07
     9b0:	98 87       	std	Y+8, r25	; 0x08
     9b2:	a9 87       	std	Y+9, r26	; 0x09
     9b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9b6:	6f 81       	ldd	r22, Y+7	; 0x07
     9b8:	78 85       	ldd	r23, Y+8	; 0x08
     9ba:	89 85       	ldd	r24, Y+9	; 0x09
     9bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e8       	ldi	r20, 0x80	; 128
     9c4:	5f e3       	ldi	r21, 0x3F	; 63
     9c6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     9ca:	88 23       	and	r24, r24
     9cc:	2c f4       	brge	.+10     	; 0x9d8 <arm_down+0x6c>
		__ticks = 1;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	9e 83       	std	Y+6, r25	; 0x06
     9d4:	8d 83       	std	Y+5, r24	; 0x05
     9d6:	3f c0       	rjmp	.+126    	; 0xa56 <arm_down+0xea>
	else if (__tmp > 65535)
     9d8:	6f 81       	ldd	r22, Y+7	; 0x07
     9da:	78 85       	ldd	r23, Y+8	; 0x08
     9dc:	89 85       	ldd	r24, Y+9	; 0x09
     9de:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f e7       	ldi	r20, 0x7F	; 127
     9e6:	57 e4       	ldi	r21, 0x47	; 71
     9e8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     9ec:	18 16       	cp	r1, r24
     9ee:	4c f5       	brge	.+82     	; 0xa42 <arm_down+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f0:	6b 85       	ldd	r22, Y+11	; 0x0b
     9f2:	7c 85       	ldd	r23, Y+12	; 0x0c
     9f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     9f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	40 e2       	ldi	r20, 0x20	; 32
     9fe:	51 e4       	ldi	r21, 0x41	; 65
     a00:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	bc 01       	movw	r22, r24
     a0a:	cd 01       	movw	r24, r26
     a0c:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     a10:	dc 01       	movw	r26, r24
     a12:	cb 01       	movw	r24, r22
     a14:	9e 83       	std	Y+6, r25	; 0x06
     a16:	8d 83       	std	Y+5, r24	; 0x05
     a18:	0f c0       	rjmp	.+30     	; 0xa38 <arm_down+0xcc>
     a1a:	80 e7       	ldi	r24, 0x70	; 112
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	9c 81       	ldd	r25, Y+4	; 0x04
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <arm_down+0xba>
     a2a:	9c 83       	std	Y+4, r25	; 0x04
     a2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	9e 83       	std	Y+6, r25	; 0x06
     a36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	9e 81       	ldd	r25, Y+6	; 0x06
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	69 f7       	brne	.-38     	; 0xa1a <arm_down+0xae>
     a40:	14 c0       	rjmp	.+40     	; 0xa6a <arm_down+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a42:	6f 81       	ldd	r22, Y+7	; 0x07
     a44:	78 85       	ldd	r23, Y+8	; 0x08
     a46:	89 85       	ldd	r24, Y+9	; 0x09
     a48:	9a 85       	ldd	r25, Y+10	; 0x0a
     a4a:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	9e 83       	std	Y+6, r25	; 0x06
     a54:	8d 83       	std	Y+5, r24	; 0x05
     a56:	8d 81       	ldd	r24, Y+5	; 0x05
     a58:	9e 81       	ldd	r25, Y+6	; 0x06
     a5a:	9a 83       	std	Y+2, r25	; 0x02
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <arm_down+0xf6>
     a66:	9a 83       	std	Y+2, r25	; 0x02
     a68:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(1000);
}
     a6a:	2e 96       	adiw	r28, 0x0e	; 14
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	cf 91       	pop	r28
     a78:	df 91       	pop	r29
     a7a:	08 95       	ret

00000a7c <main>:



//Main function
void main(void)
{
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	cd 58       	subi	r28, 0x8D	; 141
     a8a:	d0 40       	sbci	r29, 0x00	; 0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
 unsigned char i = 0;
     a96:	fe 01       	movw	r30, r28
     a98:	e3 57       	subi	r30, 0x73	; 115
     a9a:	ff 4f       	sbci	r31, 0xFF	; 255
     a9c:	10 82       	st	Z, r1
 init_devices();
     a9e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <init_devices>
 
 
 while (1)
 { 
  
 arm_down();
     aa2:	0e 94 b6 04 	call	0x96c	; 0x96c <arm_down>
 object_ungrip(); 
     aa6:	0e 94 a6 03 	call	0x74c	; 0x74c <object_ungrip>
 
 forward();
     aaa:	0e 94 9e 01 	call	0x33c	; 0x33c <forward>
     aae:	fe 01       	movw	r30, r28
     ab0:	e7 57       	subi	r30, 0x77	; 119
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e4       	ldi	r25, 0x40	; 64
     ab8:	ac e1       	ldi	r26, 0x1C	; 28
     aba:	b5 e4       	ldi	r27, 0x45	; 69
     abc:	80 83       	st	Z, r24
     abe:	91 83       	std	Z+1, r25	; 0x01
     ac0:	a2 83       	std	Z+2, r26	; 0x02
     ac2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ac4:	8e 01       	movw	r16, r28
     ac6:	0b 57       	subi	r16, 0x7B	; 123
     ac8:	1f 4f       	sbci	r17, 0xFF	; 255
     aca:	fe 01       	movw	r30, r28
     acc:	e7 57       	subi	r30, 0x77	; 119
     ace:	ff 4f       	sbci	r31, 0xFF	; 255
     ad0:	60 81       	ld	r22, Z
     ad2:	71 81       	ldd	r23, Z+1	; 0x01
     ad4:	82 81       	ldd	r24, Z+2	; 0x02
     ad6:	93 81       	ldd	r25, Z+3	; 0x03
     ad8:	26 e6       	ldi	r18, 0x66	; 102
     ada:	36 e6       	ldi	r19, 0x66	; 102
     adc:	46 e6       	ldi	r20, 0x66	; 102
     ade:	55 e4       	ldi	r21, 0x45	; 69
     ae0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     ae4:	dc 01       	movw	r26, r24
     ae6:	cb 01       	movw	r24, r22
     ae8:	f8 01       	movw	r30, r16
     aea:	80 83       	st	Z, r24
     aec:	91 83       	std	Z+1, r25	; 0x01
     aee:	a2 83       	std	Z+2, r26	; 0x02
     af0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     af2:	fe 01       	movw	r30, r28
     af4:	eb 57       	subi	r30, 0x7B	; 123
     af6:	ff 4f       	sbci	r31, 0xFF	; 255
     af8:	60 81       	ld	r22, Z
     afa:	71 81       	ldd	r23, Z+1	; 0x01
     afc:	82 81       	ldd	r24, Z+2	; 0x02
     afe:	93 81       	ldd	r25, Z+3	; 0x03
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e8       	ldi	r20, 0x80	; 128
     b06:	5f e3       	ldi	r21, 0x3F	; 63
     b08:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     b0c:	88 23       	and	r24, r24
     b0e:	44 f4       	brge	.+16     	; 0xb20 <main+0xa4>
		__ticks = 1;
     b10:	fe 01       	movw	r30, r28
     b12:	ed 57       	subi	r30, 0x7D	; 125
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	91 83       	std	Z+1, r25	; 0x01
     b1c:	80 83       	st	Z, r24
     b1e:	64 c0       	rjmp	.+200    	; 0xbe8 <main+0x16c>
	else if (__tmp > 65535)
     b20:	fe 01       	movw	r30, r28
     b22:	eb 57       	subi	r30, 0x7B	; 123
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	60 81       	ld	r22, Z
     b28:	71 81       	ldd	r23, Z+1	; 0x01
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	93 81       	ldd	r25, Z+3	; 0x03
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	3f ef       	ldi	r19, 0xFF	; 255
     b32:	4f e7       	ldi	r20, 0x7F	; 127
     b34:	57 e4       	ldi	r21, 0x47	; 71
     b36:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     b3a:	18 16       	cp	r1, r24
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <main+0xc4>
     b3e:	43 c0       	rjmp	.+134    	; 0xbc6 <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b40:	fe 01       	movw	r30, r28
     b42:	e7 57       	subi	r30, 0x77	; 119
     b44:	ff 4f       	sbci	r31, 0xFF	; 255
     b46:	60 81       	ld	r22, Z
     b48:	71 81       	ldd	r23, Z+1	; 0x01
     b4a:	82 81       	ldd	r24, Z+2	; 0x02
     b4c:	93 81       	ldd	r25, Z+3	; 0x03
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e2       	ldi	r20, 0x20	; 32
     b54:	51 e4       	ldi	r21, 0x41	; 65
     b56:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	8e 01       	movw	r16, r28
     b60:	0d 57       	subi	r16, 0x7D	; 125
     b62:	1f 4f       	sbci	r17, 0xFF	; 255
     b64:	bc 01       	movw	r22, r24
     b66:	cd 01       	movw	r24, r26
     b68:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	f8 01       	movw	r30, r16
     b72:	91 83       	std	Z+1, r25	; 0x01
     b74:	80 83       	st	Z, r24
     b76:	1f c0       	rjmp	.+62     	; 0xbb6 <main+0x13a>
     b78:	fe 01       	movw	r30, r28
     b7a:	ef 57       	subi	r30, 0x7F	; 127
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	80 e7       	ldi	r24, 0x70	; 112
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	91 83       	std	Z+1, r25	; 0x01
     b84:	80 83       	st	Z, r24
     b86:	fe 01       	movw	r30, r28
     b88:	ef 57       	subi	r30, 0x7F	; 127
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	91 81       	ldd	r25, Z+1	; 0x01
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	f1 f7       	brne	.-4      	; 0xb90 <main+0x114>
     b94:	fe 01       	movw	r30, r28
     b96:	ef 57       	subi	r30, 0x7F	; 127
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	91 83       	std	Z+1, r25	; 0x01
     b9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9e:	de 01       	movw	r26, r28
     ba0:	ad 57       	subi	r26, 0x7D	; 125
     ba2:	bf 4f       	sbci	r27, 0xFF	; 255
     ba4:	fe 01       	movw	r30, r28
     ba6:	ed 57       	subi	r30, 0x7D	; 125
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	80 81       	ld	r24, Z
     bac:	91 81       	ldd	r25, Z+1	; 0x01
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	9c 93       	st	X, r25
     bb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb6:	fe 01       	movw	r30, r28
     bb8:	ed 57       	subi	r30, 0x7D	; 125
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	80 81       	ld	r24, Z
     bbe:	91 81       	ldd	r25, Z+1	; 0x01
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	d1 f6       	brne	.-76     	; 0xb78 <main+0xfc>
     bc4:	27 c0       	rjmp	.+78     	; 0xc14 <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bc6:	8e 01       	movw	r16, r28
     bc8:	0d 57       	subi	r16, 0x7D	; 125
     bca:	1f 4f       	sbci	r17, 0xFF	; 255
     bcc:	fe 01       	movw	r30, r28
     bce:	eb 57       	subi	r30, 0x7B	; 123
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	60 81       	ld	r22, Z
     bd4:	71 81       	ldd	r23, Z+1	; 0x01
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
     bd8:	93 81       	ldd	r25, Z+3	; 0x03
     bda:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	f8 01       	movw	r30, r16
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	80 83       	st	Z, r24
     be8:	de 01       	movw	r26, r28
     bea:	a1 58       	subi	r26, 0x81	; 129
     bec:	bf 4f       	sbci	r27, 0xFF	; 255
     bee:	fe 01       	movw	r30, r28
     bf0:	ed 57       	subi	r30, 0x7D	; 125
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	80 81       	ld	r24, Z
     bf6:	91 81       	ldd	r25, Z+1	; 0x01
     bf8:	8d 93       	st	X+, r24
     bfa:	9c 93       	st	X, r25
     bfc:	fe 01       	movw	r30, r28
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	80 81       	ld	r24, Z
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <main+0x18a>
     c0a:	fe 01       	movw	r30, r28
     c0c:	e1 58       	subi	r30, 0x81	; 129
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	91 83       	std	Z+1, r25	; 0x01
     c12:	80 83       	st	Z, r24
 _delay_ms(2500);
 stop();
     c14:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>

 object_grip();
     c18:	0e 94 1e 03 	call	0x63c	; 0x63c <object_grip>
 arm_lift();
     c1c:	0e 94 2e 04 	call	0x85c	; 0x85c <arm_lift>

 back();
     c20:	0e 94 a8 01 	call	0x350	; 0x350 <back>
     c24:	fe 01       	movw	r30, r28
     c26:	e5 58       	subi	r30, 0x85	; 133
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	aa ef       	ldi	r26, 0xFA	; 250
     c30:	b3 e4       	ldi	r27, 0x43	; 67
     c32:	80 83       	st	Z, r24
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	a2 83       	std	Z+2, r26	; 0x02
     c38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c3a:	8e 01       	movw	r16, r28
     c3c:	09 58       	subi	r16, 0x89	; 137
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	fe 01       	movw	r30, r28
     c42:	e5 58       	subi	r30, 0x85	; 133
     c44:	ff 4f       	sbci	r31, 0xFF	; 255
     c46:	60 81       	ld	r22, Z
     c48:	71 81       	ldd	r23, Z+1	; 0x01
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	93 81       	ldd	r25, Z+3	; 0x03
     c4e:	26 e6       	ldi	r18, 0x66	; 102
     c50:	36 e6       	ldi	r19, 0x66	; 102
     c52:	46 e6       	ldi	r20, 0x66	; 102
     c54:	55 e4       	ldi	r21, 0x45	; 69
     c56:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	f8 01       	movw	r30, r16
     c60:	80 83       	st	Z, r24
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	a2 83       	std	Z+2, r26	; 0x02
     c66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c68:	fe 01       	movw	r30, r28
     c6a:	e9 58       	subi	r30, 0x89	; 137
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	60 81       	ld	r22, Z
     c70:	71 81       	ldd	r23, Z+1	; 0x01
     c72:	82 81       	ldd	r24, Z+2	; 0x02
     c74:	93 81       	ldd	r25, Z+3	; 0x03
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e8       	ldi	r20, 0x80	; 128
     c7c:	5f e3       	ldi	r21, 0x3F	; 63
     c7e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     c82:	88 23       	and	r24, r24
     c84:	44 f4       	brge	.+16     	; 0xc96 <main+0x21a>
		__ticks = 1;
     c86:	fe 01       	movw	r30, r28
     c88:	eb 58       	subi	r30, 0x8B	; 139
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	91 83       	std	Z+1, r25	; 0x01
     c92:	80 83       	st	Z, r24
     c94:	64 c0       	rjmp	.+200    	; 0xd5e <main+0x2e2>
	else if (__tmp > 65535)
     c96:	fe 01       	movw	r30, r28
     c98:	e9 58       	subi	r30, 0x89	; 137
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	60 81       	ld	r22, Z
     c9e:	71 81       	ldd	r23, Z+1	; 0x01
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	3f ef       	ldi	r19, 0xFF	; 255
     ca8:	4f e7       	ldi	r20, 0x7F	; 127
     caa:	57 e4       	ldi	r21, 0x47	; 71
     cac:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     cb0:	18 16       	cp	r1, r24
     cb2:	0c f0       	brlt	.+2      	; 0xcb6 <main+0x23a>
     cb4:	43 c0       	rjmp	.+134    	; 0xd3c <main+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb6:	fe 01       	movw	r30, r28
     cb8:	e5 58       	subi	r30, 0x85	; 133
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e2       	ldi	r20, 0x20	; 32
     cca:	51 e4       	ldi	r21, 0x41	; 65
     ccc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	8e 01       	movw	r16, r28
     cd6:	0b 58       	subi	r16, 0x8B	; 139
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	bc 01       	movw	r22, r24
     cdc:	cd 01       	movw	r24, r26
     cde:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	f8 01       	movw	r30, r16
     ce8:	91 83       	std	Z+1, r25	; 0x01
     cea:	80 83       	st	Z, r24
     cec:	1f c0       	rjmp	.+62     	; 0xd2c <main+0x2b0>
     cee:	fe 01       	movw	r30, r28
     cf0:	ed 58       	subi	r30, 0x8D	; 141
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	80 e7       	ldi	r24, 0x70	; 112
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	91 83       	std	Z+1, r25	; 0x01
     cfa:	80 83       	st	Z, r24
     cfc:	fe 01       	movw	r30, r28
     cfe:	ed 58       	subi	r30, 0x8D	; 141
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <main+0x28a>
     d0a:	fe 01       	movw	r30, r28
     d0c:	ed 58       	subi	r30, 0x8D	; 141
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d14:	de 01       	movw	r26, r28
     d16:	ab 58       	subi	r26, 0x8B	; 139
     d18:	bf 4f       	sbci	r27, 0xFF	; 255
     d1a:	fe 01       	movw	r30, r28
     d1c:	eb 58       	subi	r30, 0x8B	; 139
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	11 96       	adiw	r26, 0x01	; 1
     d28:	9c 93       	st	X, r25
     d2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2c:	fe 01       	movw	r30, r28
     d2e:	eb 58       	subi	r30, 0x8B	; 139
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	80 81       	ld	r24, Z
     d34:	91 81       	ldd	r25, Z+1	; 0x01
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	d1 f6       	brne	.-76     	; 0xcee <main+0x272>
     d3a:	27 c0       	rjmp	.+78     	; 0xd8a <main+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d3c:	8e 01       	movw	r16, r28
     d3e:	0b 58       	subi	r16, 0x8B	; 139
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	fe 01       	movw	r30, r28
     d44:	e9 58       	subi	r30, 0x89	; 137
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	f8 01       	movw	r30, r16
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
     d5e:	de 01       	movw	r26, r28
     d60:	af 58       	subi	r26, 0x8F	; 143
     d62:	bf 4f       	sbci	r27, 0xFF	; 255
     d64:	fe 01       	movw	r30, r28
     d66:	eb 58       	subi	r30, 0x8B	; 139
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	8d 93       	st	X+, r24
     d70:	9c 93       	st	X, r25
     d72:	fe 01       	movw	r30, r28
     d74:	ef 58       	subi	r30, 0x8F	; 143
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <main+0x300>
     d80:	fe 01       	movw	r30, r28
     d82:	ef 58       	subi	r30, 0x8F	; 143
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
 _delay_ms(500);
 stop();
     d8a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>
     d8e:	fe 01       	movw	r30, r28
     d90:	e3 59       	subi	r30, 0x93	; 147
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	aa e7       	ldi	r26, 0x7A	; 122
     d9a:	b3 e4       	ldi	r27, 0x43	; 67
     d9c:	80 83       	st	Z, r24
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	a2 83       	std	Z+2, r26	; 0x02
     da2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da4:	8e 01       	movw	r16, r28
     da6:	07 59       	subi	r16, 0x97	; 151
     da8:	1f 4f       	sbci	r17, 0xFF	; 255
     daa:	fe 01       	movw	r30, r28
     dac:	e3 59       	subi	r30, 0x93	; 147
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	60 81       	ld	r22, Z
     db2:	71 81       	ldd	r23, Z+1	; 0x01
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	26 e6       	ldi	r18, 0x66	; 102
     dba:	36 e6       	ldi	r19, 0x66	; 102
     dbc:	46 e6       	ldi	r20, 0x66	; 102
     dbe:	55 e4       	ldi	r21, 0x45	; 69
     dc0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	f8 01       	movw	r30, r16
     dca:	80 83       	st	Z, r24
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	a2 83       	std	Z+2, r26	; 0x02
     dd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dd2:	fe 01       	movw	r30, r28
     dd4:	e7 59       	subi	r30, 0x97	; 151
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e8       	ldi	r20, 0x80	; 128
     de6:	5f e3       	ldi	r21, 0x3F	; 63
     de8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     dec:	88 23       	and	r24, r24
     dee:	44 f4       	brge	.+16     	; 0xe00 <main+0x384>
		__ticks = 1;
     df0:	fe 01       	movw	r30, r28
     df2:	e9 59       	subi	r30, 0x99	; 153
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	91 83       	std	Z+1, r25	; 0x01
     dfc:	80 83       	st	Z, r24
     dfe:	64 c0       	rjmp	.+200    	; 0xec8 <main+0x44c>
	else if (__tmp > 65535)
     e00:	fe 01       	movw	r30, r28
     e02:	e7 59       	subi	r30, 0x97	; 151
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	60 81       	ld	r22, Z
     e08:	71 81       	ldd	r23, Z+1	; 0x01
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	0c f0       	brlt	.+2      	; 0xe20 <main+0x3a4>
     e1e:	43 c0       	rjmp	.+134    	; 0xea6 <main+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e20:	fe 01       	movw	r30, r28
     e22:	e3 59       	subi	r30, 0x93	; 147
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	60 81       	ld	r22, Z
     e28:	71 81       	ldd	r23, Z+1	; 0x01
     e2a:	82 81       	ldd	r24, Z+2	; 0x02
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e2       	ldi	r20, 0x20	; 32
     e34:	51 e4       	ldi	r21, 0x41	; 65
     e36:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	8e 01       	movw	r16, r28
     e40:	09 59       	subi	r16, 0x99	; 153
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	bc 01       	movw	r22, r24
     e46:	cd 01       	movw	r24, r26
     e48:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	f8 01       	movw	r30, r16
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	80 83       	st	Z, r24
     e56:	1f c0       	rjmp	.+62     	; 0xe96 <main+0x41a>
     e58:	fe 01       	movw	r30, r28
     e5a:	eb 59       	subi	r30, 0x9B	; 155
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	80 e7       	ldi	r24, 0x70	; 112
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
     e66:	fe 01       	movw	r30, r28
     e68:	eb 59       	subi	r30, 0x9B	; 155
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <main+0x3f4>
     e74:	fe 01       	movw	r30, r28
     e76:	eb 59       	subi	r30, 0x9B	; 155
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7e:	de 01       	movw	r26, r28
     e80:	a9 59       	subi	r26, 0x99	; 153
     e82:	bf 4f       	sbci	r27, 0xFF	; 255
     e84:	fe 01       	movw	r30, r28
     e86:	e9 59       	subi	r30, 0x99	; 153
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	80 81       	ld	r24, Z
     e8c:	91 81       	ldd	r25, Z+1	; 0x01
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	9c 93       	st	X, r25
     e94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e96:	fe 01       	movw	r30, r28
     e98:	e9 59       	subi	r30, 0x99	; 153
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	d1 f6       	brne	.-76     	; 0xe58 <main+0x3dc>
     ea4:	27 c0       	rjmp	.+78     	; 0xef4 <main+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea6:	8e 01       	movw	r16, r28
     ea8:	09 59       	subi	r16, 0x99	; 153
     eaa:	1f 4f       	sbci	r17, 0xFF	; 255
     eac:	fe 01       	movw	r30, r28
     eae:	e7 59       	subi	r30, 0x97	; 151
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	f8 01       	movw	r30, r16
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24
     ec8:	de 01       	movw	r26, r28
     eca:	ad 59       	subi	r26, 0x9D	; 157
     ecc:	bf 4f       	sbci	r27, 0xFF	; 255
     ece:	fe 01       	movw	r30, r28
     ed0:	e9 59       	subi	r30, 0x99	; 153
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	80 81       	ld	r24, Z
     ed6:	91 81       	ldd	r25, Z+1	; 0x01
     ed8:	8d 93       	st	X+, r24
     eda:	9c 93       	st	X, r25
     edc:	fe 01       	movw	r30, r28
     ede:	ed 59       	subi	r30, 0x9D	; 157
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <main+0x46a>
     eea:	fe 01       	movw	r30, r28
     eec:	ed 59       	subi	r30, 0x9D	; 157
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	80 83       	st	Z, r24
 _delay_ms(250);

 left();
     ef4:	0e 94 b2 01 	call	0x364	; 0x364 <left>
     ef8:	fe 01       	movw	r30, r28
     efa:	e1 5a       	subi	r30, 0xA1	; 161
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 ec       	ldi	r25, 0xC0	; 192
     f02:	a3 e7       	ldi	r26, 0x73	; 115
     f04:	b5 e4       	ldi	r27, 0x45	; 69
     f06:	80 83       	st	Z, r24
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	a2 83       	std	Z+2, r26	; 0x02
     f0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0e:	8e 01       	movw	r16, r28
     f10:	05 5a       	subi	r16, 0xA5	; 165
     f12:	1f 4f       	sbci	r17, 0xFF	; 255
     f14:	fe 01       	movw	r30, r28
     f16:	e1 5a       	subi	r30, 0xA1	; 161
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	26 e6       	ldi	r18, 0x66	; 102
     f24:	36 e6       	ldi	r19, 0x66	; 102
     f26:	46 e6       	ldi	r20, 0x66	; 102
     f28:	55 e4       	ldi	r21, 0x45	; 69
     f2a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	f8 01       	movw	r30, r16
     f34:	80 83       	st	Z, r24
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	a2 83       	std	Z+2, r26	; 0x02
     f3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f3c:	fe 01       	movw	r30, r28
     f3e:	e5 5a       	subi	r30, 0xA5	; 165
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	60 81       	ld	r22, Z
     f44:	71 81       	ldd	r23, Z+1	; 0x01
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e8       	ldi	r20, 0x80	; 128
     f50:	5f e3       	ldi	r21, 0x3F	; 63
     f52:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
     f56:	88 23       	and	r24, r24
     f58:	44 f4       	brge	.+16     	; 0xf6a <main+0x4ee>
		__ticks = 1;
     f5a:	fe 01       	movw	r30, r28
     f5c:	e7 5a       	subi	r30, 0xA7	; 167
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
     f68:	64 c0       	rjmp	.+200    	; 0x1032 <main+0x5b6>
	else if (__tmp > 65535)
     f6a:	fe 01       	movw	r30, r28
     f6c:	e5 5a       	subi	r30, 0xA5	; 165
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	3f ef       	ldi	r19, 0xFF	; 255
     f7c:	4f e7       	ldi	r20, 0x7F	; 127
     f7e:	57 e4       	ldi	r21, 0x47	; 71
     f80:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
     f84:	18 16       	cp	r1, r24
     f86:	0c f0       	brlt	.+2      	; 0xf8a <main+0x50e>
     f88:	43 c0       	rjmp	.+134    	; 0x1010 <main+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8a:	fe 01       	movw	r30, r28
     f8c:	e1 5a       	subi	r30, 0xA1	; 161
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e2       	ldi	r20, 0x20	; 32
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	8e 01       	movw	r16, r28
     faa:	07 5a       	subi	r16, 0xA7	; 167
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	bc 01       	movw	r22, r24
     fb0:	cd 01       	movw	r24, r26
     fb2:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	f8 01       	movw	r30, r16
     fbc:	91 83       	std	Z+1, r25	; 0x01
     fbe:	80 83       	st	Z, r24
     fc0:	1f c0       	rjmp	.+62     	; 0x1000 <main+0x584>
     fc2:	fe 01       	movw	r30, r28
     fc4:	e9 5a       	subi	r30, 0xA9	; 169
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	80 e7       	ldi	r24, 0x70	; 112
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
     fd0:	fe 01       	movw	r30, r28
     fd2:	e9 5a       	subi	r30, 0xA9	; 169
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <main+0x55e>
     fde:	fe 01       	movw	r30, r28
     fe0:	e9 5a       	subi	r30, 0xA9	; 169
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe8:	de 01       	movw	r26, r28
     fea:	a7 5a       	subi	r26, 0xA7	; 167
     fec:	bf 4f       	sbci	r27, 0xFF	; 255
     fee:	fe 01       	movw	r30, r28
     ff0:	e7 5a       	subi	r30, 0xA7	; 167
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	11 96       	adiw	r26, 0x01	; 1
     ffc:	9c 93       	st	X, r25
     ffe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1000:	fe 01       	movw	r30, r28
    1002:	e7 5a       	subi	r30, 0xA7	; 167
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	d1 f6       	brne	.-76     	; 0xfc2 <main+0x546>
    100e:	27 c0       	rjmp	.+78     	; 0x105e <main+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1010:	8e 01       	movw	r16, r28
    1012:	07 5a       	subi	r16, 0xA7	; 167
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	fe 01       	movw	r30, r28
    1018:	e5 5a       	subi	r30, 0xA5	; 165
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	60 81       	ld	r22, Z
    101e:	71 81       	ldd	r23, Z+1	; 0x01
    1020:	82 81       	ldd	r24, Z+2	; 0x02
    1022:	93 81       	ldd	r25, Z+3	; 0x03
    1024:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	f8 01       	movw	r30, r16
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
    1032:	de 01       	movw	r26, r28
    1034:	ab 5a       	subi	r26, 0xAB	; 171
    1036:	bf 4f       	sbci	r27, 0xFF	; 255
    1038:	fe 01       	movw	r30, r28
    103a:	e7 5a       	subi	r30, 0xA7	; 167
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	8d 93       	st	X+, r24
    1044:	9c 93       	st	X, r25
    1046:	fe 01       	movw	r30, r28
    1048:	eb 5a       	subi	r30, 0xAB	; 171
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	80 81       	ld	r24, Z
    104e:	91 81       	ldd	r25, Z+1	; 0x01
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <main+0x5d4>
    1054:	fe 01       	movw	r30, r28
    1056:	eb 5a       	subi	r30, 0xAB	; 171
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	80 83       	st	Z, r24
 _delay_ms(3900);
 stop();
    105e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>
    1062:	fe 01       	movw	r30, r28
    1064:	ef 5a       	subi	r30, 0xAF	; 175
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	aa e7       	ldi	r26, 0x7A	; 122
    106e:	b3 e4       	ldi	r27, 0x43	; 67
    1070:	80 83       	st	Z, r24
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	a2 83       	std	Z+2, r26	; 0x02
    1076:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	8e 01       	movw	r16, r28
    107a:	03 5b       	subi	r16, 0xB3	; 179
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	fe 01       	movw	r30, r28
    1080:	ef 5a       	subi	r30, 0xAF	; 175
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	26 e6       	ldi	r18, 0x66	; 102
    108e:	36 e6       	ldi	r19, 0x66	; 102
    1090:	46 e6       	ldi	r20, 0x66	; 102
    1092:	55 e4       	ldi	r21, 0x45	; 69
    1094:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	f8 01       	movw	r30, r16
    109e:	80 83       	st	Z, r24
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	a2 83       	std	Z+2, r26	; 0x02
    10a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10a6:	fe 01       	movw	r30, r28
    10a8:	e3 5b       	subi	r30, 0xB3	; 179
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
    10c0:	88 23       	and	r24, r24
    10c2:	44 f4       	brge	.+16     	; 0x10d4 <main+0x658>
		__ticks = 1;
    10c4:	fe 01       	movw	r30, r28
    10c6:	e5 5b       	subi	r30, 0xB5	; 181
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	80 83       	st	Z, r24
    10d2:	64 c0       	rjmp	.+200    	; 0x119c <main+0x720>
	else if (__tmp > 65535)
    10d4:	fe 01       	movw	r30, r28
    10d6:	e3 5b       	subi	r30, 0xB3	; 179
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	3f ef       	ldi	r19, 0xFF	; 255
    10e6:	4f e7       	ldi	r20, 0x7F	; 127
    10e8:	57 e4       	ldi	r21, 0x47	; 71
    10ea:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	0c f0       	brlt	.+2      	; 0x10f4 <main+0x678>
    10f2:	43 c0       	rjmp	.+134    	; 0x117a <main+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f4:	fe 01       	movw	r30, r28
    10f6:	ef 5a       	subi	r30, 0xAF	; 175
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	8e 01       	movw	r16, r28
    1114:	05 5b       	subi	r16, 0xB5	; 181
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	f8 01       	movw	r30, r16
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
    112a:	1f c0       	rjmp	.+62     	; 0x116a <main+0x6ee>
    112c:	fe 01       	movw	r30, r28
    112e:	e7 5b       	subi	r30, 0xB7	; 183
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	80 e7       	ldi	r24, 0x70	; 112
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	80 83       	st	Z, r24
    113a:	fe 01       	movw	r30, r28
    113c:	e7 5b       	subi	r30, 0xB7	; 183
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <main+0x6c8>
    1148:	fe 01       	movw	r30, r28
    114a:	e7 5b       	subi	r30, 0xB7	; 183
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	de 01       	movw	r26, r28
    1154:	a5 5b       	subi	r26, 0xB5	; 181
    1156:	bf 4f       	sbci	r27, 0xFF	; 255
    1158:	fe 01       	movw	r30, r28
    115a:	e5 5b       	subi	r30, 0xB5	; 181
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	80 81       	ld	r24, Z
    1160:	91 81       	ldd	r25, Z+1	; 0x01
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	11 96       	adiw	r26, 0x01	; 1
    1166:	9c 93       	st	X, r25
    1168:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116a:	fe 01       	movw	r30, r28
    116c:	e5 5b       	subi	r30, 0xB5	; 181
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	d1 f6       	brne	.-76     	; 0x112c <main+0x6b0>
    1178:	27 c0       	rjmp	.+78     	; 0x11c8 <main+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117a:	8e 01       	movw	r16, r28
    117c:	05 5b       	subi	r16, 0xB5	; 181
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	fe 01       	movw	r30, r28
    1182:	e3 5b       	subi	r30, 0xB3	; 179
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
    119c:	de 01       	movw	r26, r28
    119e:	a9 5b       	subi	r26, 0xB9	; 185
    11a0:	bf 4f       	sbci	r27, 0xFF	; 255
    11a2:	fe 01       	movw	r30, r28
    11a4:	e5 5b       	subi	r30, 0xB5	; 181
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 81       	ld	r24, Z
    11aa:	91 81       	ldd	r25, Z+1	; 0x01
    11ac:	8d 93       	st	X+, r24
    11ae:	9c 93       	st	X, r25
    11b0:	fe 01       	movw	r30, r28
    11b2:	e9 5b       	subi	r30, 0xB9	; 185
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	80 81       	ld	r24, Z
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <main+0x73e>
    11be:	fe 01       	movw	r30, r28
    11c0:	e9 5b       	subi	r30, 0xB9	; 185
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	80 83       	st	Z, r24
 _delay_ms(250);

 forward();
    11c8:	0e 94 9e 01 	call	0x33c	; 0x33c <forward>
    11cc:	fe 01       	movw	r30, r28
    11ce:	ed 5b       	subi	r30, 0xBD	; 189
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e4       	ldi	r25, 0x40	; 64
    11d6:	ac e1       	ldi	r26, 0x1C	; 28
    11d8:	b5 e4       	ldi	r27, 0x45	; 69
    11da:	80 83       	st	Z, r24
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	a2 83       	std	Z+2, r26	; 0x02
    11e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e2:	8e 01       	movw	r16, r28
    11e4:	01 5c       	subi	r16, 0xC1	; 193
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	fe 01       	movw	r30, r28
    11ea:	ed 5b       	subi	r30, 0xBD	; 189
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	60 81       	ld	r22, Z
    11f0:	71 81       	ldd	r23, Z+1	; 0x01
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	26 e6       	ldi	r18, 0x66	; 102
    11f8:	36 e6       	ldi	r19, 0x66	; 102
    11fa:	46 e6       	ldi	r20, 0x66	; 102
    11fc:	55 e4       	ldi	r21, 0x45	; 69
    11fe:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	f8 01       	movw	r30, r16
    1208:	80 83       	st	Z, r24
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	a2 83       	std	Z+2, r26	; 0x02
    120e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1210:	fe 01       	movw	r30, r28
    1212:	ff 96       	adiw	r30, 0x3f	; 63
    1214:	60 81       	ld	r22, Z
    1216:	71 81       	ldd	r23, Z+1	; 0x01
    1218:	82 81       	ldd	r24, Z+2	; 0x02
    121a:	93 81       	ldd	r25, Z+3	; 0x03
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
    1228:	88 23       	and	r24, r24
    122a:	2c f4       	brge	.+10     	; 0x1236 <main+0x7ba>
		__ticks = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9e af       	std	Y+62, r25	; 0x3e
    1232:	8d af       	std	Y+61, r24	; 0x3d
    1234:	46 c0       	rjmp	.+140    	; 0x12c2 <main+0x846>
	else if (__tmp > 65535)
    1236:	fe 01       	movw	r30, r28
    1238:	ff 96       	adiw	r30, 0x3f	; 63
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	3f ef       	ldi	r19, 0xFF	; 255
    1246:	4f e7       	ldi	r20, 0x7F	; 127
    1248:	57 e4       	ldi	r21, 0x47	; 71
    124a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
    124e:	18 16       	cp	r1, r24
    1250:	64 f5       	brge	.+88     	; 0x12aa <main+0x82e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1252:	fe 01       	movw	r30, r28
    1254:	ed 5b       	subi	r30, 0xBD	; 189
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	60 81       	ld	r22, Z
    125a:	71 81       	ldd	r23, Z+1	; 0x01
    125c:	82 81       	ldd	r24, Z+2	; 0x02
    125e:	93 81       	ldd	r25, Z+3	; 0x03
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e2       	ldi	r20, 0x20	; 32
    1266:	51 e4       	ldi	r21, 0x41	; 65
    1268:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	bc 01       	movw	r22, r24
    1272:	cd 01       	movw	r24, r26
    1274:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	9e af       	std	Y+62, r25	; 0x3e
    127e:	8d af       	std	Y+61, r24	; 0x3d
    1280:	0f c0       	rjmp	.+30     	; 0x12a0 <main+0x824>
    1282:	80 e7       	ldi	r24, 0x70	; 112
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	9c af       	std	Y+60, r25	; 0x3c
    1288:	8b af       	std	Y+59, r24	; 0x3b
    128a:	8b ad       	ldd	r24, Y+59	; 0x3b
    128c:	9c ad       	ldd	r25, Y+60	; 0x3c
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <main+0x812>
    1292:	9c af       	std	Y+60, r25	; 0x3c
    1294:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1296:	8d ad       	ldd	r24, Y+61	; 0x3d
    1298:	9e ad       	ldd	r25, Y+62	; 0x3e
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	9e af       	std	Y+62, r25	; 0x3e
    129e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    12a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	69 f7       	brne	.-38     	; 0x1282 <main+0x806>
    12a8:	16 c0       	rjmp	.+44     	; 0x12d6 <main+0x85a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12aa:	fe 01       	movw	r30, r28
    12ac:	ff 96       	adiw	r30, 0x3f	; 63
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	93 81       	ldd	r25, Z+3	; 0x03
    12b6:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	9e af       	std	Y+62, r25	; 0x3e
    12c0:	8d af       	std	Y+61, r24	; 0x3d
    12c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    12c6:	9a af       	std	Y+58, r25	; 0x3a
    12c8:	89 af       	std	Y+57, r24	; 0x39
    12ca:	89 ad       	ldd	r24, Y+57	; 0x39
    12cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <main+0x852>
    12d2:	9a af       	std	Y+58, r25	; 0x3a
    12d4:	89 af       	std	Y+57, r24	; 0x39
 _delay_ms(2500);
 stop();
    12d6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>

 arm_down();
    12da:	0e 94 b6 04 	call	0x96c	; 0x96c <arm_down>
 object_ungrip();
    12de:	0e 94 a6 03 	call	0x74c	; 0x74c <object_ungrip>

 back();
    12e2:	0e 94 a8 01 	call	0x350	; 0x350 <back>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	aa ef       	ldi	r26, 0xFA	; 250
    12ec:	b3 e4       	ldi	r27, 0x43	; 67
    12ee:	8d ab       	std	Y+53, r24	; 0x35
    12f0:	9e ab       	std	Y+54, r25	; 0x36
    12f2:	af ab       	std	Y+55, r26	; 0x37
    12f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f6:	6d a9       	ldd	r22, Y+53	; 0x35
    12f8:	7e a9       	ldd	r23, Y+54	; 0x36
    12fa:	8f a9       	ldd	r24, Y+55	; 0x37
    12fc:	98 ad       	ldd	r25, Y+56	; 0x38
    12fe:	26 e6       	ldi	r18, 0x66	; 102
    1300:	36 e6       	ldi	r19, 0x66	; 102
    1302:	46 e6       	ldi	r20, 0x66	; 102
    1304:	55 e4       	ldi	r21, 0x45	; 69
    1306:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	89 ab       	std	Y+49, r24	; 0x31
    1310:	9a ab       	std	Y+50, r25	; 0x32
    1312:	ab ab       	std	Y+51, r26	; 0x33
    1314:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1316:	69 a9       	ldd	r22, Y+49	; 0x31
    1318:	7a a9       	ldd	r23, Y+50	; 0x32
    131a:	8b a9       	ldd	r24, Y+51	; 0x33
    131c:	9c a9       	ldd	r25, Y+52	; 0x34
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e8       	ldi	r20, 0x80	; 128
    1324:	5f e3       	ldi	r21, 0x3F	; 63
    1326:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
    132a:	88 23       	and	r24, r24
    132c:	2c f4       	brge	.+10     	; 0x1338 <main+0x8bc>
		__ticks = 1;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	98 ab       	std	Y+48, r25	; 0x30
    1334:	8f a7       	std	Y+47, r24	; 0x2f
    1336:	3f c0       	rjmp	.+126    	; 0x13b6 <main+0x93a>
	else if (__tmp > 65535)
    1338:	69 a9       	ldd	r22, Y+49	; 0x31
    133a:	7a a9       	ldd	r23, Y+50	; 0x32
    133c:	8b a9       	ldd	r24, Y+51	; 0x33
    133e:	9c a9       	ldd	r25, Y+52	; 0x34
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	3f ef       	ldi	r19, 0xFF	; 255
    1344:	4f e7       	ldi	r20, 0x7F	; 127
    1346:	57 e4       	ldi	r21, 0x47	; 71
    1348:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
    134c:	18 16       	cp	r1, r24
    134e:	4c f5       	brge	.+82     	; 0x13a2 <main+0x926>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1350:	6d a9       	ldd	r22, Y+53	; 0x35
    1352:	7e a9       	ldd	r23, Y+54	; 0x36
    1354:	8f a9       	ldd	r24, Y+55	; 0x37
    1356:	98 ad       	ldd	r25, Y+56	; 0x38
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e2       	ldi	r20, 0x20	; 32
    135e:	51 e4       	ldi	r21, 0x41	; 65
    1360:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	bc 01       	movw	r22, r24
    136a:	cd 01       	movw	r24, r26
    136c:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	98 ab       	std	Y+48, r25	; 0x30
    1376:	8f a7       	std	Y+47, r24	; 0x2f
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <main+0x91c>
    137a:	80 e7       	ldi	r24, 0x70	; 112
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	9e a7       	std	Y+46, r25	; 0x2e
    1380:	8d a7       	std	Y+45, r24	; 0x2d
    1382:	8d a5       	ldd	r24, Y+45	; 0x2d
    1384:	9e a5       	ldd	r25, Y+46	; 0x2e
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <main+0x90a>
    138a:	9e a7       	std	Y+46, r25	; 0x2e
    138c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1390:	98 a9       	ldd	r25, Y+48	; 0x30
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	98 ab       	std	Y+48, r25	; 0x30
    1396:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1398:	8f a5       	ldd	r24, Y+47	; 0x2f
    139a:	98 a9       	ldd	r25, Y+48	; 0x30
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	69 f7       	brne	.-38     	; 0x137a <main+0x8fe>
    13a0:	14 c0       	rjmp	.+40     	; 0x13ca <main+0x94e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a2:	69 a9       	ldd	r22, Y+49	; 0x31
    13a4:	7a a9       	ldd	r23, Y+50	; 0x32
    13a6:	8b a9       	ldd	r24, Y+51	; 0x33
    13a8:	9c a9       	ldd	r25, Y+52	; 0x34
    13aa:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	98 ab       	std	Y+48, r25	; 0x30
    13b4:	8f a7       	std	Y+47, r24	; 0x2f
    13b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b8:	98 a9       	ldd	r25, Y+48	; 0x30
    13ba:	9c a7       	std	Y+44, r25	; 0x2c
    13bc:	8b a7       	std	Y+43, r24	; 0x2b
    13be:	8b a5       	ldd	r24, Y+43	; 0x2b
    13c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <main+0x946>
    13c6:	9c a7       	std	Y+44, r25	; 0x2c
    13c8:	8b a7       	std	Y+43, r24	; 0x2b
 _delay_ms(500);
 stop();
    13ca:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	aa e7       	ldi	r26, 0x7A	; 122
    13d4:	b3 e4       	ldi	r27, 0x43	; 67
    13d6:	8f a3       	std	Y+39, r24	; 0x27
    13d8:	98 a7       	std	Y+40, r25	; 0x28
    13da:	a9 a7       	std	Y+41, r26	; 0x29
    13dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13de:	6f a1       	ldd	r22, Y+39	; 0x27
    13e0:	78 a5       	ldd	r23, Y+40	; 0x28
    13e2:	89 a5       	ldd	r24, Y+41	; 0x29
    13e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    13e6:	26 e6       	ldi	r18, 0x66	; 102
    13e8:	36 e6       	ldi	r19, 0x66	; 102
    13ea:	46 e6       	ldi	r20, 0x66	; 102
    13ec:	55 e4       	ldi	r21, 0x45	; 69
    13ee:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	8b a3       	std	Y+35, r24	; 0x23
    13f8:	9c a3       	std	Y+36, r25	; 0x24
    13fa:	ad a3       	std	Y+37, r26	; 0x25
    13fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1400:	7c a1       	ldd	r23, Y+36	; 0x24
    1402:	8d a1       	ldd	r24, Y+37	; 0x25
    1404:	9e a1       	ldd	r25, Y+38	; 0x26
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
    1412:	88 23       	and	r24, r24
    1414:	2c f4       	brge	.+10     	; 0x1420 <main+0x9a4>
		__ticks = 1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	9a a3       	std	Y+34, r25	; 0x22
    141c:	89 a3       	std	Y+33, r24	; 0x21
    141e:	3f c0       	rjmp	.+126    	; 0x149e <main+0xa22>
	else if (__tmp > 65535)
    1420:	6b a1       	ldd	r22, Y+35	; 0x23
    1422:	7c a1       	ldd	r23, Y+36	; 0x24
    1424:	8d a1       	ldd	r24, Y+37	; 0x25
    1426:	9e a1       	ldd	r25, Y+38	; 0x26
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	3f ef       	ldi	r19, 0xFF	; 255
    142c:	4f e7       	ldi	r20, 0x7F	; 127
    142e:	57 e4       	ldi	r21, 0x47	; 71
    1430:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
    1434:	18 16       	cp	r1, r24
    1436:	4c f5       	brge	.+82     	; 0x148a <main+0xa0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1438:	6f a1       	ldd	r22, Y+39	; 0x27
    143a:	78 a5       	ldd	r23, Y+40	; 0x28
    143c:	89 a5       	ldd	r24, Y+41	; 0x29
    143e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
    1446:	51 e4       	ldi	r21, 0x41	; 65
    1448:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9a a3       	std	Y+34, r25	; 0x22
    145e:	89 a3       	std	Y+33, r24	; 0x21
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <main+0xa04>
    1462:	80 e7       	ldi	r24, 0x70	; 112
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	98 a3       	std	Y+32, r25	; 0x20
    1468:	8f 8f       	std	Y+31, r24	; 0x1f
    146a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    146c:	98 a1       	ldd	r25, Y+32	; 0x20
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <main+0x9f2>
    1472:	98 a3       	std	Y+32, r25	; 0x20
    1474:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	89 a1       	ldd	r24, Y+33	; 0x21
    1478:	9a a1       	ldd	r25, Y+34	; 0x22
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	9a a3       	std	Y+34, r25	; 0x22
    147e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1480:	89 a1       	ldd	r24, Y+33	; 0x21
    1482:	9a a1       	ldd	r25, Y+34	; 0x22
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	69 f7       	brne	.-38     	; 0x1462 <main+0x9e6>
    1488:	14 c0       	rjmp	.+40     	; 0x14b2 <main+0xa36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148a:	6b a1       	ldd	r22, Y+35	; 0x23
    148c:	7c a1       	ldd	r23, Y+36	; 0x24
    148e:	8d a1       	ldd	r24, Y+37	; 0x25
    1490:	9e a1       	ldd	r25, Y+38	; 0x26
    1492:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	9a a3       	std	Y+34, r25	; 0x22
    149c:	89 a3       	std	Y+33, r24	; 0x21
    149e:	89 a1       	ldd	r24, Y+33	; 0x21
    14a0:	9a a1       	ldd	r25, Y+34	; 0x22
    14a2:	9e 8f       	std	Y+30, r25	; 0x1e
    14a4:	8d 8f       	std	Y+29, r24	; 0x1d
    14a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <main+0xa2e>
    14ae:	9e 8f       	std	Y+30, r25	; 0x1e
    14b0:	8d 8f       	std	Y+29, r24	; 0x1d
 _delay_ms(250);

 left();
    14b2:	0e 94 b2 01 	call	0x364	; 0x364 <left>
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 ec       	ldi	r25, 0xC0	; 192
    14ba:	a3 e7       	ldi	r26, 0x73	; 115
    14bc:	b5 e4       	ldi	r27, 0x45	; 69
    14be:	89 8f       	std	Y+25, r24	; 0x19
    14c0:	9a 8f       	std	Y+26, r25	; 0x1a
    14c2:	ab 8f       	std	Y+27, r26	; 0x1b
    14c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c6:	69 8d       	ldd	r22, Y+25	; 0x19
    14c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ce:	26 e6       	ldi	r18, 0x66	; 102
    14d0:	36 e6       	ldi	r19, 0x66	; 102
    14d2:	46 e6       	ldi	r20, 0x66	; 102
    14d4:	55 e4       	ldi	r21, 0x45	; 69
    14d6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	8d 8b       	std	Y+21, r24	; 0x15
    14e0:	9e 8b       	std	Y+22, r25	; 0x16
    14e2:	af 8b       	std	Y+23, r26	; 0x17
    14e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14e6:	6d 89       	ldd	r22, Y+21	; 0x15
    14e8:	7e 89       	ldd	r23, Y+22	; 0x16
    14ea:	8f 89       	ldd	r24, Y+23	; 0x17
    14ec:	98 8d       	ldd	r25, Y+24	; 0x18
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	2c f4       	brge	.+10     	; 0x1508 <main+0xa8c>
		__ticks = 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9c 8b       	std	Y+20, r25	; 0x14
    1504:	8b 8b       	std	Y+19, r24	; 0x13
    1506:	3f c0       	rjmp	.+126    	; 0x1586 <main+0xb0a>
	else if (__tmp > 65535)
    1508:	6d 89       	ldd	r22, Y+21	; 0x15
    150a:	7e 89       	ldd	r23, Y+22	; 0x16
    150c:	8f 89       	ldd	r24, Y+23	; 0x17
    150e:	98 8d       	ldd	r25, Y+24	; 0x18
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	3f ef       	ldi	r19, 0xFF	; 255
    1514:	4f e7       	ldi	r20, 0x7F	; 127
    1516:	57 e4       	ldi	r21, 0x47	; 71
    1518:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
    151c:	18 16       	cp	r1, r24
    151e:	4c f5       	brge	.+82     	; 0x1572 <main+0xaf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1520:	69 8d       	ldd	r22, Y+25	; 0x19
    1522:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1524:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1526:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e2       	ldi	r20, 0x20	; 32
    152e:	51 e4       	ldi	r21, 0x41	; 65
    1530:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9c 8b       	std	Y+20, r25	; 0x14
    1546:	8b 8b       	std	Y+19, r24	; 0x13
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <main+0xaec>
    154a:	80 e7       	ldi	r24, 0x70	; 112
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	9a 8b       	std	Y+18, r25	; 0x12
    1550:	89 8b       	std	Y+17, r24	; 0x11
    1552:	89 89       	ldd	r24, Y+17	; 0x11
    1554:	9a 89       	ldd	r25, Y+18	; 0x12
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <main+0xada>
    155a:	9a 8b       	std	Y+18, r25	; 0x12
    155c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155e:	8b 89       	ldd	r24, Y+19	; 0x13
    1560:	9c 89       	ldd	r25, Y+20	; 0x14
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	9c 8b       	std	Y+20, r25	; 0x14
    1566:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1568:	8b 89       	ldd	r24, Y+19	; 0x13
    156a:	9c 89       	ldd	r25, Y+20	; 0x14
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f7       	brne	.-38     	; 0x154a <main+0xace>
    1570:	14 c0       	rjmp	.+40     	; 0x159a <main+0xb1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1572:	6d 89       	ldd	r22, Y+21	; 0x15
    1574:	7e 89       	ldd	r23, Y+22	; 0x16
    1576:	8f 89       	ldd	r24, Y+23	; 0x17
    1578:	98 8d       	ldd	r25, Y+24	; 0x18
    157a:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9c 8b       	std	Y+20, r25	; 0x14
    1584:	8b 8b       	std	Y+19, r24	; 0x13
    1586:	8b 89       	ldd	r24, Y+19	; 0x13
    1588:	9c 89       	ldd	r25, Y+20	; 0x14
    158a:	98 8b       	std	Y+16, r25	; 0x10
    158c:	8f 87       	std	Y+15, r24	; 0x0f
    158e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1590:	98 89       	ldd	r25, Y+16	; 0x10
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	f1 f7       	brne	.-4      	; 0x1592 <main+0xb16>
    1596:	98 8b       	std	Y+16, r25	; 0x10
    1598:	8f 87       	std	Y+15, r24	; 0x0f
 _delay_ms(3900);
 stop();
    159a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <stop>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	aa e7       	ldi	r26, 0x7A	; 122
    15a4:	b3 e4       	ldi	r27, 0x43	; 67
    15a6:	8b 87       	std	Y+11, r24	; 0x0b
    15a8:	9c 87       	std	Y+12, r25	; 0x0c
    15aa:	ad 87       	std	Y+13, r26	; 0x0d
    15ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b6:	26 e6       	ldi	r18, 0x66	; 102
    15b8:	36 e6       	ldi	r19, 0x66	; 102
    15ba:	46 e6       	ldi	r20, 0x66	; 102
    15bc:	55 e4       	ldi	r21, 0x45	; 69
    15be:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	8f 83       	std	Y+7, r24	; 0x07
    15c8:	98 87       	std	Y+8, r25	; 0x08
    15ca:	a9 87       	std	Y+9, r26	; 0x09
    15cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ce:	6f 81       	ldd	r22, Y+7	; 0x07
    15d0:	78 85       	ldd	r23, Y+8	; 0x08
    15d2:	89 85       	ldd	r24, Y+9	; 0x09
    15d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e8       	ldi	r20, 0x80	; 128
    15dc:	5f e3       	ldi	r21, 0x3F	; 63
    15de:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__ltsf2>
    15e2:	88 23       	and	r24, r24
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <main+0xb74>
		__ticks = 1;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	3f c0       	rjmp	.+126    	; 0x166e <main+0xbf2>
	else if (__tmp > 65535)
    15f0:	6f 81       	ldd	r22, Y+7	; 0x07
    15f2:	78 85       	ldd	r23, Y+8	; 0x08
    15f4:	89 85       	ldd	r24, Y+9	; 0x09
    15f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	3f ef       	ldi	r19, 0xFF	; 255
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	57 e4       	ldi	r21, 0x47	; 71
    1600:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__gtsf2>
    1604:	18 16       	cp	r1, r24
    1606:	4c f5       	brge	.+82     	; 0x165a <main+0xbde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1608:	6b 85       	ldd	r22, Y+11	; 0x0b
    160a:	7c 85       	ldd	r23, Y+12	; 0x0c
    160c:	8d 85       	ldd	r24, Y+13	; 0x0d
    160e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e2       	ldi	r20, 0x20	; 32
    1616:	51 e4       	ldi	r21, 0x41	; 65
    1618:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	0f c0       	rjmp	.+30     	; 0x1650 <main+0xbd4>
    1632:	80 e7       	ldi	r24, 0x70	; 112
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	9c 83       	std	Y+4, r25	; 0x04
    1638:	8b 83       	std	Y+3, r24	; 0x03
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <main+0xbc2>
    1642:	9c 83       	std	Y+4, r25	; 0x04
    1644:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	69 f7       	brne	.-38     	; 0x1632 <main+0xbb6>
    1658:	24 ca       	rjmp	.-3000   	; 0xaa2 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165a:	6f 81       	ldd	r22, Y+7	; 0x07
    165c:	78 85       	ldd	r23, Y+8	; 0x08
    165e:	89 85       	ldd	r24, Y+9	; 0x09
    1660:	9a 85       	ldd	r25, Y+10	; 0x0a
    1662:	0e 94 42 0b 	call	0x1684	; 0x1684 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <main+0xbfe>
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	0f ca       	rjmp	.-3042   	; 0xaa2 <main+0x26>

00001684 <__fixunssfsi>:
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	7b 01       	movw	r14, r22
    168e:	8c 01       	movw	r16, r24
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	5f e4       	ldi	r21, 0x4F	; 79
    1698:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__gesf2>
    169c:	88 23       	and	r24, r24
    169e:	8c f0       	brlt	.+34     	; 0x16c2 <__fixunssfsi+0x3e>
    16a0:	c8 01       	movw	r24, r16
    16a2:	b7 01       	movw	r22, r14
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	5f e4       	ldi	r21, 0x4F	; 79
    16ac:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__subsf3>
    16b0:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__fixsfsi>
    16b4:	9b 01       	movw	r18, r22
    16b6:	ac 01       	movw	r20, r24
    16b8:	20 50       	subi	r18, 0x00	; 0
    16ba:	30 40       	sbci	r19, 0x00	; 0
    16bc:	40 40       	sbci	r20, 0x00	; 0
    16be:	50 48       	sbci	r21, 0x80	; 128
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <__fixunssfsi+0x4a>
    16c2:	c8 01       	movw	r24, r16
    16c4:	b7 01       	movw	r22, r14
    16c6:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__fixsfsi>
    16ca:	9b 01       	movw	r18, r22
    16cc:	ac 01       	movw	r20, r24
    16ce:	b9 01       	movw	r22, r18
    16d0:	ca 01       	movw	r24, r20
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	08 95       	ret

000016dc <_fpadd_parts>:
    16dc:	a0 e0       	ldi	r26, 0x00	; 0
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e4 e7       	ldi	r30, 0x74	; 116
    16e2:	fb e0       	ldi	r31, 0x0B	; 11
    16e4:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__prologue_saves__>
    16e8:	dc 01       	movw	r26, r24
    16ea:	2b 01       	movw	r4, r22
    16ec:	fa 01       	movw	r30, r20
    16ee:	9c 91       	ld	r25, X
    16f0:	92 30       	cpi	r25, 0x02	; 2
    16f2:	08 f4       	brcc	.+2      	; 0x16f6 <_fpadd_parts+0x1a>
    16f4:	39 c1       	rjmp	.+626    	; 0x1968 <_fpadd_parts+0x28c>
    16f6:	eb 01       	movw	r28, r22
    16f8:	88 81       	ld	r24, Y
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	08 f4       	brcc	.+2      	; 0x1700 <_fpadd_parts+0x24>
    16fe:	33 c1       	rjmp	.+614    	; 0x1966 <_fpadd_parts+0x28a>
    1700:	94 30       	cpi	r25, 0x04	; 4
    1702:	69 f4       	brne	.+26     	; 0x171e <_fpadd_parts+0x42>
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	09 f0       	breq	.+2      	; 0x170a <_fpadd_parts+0x2e>
    1708:	2f c1       	rjmp	.+606    	; 0x1968 <_fpadd_parts+0x28c>
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	9c 91       	ld	r25, X
    170e:	11 97       	sbiw	r26, 0x01	; 1
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	98 17       	cp	r25, r24
    1714:	09 f4       	brne	.+2      	; 0x1718 <_fpadd_parts+0x3c>
    1716:	28 c1       	rjmp	.+592    	; 0x1968 <_fpadd_parts+0x28c>
    1718:	a0 e0       	ldi	r26, 0x00	; 0
    171a:	b2 e0       	ldi	r27, 0x02	; 2
    171c:	25 c1       	rjmp	.+586    	; 0x1968 <_fpadd_parts+0x28c>
    171e:	84 30       	cpi	r24, 0x04	; 4
    1720:	09 f4       	brne	.+2      	; 0x1724 <_fpadd_parts+0x48>
    1722:	21 c1       	rjmp	.+578    	; 0x1966 <_fpadd_parts+0x28a>
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	a9 f4       	brne	.+42     	; 0x1752 <_fpadd_parts+0x76>
    1728:	92 30       	cpi	r25, 0x02	; 2
    172a:	09 f0       	breq	.+2      	; 0x172e <_fpadd_parts+0x52>
    172c:	1d c1       	rjmp	.+570    	; 0x1968 <_fpadd_parts+0x28c>
    172e:	9a 01       	movw	r18, r20
    1730:	ad 01       	movw	r20, r26
    1732:	88 e0       	ldi	r24, 0x08	; 8
    1734:	ea 01       	movw	r28, r20
    1736:	09 90       	ld	r0, Y+
    1738:	ae 01       	movw	r20, r28
    173a:	e9 01       	movw	r28, r18
    173c:	09 92       	st	Y+, r0
    173e:	9e 01       	movw	r18, r28
    1740:	81 50       	subi	r24, 0x01	; 1
    1742:	c1 f7       	brne	.-16     	; 0x1734 <_fpadd_parts+0x58>
    1744:	e2 01       	movw	r28, r4
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	11 96       	adiw	r26, 0x01	; 1
    174a:	9c 91       	ld	r25, X
    174c:	89 23       	and	r24, r25
    174e:	81 83       	std	Z+1, r24	; 0x01
    1750:	08 c1       	rjmp	.+528    	; 0x1962 <_fpadd_parts+0x286>
    1752:	92 30       	cpi	r25, 0x02	; 2
    1754:	09 f4       	brne	.+2      	; 0x1758 <_fpadd_parts+0x7c>
    1756:	07 c1       	rjmp	.+526    	; 0x1966 <_fpadd_parts+0x28a>
    1758:	12 96       	adiw	r26, 0x02	; 2
    175a:	2d 90       	ld	r2, X+
    175c:	3c 90       	ld	r3, X
    175e:	13 97       	sbiw	r26, 0x03	; 3
    1760:	eb 01       	movw	r28, r22
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	9b 81       	ldd	r25, Y+3	; 0x03
    1766:	14 96       	adiw	r26, 0x04	; 4
    1768:	ad 90       	ld	r10, X+
    176a:	bd 90       	ld	r11, X+
    176c:	cd 90       	ld	r12, X+
    176e:	dc 90       	ld	r13, X
    1770:	17 97       	sbiw	r26, 0x07	; 7
    1772:	ec 80       	ldd	r14, Y+4	; 0x04
    1774:	fd 80       	ldd	r15, Y+5	; 0x05
    1776:	0e 81       	ldd	r16, Y+6	; 0x06
    1778:	1f 81       	ldd	r17, Y+7	; 0x07
    177a:	91 01       	movw	r18, r2
    177c:	28 1b       	sub	r18, r24
    177e:	39 0b       	sbc	r19, r25
    1780:	b9 01       	movw	r22, r18
    1782:	37 ff       	sbrs	r19, 7
    1784:	04 c0       	rjmp	.+8      	; 0x178e <_fpadd_parts+0xb2>
    1786:	66 27       	eor	r22, r22
    1788:	77 27       	eor	r23, r23
    178a:	62 1b       	sub	r22, r18
    178c:	73 0b       	sbc	r23, r19
    178e:	60 32       	cpi	r22, 0x20	; 32
    1790:	71 05       	cpc	r23, r1
    1792:	0c f0       	brlt	.+2      	; 0x1796 <_fpadd_parts+0xba>
    1794:	61 c0       	rjmp	.+194    	; 0x1858 <_fpadd_parts+0x17c>
    1796:	12 16       	cp	r1, r18
    1798:	13 06       	cpc	r1, r19
    179a:	6c f5       	brge	.+90     	; 0x17f6 <_fpadd_parts+0x11a>
    179c:	37 01       	movw	r6, r14
    179e:	48 01       	movw	r8, r16
    17a0:	06 2e       	mov	r0, r22
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <_fpadd_parts+0xd0>
    17a4:	96 94       	lsr	r9
    17a6:	87 94       	ror	r8
    17a8:	77 94       	ror	r7
    17aa:	67 94       	ror	r6
    17ac:	0a 94       	dec	r0
    17ae:	d2 f7       	brpl	.-12     	; 0x17a4 <_fpadd_parts+0xc8>
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <_fpadd_parts+0xe6>
    17ba:	22 0f       	add	r18, r18
    17bc:	33 1f       	adc	r19, r19
    17be:	44 1f       	adc	r20, r20
    17c0:	55 1f       	adc	r21, r21
    17c2:	6a 95       	dec	r22
    17c4:	d2 f7       	brpl	.-12     	; 0x17ba <_fpadd_parts+0xde>
    17c6:	21 50       	subi	r18, 0x01	; 1
    17c8:	30 40       	sbci	r19, 0x00	; 0
    17ca:	40 40       	sbci	r20, 0x00	; 0
    17cc:	50 40       	sbci	r21, 0x00	; 0
    17ce:	2e 21       	and	r18, r14
    17d0:	3f 21       	and	r19, r15
    17d2:	40 23       	and	r20, r16
    17d4:	51 23       	and	r21, r17
    17d6:	21 15       	cp	r18, r1
    17d8:	31 05       	cpc	r19, r1
    17da:	41 05       	cpc	r20, r1
    17dc:	51 05       	cpc	r21, r1
    17de:	21 f0       	breq	.+8      	; 0x17e8 <_fpadd_parts+0x10c>
    17e0:	21 e0       	ldi	r18, 0x01	; 1
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	79 01       	movw	r14, r18
    17ea:	8a 01       	movw	r16, r20
    17ec:	e6 28       	or	r14, r6
    17ee:	f7 28       	or	r15, r7
    17f0:	08 29       	or	r16, r8
    17f2:	19 29       	or	r17, r9
    17f4:	3c c0       	rjmp	.+120    	; 0x186e <_fpadd_parts+0x192>
    17f6:	23 2b       	or	r18, r19
    17f8:	d1 f1       	breq	.+116    	; 0x186e <_fpadd_parts+0x192>
    17fa:	26 0e       	add	r2, r22
    17fc:	37 1e       	adc	r3, r23
    17fe:	35 01       	movw	r6, r10
    1800:	46 01       	movw	r8, r12
    1802:	06 2e       	mov	r0, r22
    1804:	04 c0       	rjmp	.+8      	; 0x180e <_fpadd_parts+0x132>
    1806:	96 94       	lsr	r9
    1808:	87 94       	ror	r8
    180a:	77 94       	ror	r7
    180c:	67 94       	ror	r6
    180e:	0a 94       	dec	r0
    1810:	d2 f7       	brpl	.-12     	; 0x1806 <_fpadd_parts+0x12a>
    1812:	21 e0       	ldi	r18, 0x01	; 1
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <_fpadd_parts+0x148>
    181c:	22 0f       	add	r18, r18
    181e:	33 1f       	adc	r19, r19
    1820:	44 1f       	adc	r20, r20
    1822:	55 1f       	adc	r21, r21
    1824:	6a 95       	dec	r22
    1826:	d2 f7       	brpl	.-12     	; 0x181c <_fpadd_parts+0x140>
    1828:	21 50       	subi	r18, 0x01	; 1
    182a:	30 40       	sbci	r19, 0x00	; 0
    182c:	40 40       	sbci	r20, 0x00	; 0
    182e:	50 40       	sbci	r21, 0x00	; 0
    1830:	2a 21       	and	r18, r10
    1832:	3b 21       	and	r19, r11
    1834:	4c 21       	and	r20, r12
    1836:	5d 21       	and	r21, r13
    1838:	21 15       	cp	r18, r1
    183a:	31 05       	cpc	r19, r1
    183c:	41 05       	cpc	r20, r1
    183e:	51 05       	cpc	r21, r1
    1840:	21 f0       	breq	.+8      	; 0x184a <_fpadd_parts+0x16e>
    1842:	21 e0       	ldi	r18, 0x01	; 1
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	59 01       	movw	r10, r18
    184c:	6a 01       	movw	r12, r20
    184e:	a6 28       	or	r10, r6
    1850:	b7 28       	or	r11, r7
    1852:	c8 28       	or	r12, r8
    1854:	d9 28       	or	r13, r9
    1856:	0b c0       	rjmp	.+22     	; 0x186e <_fpadd_parts+0x192>
    1858:	82 15       	cp	r24, r2
    185a:	93 05       	cpc	r25, r3
    185c:	2c f0       	brlt	.+10     	; 0x1868 <_fpadd_parts+0x18c>
    185e:	1c 01       	movw	r2, r24
    1860:	aa 24       	eor	r10, r10
    1862:	bb 24       	eor	r11, r11
    1864:	65 01       	movw	r12, r10
    1866:	03 c0       	rjmp	.+6      	; 0x186e <_fpadd_parts+0x192>
    1868:	ee 24       	eor	r14, r14
    186a:	ff 24       	eor	r15, r15
    186c:	87 01       	movw	r16, r14
    186e:	11 96       	adiw	r26, 0x01	; 1
    1870:	9c 91       	ld	r25, X
    1872:	d2 01       	movw	r26, r4
    1874:	11 96       	adiw	r26, 0x01	; 1
    1876:	8c 91       	ld	r24, X
    1878:	98 17       	cp	r25, r24
    187a:	09 f4       	brne	.+2      	; 0x187e <_fpadd_parts+0x1a2>
    187c:	45 c0       	rjmp	.+138    	; 0x1908 <_fpadd_parts+0x22c>
    187e:	99 23       	and	r25, r25
    1880:	39 f0       	breq	.+14     	; 0x1890 <_fpadd_parts+0x1b4>
    1882:	a8 01       	movw	r20, r16
    1884:	97 01       	movw	r18, r14
    1886:	2a 19       	sub	r18, r10
    1888:	3b 09       	sbc	r19, r11
    188a:	4c 09       	sbc	r20, r12
    188c:	5d 09       	sbc	r21, r13
    188e:	06 c0       	rjmp	.+12     	; 0x189c <_fpadd_parts+0x1c0>
    1890:	a6 01       	movw	r20, r12
    1892:	95 01       	movw	r18, r10
    1894:	2e 19       	sub	r18, r14
    1896:	3f 09       	sbc	r19, r15
    1898:	40 0b       	sbc	r20, r16
    189a:	51 0b       	sbc	r21, r17
    189c:	57 fd       	sbrc	r21, 7
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <_fpadd_parts+0x1d4>
    18a0:	11 82       	std	Z+1, r1	; 0x01
    18a2:	33 82       	std	Z+3, r3	; 0x03
    18a4:	22 82       	std	Z+2, r2	; 0x02
    18a6:	24 83       	std	Z+4, r18	; 0x04
    18a8:	35 83       	std	Z+5, r19	; 0x05
    18aa:	46 83       	std	Z+6, r20	; 0x06
    18ac:	57 83       	std	Z+7, r21	; 0x07
    18ae:	1d c0       	rjmp	.+58     	; 0x18ea <_fpadd_parts+0x20e>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	81 83       	std	Z+1, r24	; 0x01
    18b4:	33 82       	std	Z+3, r3	; 0x03
    18b6:	22 82       	std	Z+2, r2	; 0x02
    18b8:	88 27       	eor	r24, r24
    18ba:	99 27       	eor	r25, r25
    18bc:	dc 01       	movw	r26, r24
    18be:	82 1b       	sub	r24, r18
    18c0:	93 0b       	sbc	r25, r19
    18c2:	a4 0b       	sbc	r26, r20
    18c4:	b5 0b       	sbc	r27, r21
    18c6:	84 83       	std	Z+4, r24	; 0x04
    18c8:	95 83       	std	Z+5, r25	; 0x05
    18ca:	a6 83       	std	Z+6, r26	; 0x06
    18cc:	b7 83       	std	Z+7, r27	; 0x07
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <_fpadd_parts+0x20e>
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	44 1f       	adc	r20, r20
    18d6:	55 1f       	adc	r21, r21
    18d8:	24 83       	std	Z+4, r18	; 0x04
    18da:	35 83       	std	Z+5, r19	; 0x05
    18dc:	46 83       	std	Z+6, r20	; 0x06
    18de:	57 83       	std	Z+7, r21	; 0x07
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	93 83       	std	Z+3, r25	; 0x03
    18e8:	82 83       	std	Z+2, r24	; 0x02
    18ea:	24 81       	ldd	r18, Z+4	; 0x04
    18ec:	35 81       	ldd	r19, Z+5	; 0x05
    18ee:	46 81       	ldd	r20, Z+6	; 0x06
    18f0:	57 81       	ldd	r21, Z+7	; 0x07
    18f2:	da 01       	movw	r26, r20
    18f4:	c9 01       	movw	r24, r18
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	a1 09       	sbc	r26, r1
    18fa:	b1 09       	sbc	r27, r1
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1900:	af 4f       	sbci	r26, 0xFF	; 255
    1902:	bf 43       	sbci	r27, 0x3F	; 63
    1904:	28 f3       	brcs	.-54     	; 0x18d0 <_fpadd_parts+0x1f4>
    1906:	0b c0       	rjmp	.+22     	; 0x191e <_fpadd_parts+0x242>
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	33 82       	std	Z+3, r3	; 0x03
    190c:	22 82       	std	Z+2, r2	; 0x02
    190e:	ea 0c       	add	r14, r10
    1910:	fb 1c       	adc	r15, r11
    1912:	0c 1d       	adc	r16, r12
    1914:	1d 1d       	adc	r17, r13
    1916:	e4 82       	std	Z+4, r14	; 0x04
    1918:	f5 82       	std	Z+5, r15	; 0x05
    191a:	06 83       	std	Z+6, r16	; 0x06
    191c:	17 83       	std	Z+7, r17	; 0x07
    191e:	83 e0       	ldi	r24, 0x03	; 3
    1920:	80 83       	st	Z, r24
    1922:	24 81       	ldd	r18, Z+4	; 0x04
    1924:	35 81       	ldd	r19, Z+5	; 0x05
    1926:	46 81       	ldd	r20, Z+6	; 0x06
    1928:	57 81       	ldd	r21, Z+7	; 0x07
    192a:	57 ff       	sbrs	r21, 7
    192c:	1a c0       	rjmp	.+52     	; 0x1962 <_fpadd_parts+0x286>
    192e:	c9 01       	movw	r24, r18
    1930:	aa 27       	eor	r26, r26
    1932:	97 fd       	sbrc	r25, 7
    1934:	a0 95       	com	r26
    1936:	ba 2f       	mov	r27, r26
    1938:	81 70       	andi	r24, 0x01	; 1
    193a:	90 70       	andi	r25, 0x00	; 0
    193c:	a0 70       	andi	r26, 0x00	; 0
    193e:	b0 70       	andi	r27, 0x00	; 0
    1940:	56 95       	lsr	r21
    1942:	47 95       	ror	r20
    1944:	37 95       	ror	r19
    1946:	27 95       	ror	r18
    1948:	82 2b       	or	r24, r18
    194a:	93 2b       	or	r25, r19
    194c:	a4 2b       	or	r26, r20
    194e:	b5 2b       	or	r27, r21
    1950:	84 83       	std	Z+4, r24	; 0x04
    1952:	95 83       	std	Z+5, r25	; 0x05
    1954:	a6 83       	std	Z+6, r26	; 0x06
    1956:	b7 83       	std	Z+7, r27	; 0x07
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	01 96       	adiw	r24, 0x01	; 1
    195e:	93 83       	std	Z+3, r25	; 0x03
    1960:	82 83       	std	Z+2, r24	; 0x02
    1962:	df 01       	movw	r26, r30
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <_fpadd_parts+0x28c>
    1966:	d2 01       	movw	r26, r4
    1968:	cd 01       	movw	r24, r26
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	e2 e1       	ldi	r30, 0x12	; 18
    1970:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__epilogue_restores__>

00001974 <__subsf3>:
    1974:	a0 e2       	ldi	r26, 0x20	; 32
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e0 ec       	ldi	r30, 0xC0	; 192
    197a:	fc e0       	ldi	r31, 0x0C	; 12
    197c:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__prologue_saves__+0x18>
    1980:	69 83       	std	Y+1, r22	; 0x01
    1982:	7a 83       	std	Y+2, r23	; 0x02
    1984:	8b 83       	std	Y+3, r24	; 0x03
    1986:	9c 83       	std	Y+4, r25	; 0x04
    1988:	2d 83       	std	Y+5, r18	; 0x05
    198a:	3e 83       	std	Y+6, r19	; 0x06
    198c:	4f 83       	std	Y+7, r20	; 0x07
    198e:	58 87       	std	Y+8, r21	; 0x08
    1990:	e9 e0       	ldi	r30, 0x09	; 9
    1992:	ee 2e       	mov	r14, r30
    1994:	f1 2c       	mov	r15, r1
    1996:	ec 0e       	add	r14, r28
    1998:	fd 1e       	adc	r15, r29
    199a:	ce 01       	movw	r24, r28
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	b7 01       	movw	r22, r14
    19a0:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    19a4:	8e 01       	movw	r16, r28
    19a6:	0f 5e       	subi	r16, 0xEF	; 239
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
    19aa:	ce 01       	movw	r24, r28
    19ac:	05 96       	adiw	r24, 0x05	; 5
    19ae:	b8 01       	movw	r22, r16
    19b0:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    19b4:	8a 89       	ldd	r24, Y+18	; 0x12
    19b6:	91 e0       	ldi	r25, 0x01	; 1
    19b8:	89 27       	eor	r24, r25
    19ba:	8a 8b       	std	Y+18, r24	; 0x12
    19bc:	c7 01       	movw	r24, r14
    19be:	b8 01       	movw	r22, r16
    19c0:	ae 01       	movw	r20, r28
    19c2:	47 5e       	subi	r20, 0xE7	; 231
    19c4:	5f 4f       	sbci	r21, 0xFF	; 255
    19c6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_fpadd_parts>
    19ca:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__pack_f>
    19ce:	a0 96       	adiw	r28, 0x20	; 32
    19d0:	e6 e0       	ldi	r30, 0x06	; 6
    19d2:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__epilogue_restores__+0x18>

000019d6 <__addsf3>:
    19d6:	a0 e2       	ldi	r26, 0x20	; 32
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e1 ef       	ldi	r30, 0xF1	; 241
    19dc:	fc e0       	ldi	r31, 0x0C	; 12
    19de:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__prologue_saves__+0x18>
    19e2:	69 83       	std	Y+1, r22	; 0x01
    19e4:	7a 83       	std	Y+2, r23	; 0x02
    19e6:	8b 83       	std	Y+3, r24	; 0x03
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	2d 83       	std	Y+5, r18	; 0x05
    19ec:	3e 83       	std	Y+6, r19	; 0x06
    19ee:	4f 83       	std	Y+7, r20	; 0x07
    19f0:	58 87       	std	Y+8, r21	; 0x08
    19f2:	f9 e0       	ldi	r31, 0x09	; 9
    19f4:	ef 2e       	mov	r14, r31
    19f6:	f1 2c       	mov	r15, r1
    19f8:	ec 0e       	add	r14, r28
    19fa:	fd 1e       	adc	r15, r29
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	b7 01       	movw	r22, r14
    1a02:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1a06:	8e 01       	movw	r16, r28
    1a08:	0f 5e       	subi	r16, 0xEF	; 239
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	05 96       	adiw	r24, 0x05	; 5
    1a10:	b8 01       	movw	r22, r16
    1a12:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1a16:	c7 01       	movw	r24, r14
    1a18:	b8 01       	movw	r22, r16
    1a1a:	ae 01       	movw	r20, r28
    1a1c:	47 5e       	subi	r20, 0xE7	; 231
    1a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a20:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_fpadd_parts>
    1a24:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__pack_f>
    1a28:	a0 96       	adiw	r28, 0x20	; 32
    1a2a:	e6 e0       	ldi	r30, 0x06	; 6
    1a2c:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__epilogue_restores__+0x18>

00001a30 <__mulsf3>:
    1a30:	a0 e2       	ldi	r26, 0x20	; 32
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	ee e1       	ldi	r30, 0x1E	; 30
    1a36:	fd e0       	ldi	r31, 0x0D	; 13
    1a38:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__prologue_saves__>
    1a3c:	69 83       	std	Y+1, r22	; 0x01
    1a3e:	7a 83       	std	Y+2, r23	; 0x02
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	2d 83       	std	Y+5, r18	; 0x05
    1a46:	3e 83       	std	Y+6, r19	; 0x06
    1a48:	4f 83       	std	Y+7, r20	; 0x07
    1a4a:	58 87       	std	Y+8, r21	; 0x08
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	be 01       	movw	r22, r28
    1a52:	67 5f       	subi	r22, 0xF7	; 247
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	05 96       	adiw	r24, 0x05	; 5
    1a5e:	be 01       	movw	r22, r28
    1a60:	6f 5e       	subi	r22, 0xEF	; 239
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1a68:	99 85       	ldd	r25, Y+9	; 0x09
    1a6a:	92 30       	cpi	r25, 0x02	; 2
    1a6c:	88 f0       	brcs	.+34     	; 0x1a90 <__mulsf3+0x60>
    1a6e:	89 89       	ldd	r24, Y+17	; 0x11
    1a70:	82 30       	cpi	r24, 0x02	; 2
    1a72:	c8 f0       	brcs	.+50     	; 0x1aa6 <__mulsf3+0x76>
    1a74:	94 30       	cpi	r25, 0x04	; 4
    1a76:	19 f4       	brne	.+6      	; 0x1a7e <__mulsf3+0x4e>
    1a78:	82 30       	cpi	r24, 0x02	; 2
    1a7a:	51 f4       	brne	.+20     	; 0x1a90 <__mulsf3+0x60>
    1a7c:	04 c0       	rjmp	.+8      	; 0x1a86 <__mulsf3+0x56>
    1a7e:	84 30       	cpi	r24, 0x04	; 4
    1a80:	29 f4       	brne	.+10     	; 0x1a8c <__mulsf3+0x5c>
    1a82:	92 30       	cpi	r25, 0x02	; 2
    1a84:	81 f4       	brne	.+32     	; 0x1aa6 <__mulsf3+0x76>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	92 e0       	ldi	r25, 0x02	; 2
    1a8a:	c6 c0       	rjmp	.+396    	; 0x1c18 <__mulsf3+0x1e8>
    1a8c:	92 30       	cpi	r25, 0x02	; 2
    1a8e:	49 f4       	brne	.+18     	; 0x1aa2 <__mulsf3+0x72>
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	8a 89       	ldd	r24, Y+18	; 0x12
    1a96:	98 13       	cpse	r25, r24
    1a98:	21 e0       	ldi	r18, 0x01	; 1
    1a9a:	2a 87       	std	Y+10, r18	; 0x0a
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	09 96       	adiw	r24, 0x09	; 9
    1aa0:	bb c0       	rjmp	.+374    	; 0x1c18 <__mulsf3+0x1e8>
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	49 f4       	brne	.+18     	; 0x1ab8 <__mulsf3+0x88>
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	8a 89       	ldd	r24, Y+18	; 0x12
    1aac:	98 13       	cpse	r25, r24
    1aae:	21 e0       	ldi	r18, 0x01	; 1
    1ab0:	2a 8b       	std	Y+18, r18	; 0x12
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	41 96       	adiw	r24, 0x11	; 17
    1ab6:	b0 c0       	rjmp	.+352    	; 0x1c18 <__mulsf3+0x1e8>
    1ab8:	2d 84       	ldd	r2, Y+13	; 0x0d
    1aba:	3e 84       	ldd	r3, Y+14	; 0x0e
    1abc:	4f 84       	ldd	r4, Y+15	; 0x0f
    1abe:	58 88       	ldd	r5, Y+16	; 0x10
    1ac0:	6d 88       	ldd	r6, Y+21	; 0x15
    1ac2:	7e 88       	ldd	r7, Y+22	; 0x16
    1ac4:	8f 88       	ldd	r8, Y+23	; 0x17
    1ac6:	98 8c       	ldd	r9, Y+24	; 0x18
    1ac8:	ee 24       	eor	r14, r14
    1aca:	ff 24       	eor	r15, r15
    1acc:	87 01       	movw	r16, r14
    1ace:	aa 24       	eor	r10, r10
    1ad0:	bb 24       	eor	r11, r11
    1ad2:	65 01       	movw	r12, r10
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	e0 e0       	ldi	r30, 0x00	; 0
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	c1 01       	movw	r24, r2
    1ae2:	81 70       	andi	r24, 0x01	; 1
    1ae4:	90 70       	andi	r25, 0x00	; 0
    1ae6:	89 2b       	or	r24, r25
    1ae8:	e9 f0       	breq	.+58     	; 0x1b24 <__mulsf3+0xf4>
    1aea:	e6 0c       	add	r14, r6
    1aec:	f7 1c       	adc	r15, r7
    1aee:	08 1d       	adc	r16, r8
    1af0:	19 1d       	adc	r17, r9
    1af2:	9a 01       	movw	r18, r20
    1af4:	ab 01       	movw	r20, r22
    1af6:	2a 0d       	add	r18, r10
    1af8:	3b 1d       	adc	r19, r11
    1afa:	4c 1d       	adc	r20, r12
    1afc:	5d 1d       	adc	r21, r13
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 e0       	ldi	r26, 0x00	; 0
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e6 14       	cp	r14, r6
    1b08:	f7 04       	cpc	r15, r7
    1b0a:	08 05       	cpc	r16, r8
    1b0c:	19 05       	cpc	r17, r9
    1b0e:	20 f4       	brcc	.+8      	; 0x1b18 <__mulsf3+0xe8>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	ba 01       	movw	r22, r20
    1b1a:	a9 01       	movw	r20, r18
    1b1c:	48 0f       	add	r20, r24
    1b1e:	59 1f       	adc	r21, r25
    1b20:	6a 1f       	adc	r22, r26
    1b22:	7b 1f       	adc	r23, r27
    1b24:	aa 0c       	add	r10, r10
    1b26:	bb 1c       	adc	r11, r11
    1b28:	cc 1c       	adc	r12, r12
    1b2a:	dd 1c       	adc	r13, r13
    1b2c:	97 fe       	sbrs	r9, 7
    1b2e:	08 c0       	rjmp	.+16     	; 0x1b40 <__mulsf3+0x110>
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a0 e0       	ldi	r26, 0x00	; 0
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	a8 2a       	or	r10, r24
    1b3a:	b9 2a       	or	r11, r25
    1b3c:	ca 2a       	or	r12, r26
    1b3e:	db 2a       	or	r13, r27
    1b40:	31 96       	adiw	r30, 0x01	; 1
    1b42:	e0 32       	cpi	r30, 0x20	; 32
    1b44:	f1 05       	cpc	r31, r1
    1b46:	49 f0       	breq	.+18     	; 0x1b5a <__mulsf3+0x12a>
    1b48:	66 0c       	add	r6, r6
    1b4a:	77 1c       	adc	r7, r7
    1b4c:	88 1c       	adc	r8, r8
    1b4e:	99 1c       	adc	r9, r9
    1b50:	56 94       	lsr	r5
    1b52:	47 94       	ror	r4
    1b54:	37 94       	ror	r3
    1b56:	27 94       	ror	r2
    1b58:	c3 cf       	rjmp	.-122    	; 0x1ae0 <__mulsf3+0xb0>
    1b5a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b5c:	ea 89       	ldd	r30, Y+18	; 0x12
    1b5e:	2b 89       	ldd	r18, Y+19	; 0x13
    1b60:	3c 89       	ldd	r19, Y+20	; 0x14
    1b62:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b64:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b66:	28 0f       	add	r18, r24
    1b68:	39 1f       	adc	r19, r25
    1b6a:	2e 5f       	subi	r18, 0xFE	; 254
    1b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6e:	17 c0       	rjmp	.+46     	; 0x1b9e <__mulsf3+0x16e>
    1b70:	ca 01       	movw	r24, r20
    1b72:	81 70       	andi	r24, 0x01	; 1
    1b74:	90 70       	andi	r25, 0x00	; 0
    1b76:	89 2b       	or	r24, r25
    1b78:	61 f0       	breq	.+24     	; 0x1b92 <__mulsf3+0x162>
    1b7a:	16 95       	lsr	r17
    1b7c:	07 95       	ror	r16
    1b7e:	f7 94       	ror	r15
    1b80:	e7 94       	ror	r14
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a0 e0       	ldi	r26, 0x00	; 0
    1b88:	b0 e8       	ldi	r27, 0x80	; 128
    1b8a:	e8 2a       	or	r14, r24
    1b8c:	f9 2a       	or	r15, r25
    1b8e:	0a 2b       	or	r16, r26
    1b90:	1b 2b       	or	r17, r27
    1b92:	76 95       	lsr	r23
    1b94:	67 95       	ror	r22
    1b96:	57 95       	ror	r21
    1b98:	47 95       	ror	r20
    1b9a:	2f 5f       	subi	r18, 0xFF	; 255
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	77 fd       	sbrc	r23, 7
    1ba0:	e7 cf       	rjmp	.-50     	; 0x1b70 <__mulsf3+0x140>
    1ba2:	0c c0       	rjmp	.+24     	; 0x1bbc <__mulsf3+0x18c>
    1ba4:	44 0f       	add	r20, r20
    1ba6:	55 1f       	adc	r21, r21
    1ba8:	66 1f       	adc	r22, r22
    1baa:	77 1f       	adc	r23, r23
    1bac:	17 fd       	sbrc	r17, 7
    1bae:	41 60       	ori	r20, 0x01	; 1
    1bb0:	ee 0c       	add	r14, r14
    1bb2:	ff 1c       	adc	r15, r15
    1bb4:	00 1f       	adc	r16, r16
    1bb6:	11 1f       	adc	r17, r17
    1bb8:	21 50       	subi	r18, 0x01	; 1
    1bba:	30 40       	sbci	r19, 0x00	; 0
    1bbc:	40 30       	cpi	r20, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	59 07       	cpc	r21, r25
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	69 07       	cpc	r22, r25
    1bc6:	90 e4       	ldi	r25, 0x40	; 64
    1bc8:	79 07       	cpc	r23, r25
    1bca:	60 f3       	brcs	.-40     	; 0x1ba4 <__mulsf3+0x174>
    1bcc:	2b 8f       	std	Y+27, r18	; 0x1b
    1bce:	3c 8f       	std	Y+28, r19	; 0x1c
    1bd0:	db 01       	movw	r26, r22
    1bd2:	ca 01       	movw	r24, r20
    1bd4:	8f 77       	andi	r24, 0x7F	; 127
    1bd6:	90 70       	andi	r25, 0x00	; 0
    1bd8:	a0 70       	andi	r26, 0x00	; 0
    1bda:	b0 70       	andi	r27, 0x00	; 0
    1bdc:	80 34       	cpi	r24, 0x40	; 64
    1bde:	91 05       	cpc	r25, r1
    1be0:	a1 05       	cpc	r26, r1
    1be2:	b1 05       	cpc	r27, r1
    1be4:	61 f4       	brne	.+24     	; 0x1bfe <__mulsf3+0x1ce>
    1be6:	47 fd       	sbrc	r20, 7
    1be8:	0a c0       	rjmp	.+20     	; 0x1bfe <__mulsf3+0x1ce>
    1bea:	e1 14       	cp	r14, r1
    1bec:	f1 04       	cpc	r15, r1
    1bee:	01 05       	cpc	r16, r1
    1bf0:	11 05       	cpc	r17, r1
    1bf2:	29 f0       	breq	.+10     	; 0x1bfe <__mulsf3+0x1ce>
    1bf4:	40 5c       	subi	r20, 0xC0	; 192
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf8:	6f 4f       	sbci	r22, 0xFF	; 255
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfc:	40 78       	andi	r20, 0x80	; 128
    1bfe:	1a 8e       	std	Y+26, r1	; 0x1a
    1c00:	fe 17       	cp	r31, r30
    1c02:	11 f0       	breq	.+4      	; 0x1c08 <__mulsf3+0x1d8>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	8a 8f       	std	Y+26, r24	; 0x1a
    1c08:	4d 8f       	std	Y+29, r20	; 0x1d
    1c0a:	5e 8f       	std	Y+30, r21	; 0x1e
    1c0c:	6f 8f       	std	Y+31, r22	; 0x1f
    1c0e:	78 a3       	std	Y+32, r23	; 0x20
    1c10:	83 e0       	ldi	r24, 0x03	; 3
    1c12:	89 8f       	std	Y+25, r24	; 0x19
    1c14:	ce 01       	movw	r24, r28
    1c16:	49 96       	adiw	r24, 0x19	; 25
    1c18:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__pack_f>
    1c1c:	a0 96       	adiw	r28, 0x20	; 32
    1c1e:	e2 e1       	ldi	r30, 0x12	; 18
    1c20:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__epilogue_restores__>

00001c24 <__divsf3>:
    1c24:	a8 e1       	ldi	r26, 0x18	; 24
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e1       	ldi	r30, 0x18	; 24
    1c2a:	fe e0       	ldi	r31, 0x0E	; 14
    1c2c:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__prologue_saves__+0x10>
    1c30:	69 83       	std	Y+1, r22	; 0x01
    1c32:	7a 83       	std	Y+2, r23	; 0x02
    1c34:	8b 83       	std	Y+3, r24	; 0x03
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	2d 83       	std	Y+5, r18	; 0x05
    1c3a:	3e 83       	std	Y+6, r19	; 0x06
    1c3c:	4f 83       	std	Y+7, r20	; 0x07
    1c3e:	58 87       	std	Y+8, r21	; 0x08
    1c40:	b9 e0       	ldi	r27, 0x09	; 9
    1c42:	eb 2e       	mov	r14, r27
    1c44:	f1 2c       	mov	r15, r1
    1c46:	ec 0e       	add	r14, r28
    1c48:	fd 1e       	adc	r15, r29
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	b7 01       	movw	r22, r14
    1c50:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1c54:	8e 01       	movw	r16, r28
    1c56:	0f 5e       	subi	r16, 0xEF	; 239
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	05 96       	adiw	r24, 0x05	; 5
    1c5e:	b8 01       	movw	r22, r16
    1c60:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1c64:	29 85       	ldd	r18, Y+9	; 0x09
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <__divsf3+0x48>
    1c6a:	7e c0       	rjmp	.+252    	; 0x1d68 <__divsf3+0x144>
    1c6c:	39 89       	ldd	r19, Y+17	; 0x11
    1c6e:	32 30       	cpi	r19, 0x02	; 2
    1c70:	10 f4       	brcc	.+4      	; 0x1c76 <__divsf3+0x52>
    1c72:	b8 01       	movw	r22, r16
    1c74:	7c c0       	rjmp	.+248    	; 0x1d6e <__divsf3+0x14a>
    1c76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c78:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7a:	89 27       	eor	r24, r25
    1c7c:	8a 87       	std	Y+10, r24	; 0x0a
    1c7e:	24 30       	cpi	r18, 0x04	; 4
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <__divsf3+0x62>
    1c82:	22 30       	cpi	r18, 0x02	; 2
    1c84:	31 f4       	brne	.+12     	; 0x1c92 <__divsf3+0x6e>
    1c86:	23 17       	cp	r18, r19
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <__divsf3+0x68>
    1c8a:	6e c0       	rjmp	.+220    	; 0x1d68 <__divsf3+0x144>
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	72 e0       	ldi	r23, 0x02	; 2
    1c90:	6e c0       	rjmp	.+220    	; 0x1d6e <__divsf3+0x14a>
    1c92:	34 30       	cpi	r19, 0x04	; 4
    1c94:	39 f4       	brne	.+14     	; 0x1ca4 <__divsf3+0x80>
    1c96:	1d 86       	std	Y+13, r1	; 0x0d
    1c98:	1e 86       	std	Y+14, r1	; 0x0e
    1c9a:	1f 86       	std	Y+15, r1	; 0x0f
    1c9c:	18 8a       	std	Y+16, r1	; 0x10
    1c9e:	1c 86       	std	Y+12, r1	; 0x0c
    1ca0:	1b 86       	std	Y+11, r1	; 0x0b
    1ca2:	04 c0       	rjmp	.+8      	; 0x1cac <__divsf3+0x88>
    1ca4:	32 30       	cpi	r19, 0x02	; 2
    1ca6:	21 f4       	brne	.+8      	; 0x1cb0 <__divsf3+0x8c>
    1ca8:	84 e0       	ldi	r24, 0x04	; 4
    1caa:	89 87       	std	Y+9, r24	; 0x09
    1cac:	b7 01       	movw	r22, r14
    1cae:	5f c0       	rjmp	.+190    	; 0x1d6e <__divsf3+0x14a>
    1cb0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1cb2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb8:	28 1b       	sub	r18, r24
    1cba:	39 0b       	sbc	r19, r25
    1cbc:	3c 87       	std	Y+12, r19	; 0x0c
    1cbe:	2b 87       	std	Y+11, r18	; 0x0b
    1cc0:	ed 84       	ldd	r14, Y+13	; 0x0d
    1cc2:	fe 84       	ldd	r15, Y+14	; 0x0e
    1cc4:	0f 85       	ldd	r16, Y+15	; 0x0f
    1cc6:	18 89       	ldd	r17, Y+16	; 0x10
    1cc8:	ad 88       	ldd	r10, Y+21	; 0x15
    1cca:	be 88       	ldd	r11, Y+22	; 0x16
    1ccc:	cf 88       	ldd	r12, Y+23	; 0x17
    1cce:	d8 8c       	ldd	r13, Y+24	; 0x18
    1cd0:	ea 14       	cp	r14, r10
    1cd2:	fb 04       	cpc	r15, r11
    1cd4:	0c 05       	cpc	r16, r12
    1cd6:	1d 05       	cpc	r17, r13
    1cd8:	40 f4       	brcc	.+16     	; 0x1cea <__divsf3+0xc6>
    1cda:	ee 0c       	add	r14, r14
    1cdc:	ff 1c       	adc	r15, r15
    1cde:	00 1f       	adc	r16, r16
    1ce0:	11 1f       	adc	r17, r17
    1ce2:	21 50       	subi	r18, 0x01	; 1
    1ce4:	30 40       	sbci	r19, 0x00	; 0
    1ce6:	3c 87       	std	Y+12, r19	; 0x0c
    1ce8:	2b 87       	std	Y+11, r18	; 0x0b
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e0       	ldi	r26, 0x00	; 0
    1cf8:	b0 e4       	ldi	r27, 0x40	; 64
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	ea 14       	cp	r14, r10
    1d00:	fb 04       	cpc	r15, r11
    1d02:	0c 05       	cpc	r16, r12
    1d04:	1d 05       	cpc	r17, r13
    1d06:	40 f0       	brcs	.+16     	; 0x1d18 <__divsf3+0xf4>
    1d08:	28 2b       	or	r18, r24
    1d0a:	39 2b       	or	r19, r25
    1d0c:	4a 2b       	or	r20, r26
    1d0e:	5b 2b       	or	r21, r27
    1d10:	ea 18       	sub	r14, r10
    1d12:	fb 08       	sbc	r15, r11
    1d14:	0c 09       	sbc	r16, r12
    1d16:	1d 09       	sbc	r17, r13
    1d18:	b6 95       	lsr	r27
    1d1a:	a7 95       	ror	r26
    1d1c:	97 95       	ror	r25
    1d1e:	87 95       	ror	r24
    1d20:	ee 0c       	add	r14, r14
    1d22:	ff 1c       	adc	r15, r15
    1d24:	00 1f       	adc	r16, r16
    1d26:	11 1f       	adc	r17, r17
    1d28:	6f 5f       	subi	r22, 0xFF	; 255
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	6f 31       	cpi	r22, 0x1F	; 31
    1d2e:	71 05       	cpc	r23, r1
    1d30:	31 f7       	brne	.-52     	; 0x1cfe <__divsf3+0xda>
    1d32:	da 01       	movw	r26, r20
    1d34:	c9 01       	movw	r24, r18
    1d36:	8f 77       	andi	r24, 0x7F	; 127
    1d38:	90 70       	andi	r25, 0x00	; 0
    1d3a:	a0 70       	andi	r26, 0x00	; 0
    1d3c:	b0 70       	andi	r27, 0x00	; 0
    1d3e:	80 34       	cpi	r24, 0x40	; 64
    1d40:	91 05       	cpc	r25, r1
    1d42:	a1 05       	cpc	r26, r1
    1d44:	b1 05       	cpc	r27, r1
    1d46:	61 f4       	brne	.+24     	; 0x1d60 <__divsf3+0x13c>
    1d48:	27 fd       	sbrc	r18, 7
    1d4a:	0a c0       	rjmp	.+20     	; 0x1d60 <__divsf3+0x13c>
    1d4c:	e1 14       	cp	r14, r1
    1d4e:	f1 04       	cpc	r15, r1
    1d50:	01 05       	cpc	r16, r1
    1d52:	11 05       	cpc	r17, r1
    1d54:	29 f0       	breq	.+10     	; 0x1d60 <__divsf3+0x13c>
    1d56:	20 5c       	subi	r18, 0xC0	; 192
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5e:	20 78       	andi	r18, 0x80	; 128
    1d60:	2d 87       	std	Y+13, r18	; 0x0d
    1d62:	3e 87       	std	Y+14, r19	; 0x0e
    1d64:	4f 87       	std	Y+15, r20	; 0x0f
    1d66:	58 8b       	std	Y+16, r21	; 0x10
    1d68:	be 01       	movw	r22, r28
    1d6a:	67 5f       	subi	r22, 0xF7	; 247
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	cb 01       	movw	r24, r22
    1d70:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__pack_f>
    1d74:	68 96       	adiw	r28, 0x18	; 24
    1d76:	ea e0       	ldi	r30, 0x0A	; 10
    1d78:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__epilogue_restores__+0x10>

00001d7c <__gtsf2>:
    1d7c:	a8 e1       	ldi	r26, 0x18	; 24
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e4 ec       	ldi	r30, 0xC4	; 196
    1d82:	fe e0       	ldi	r31, 0x0E	; 14
    1d84:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__prologue_saves__+0x18>
    1d88:	69 83       	std	Y+1, r22	; 0x01
    1d8a:	7a 83       	std	Y+2, r23	; 0x02
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	2d 83       	std	Y+5, r18	; 0x05
    1d92:	3e 83       	std	Y+6, r19	; 0x06
    1d94:	4f 83       	std	Y+7, r20	; 0x07
    1d96:	58 87       	std	Y+8, r21	; 0x08
    1d98:	89 e0       	ldi	r24, 0x09	; 9
    1d9a:	e8 2e       	mov	r14, r24
    1d9c:	f1 2c       	mov	r15, r1
    1d9e:	ec 0e       	add	r14, r28
    1da0:	fd 1e       	adc	r15, r29
    1da2:	ce 01       	movw	r24, r28
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	b7 01       	movw	r22, r14
    1da8:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1dac:	8e 01       	movw	r16, r28
    1dae:	0f 5e       	subi	r16, 0xEF	; 239
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	ce 01       	movw	r24, r28
    1db4:	05 96       	adiw	r24, 0x05	; 5
    1db6:	b8 01       	movw	r22, r16
    1db8:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1dbc:	89 85       	ldd	r24, Y+9	; 0x09
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	40 f0       	brcs	.+16     	; 0x1dd2 <__gtsf2+0x56>
    1dc2:	89 89       	ldd	r24, Y+17	; 0x11
    1dc4:	82 30       	cpi	r24, 0x02	; 2
    1dc6:	28 f0       	brcs	.+10     	; 0x1dd2 <__gtsf2+0x56>
    1dc8:	c7 01       	movw	r24, r14
    1dca:	b8 01       	movw	r22, r16
    1dcc:	0e 94 b7 11 	call	0x236e	; 0x236e <__fpcmp_parts_f>
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <__gtsf2+0x58>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	68 96       	adiw	r28, 0x18	; 24
    1dd6:	e6 e0       	ldi	r30, 0x06	; 6
    1dd8:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__epilogue_restores__+0x18>

00001ddc <__gesf2>:
    1ddc:	a8 e1       	ldi	r26, 0x18	; 24
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e4 ef       	ldi	r30, 0xF4	; 244
    1de2:	fe e0       	ldi	r31, 0x0E	; 14
    1de4:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__prologue_saves__+0x18>
    1de8:	69 83       	std	Y+1, r22	; 0x01
    1dea:	7a 83       	std	Y+2, r23	; 0x02
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	2d 83       	std	Y+5, r18	; 0x05
    1df2:	3e 83       	std	Y+6, r19	; 0x06
    1df4:	4f 83       	std	Y+7, r20	; 0x07
    1df6:	58 87       	std	Y+8, r21	; 0x08
    1df8:	89 e0       	ldi	r24, 0x09	; 9
    1dfa:	e8 2e       	mov	r14, r24
    1dfc:	f1 2c       	mov	r15, r1
    1dfe:	ec 0e       	add	r14, r28
    1e00:	fd 1e       	adc	r15, r29
    1e02:	ce 01       	movw	r24, r28
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	b7 01       	movw	r22, r14
    1e08:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1e0c:	8e 01       	movw	r16, r28
    1e0e:	0f 5e       	subi	r16, 0xEF	; 239
    1e10:	1f 4f       	sbci	r17, 0xFF	; 255
    1e12:	ce 01       	movw	r24, r28
    1e14:	05 96       	adiw	r24, 0x05	; 5
    1e16:	b8 01       	movw	r22, r16
    1e18:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	82 30       	cpi	r24, 0x02	; 2
    1e20:	40 f0       	brcs	.+16     	; 0x1e32 <__gesf2+0x56>
    1e22:	89 89       	ldd	r24, Y+17	; 0x11
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	28 f0       	brcs	.+10     	; 0x1e32 <__gesf2+0x56>
    1e28:	c7 01       	movw	r24, r14
    1e2a:	b8 01       	movw	r22, r16
    1e2c:	0e 94 b7 11 	call	0x236e	; 0x236e <__fpcmp_parts_f>
    1e30:	01 c0       	rjmp	.+2      	; 0x1e34 <__gesf2+0x58>
    1e32:	8f ef       	ldi	r24, 0xFF	; 255
    1e34:	68 96       	adiw	r28, 0x18	; 24
    1e36:	e6 e0       	ldi	r30, 0x06	; 6
    1e38:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__epilogue_restores__+0x18>

00001e3c <__ltsf2>:
    1e3c:	a8 e1       	ldi	r26, 0x18	; 24
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e4 e2       	ldi	r30, 0x24	; 36
    1e42:	ff e0       	ldi	r31, 0x0F	; 15
    1e44:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__prologue_saves__+0x18>
    1e48:	69 83       	std	Y+1, r22	; 0x01
    1e4a:	7a 83       	std	Y+2, r23	; 0x02
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	2d 83       	std	Y+5, r18	; 0x05
    1e52:	3e 83       	std	Y+6, r19	; 0x06
    1e54:	4f 83       	std	Y+7, r20	; 0x07
    1e56:	58 87       	std	Y+8, r21	; 0x08
    1e58:	89 e0       	ldi	r24, 0x09	; 9
    1e5a:	e8 2e       	mov	r14, r24
    1e5c:	f1 2c       	mov	r15, r1
    1e5e:	ec 0e       	add	r14, r28
    1e60:	fd 1e       	adc	r15, r29
    1e62:	ce 01       	movw	r24, r28
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	b7 01       	movw	r22, r14
    1e68:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1e6c:	8e 01       	movw	r16, r28
    1e6e:	0f 5e       	subi	r16, 0xEF	; 239
    1e70:	1f 4f       	sbci	r17, 0xFF	; 255
    1e72:	ce 01       	movw	r24, r28
    1e74:	05 96       	adiw	r24, 0x05	; 5
    1e76:	b8 01       	movw	r22, r16
    1e78:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	82 30       	cpi	r24, 0x02	; 2
    1e80:	40 f0       	brcs	.+16     	; 0x1e92 <__ltsf2+0x56>
    1e82:	89 89       	ldd	r24, Y+17	; 0x11
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	28 f0       	brcs	.+10     	; 0x1e92 <__ltsf2+0x56>
    1e88:	c7 01       	movw	r24, r14
    1e8a:	b8 01       	movw	r22, r16
    1e8c:	0e 94 b7 11 	call	0x236e	; 0x236e <__fpcmp_parts_f>
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <__ltsf2+0x58>
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	68 96       	adiw	r28, 0x18	; 24
    1e96:	e6 e0       	ldi	r30, 0x06	; 6
    1e98:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__epilogue_restores__+0x18>

00001e9c <__fixsfsi>:
    1e9c:	ac e0       	ldi	r26, 0x0C	; 12
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e4 e5       	ldi	r30, 0x54	; 84
    1ea2:	ff e0       	ldi	r31, 0x0F	; 15
    1ea4:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__prologue_saves__+0x20>
    1ea8:	69 83       	std	Y+1, r22	; 0x01
    1eaa:	7a 83       	std	Y+2, r23	; 0x02
    1eac:	8b 83       	std	Y+3, r24	; 0x03
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	be 01       	movw	r22, r28
    1eb6:	6b 5f       	subi	r22, 0xFB	; 251
    1eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eba:	0e 94 3f 11 	call	0x227e	; 0x227e <__unpack_f>
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	82 30       	cpi	r24, 0x02	; 2
    1ec2:	61 f1       	breq	.+88     	; 0x1f1c <__fixsfsi+0x80>
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	50 f1       	brcs	.+84     	; 0x1f1c <__fixsfsi+0x80>
    1ec8:	84 30       	cpi	r24, 0x04	; 4
    1eca:	21 f4       	brne	.+8      	; 0x1ed4 <__fixsfsi+0x38>
    1ecc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ece:	88 23       	and	r24, r24
    1ed0:	51 f1       	breq	.+84     	; 0x1f26 <__fixsfsi+0x8a>
    1ed2:	2e c0       	rjmp	.+92     	; 0x1f30 <__fixsfsi+0x94>
    1ed4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ed6:	38 85       	ldd	r19, Y+8	; 0x08
    1ed8:	37 fd       	sbrc	r19, 7
    1eda:	20 c0       	rjmp	.+64     	; 0x1f1c <__fixsfsi+0x80>
    1edc:	6e 81       	ldd	r22, Y+6	; 0x06
    1ede:	2f 31       	cpi	r18, 0x1F	; 31
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	1c f0       	brlt	.+6      	; 0x1eea <__fixsfsi+0x4e>
    1ee4:	66 23       	and	r22, r22
    1ee6:	f9 f0       	breq	.+62     	; 0x1f26 <__fixsfsi+0x8a>
    1ee8:	23 c0       	rjmp	.+70     	; 0x1f30 <__fixsfsi+0x94>
    1eea:	8e e1       	ldi	r24, 0x1E	; 30
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	82 1b       	sub	r24, r18
    1ef0:	93 0b       	sbc	r25, r19
    1ef2:	29 85       	ldd	r18, Y+9	; 0x09
    1ef4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ef6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ef8:	5c 85       	ldd	r21, Y+12	; 0x0c
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <__fixsfsi+0x68>
    1efc:	56 95       	lsr	r21
    1efe:	47 95       	ror	r20
    1f00:	37 95       	ror	r19
    1f02:	27 95       	ror	r18
    1f04:	8a 95       	dec	r24
    1f06:	d2 f7       	brpl	.-12     	; 0x1efc <__fixsfsi+0x60>
    1f08:	66 23       	and	r22, r22
    1f0a:	b1 f0       	breq	.+44     	; 0x1f38 <__fixsfsi+0x9c>
    1f0c:	50 95       	com	r21
    1f0e:	40 95       	com	r20
    1f10:	30 95       	com	r19
    1f12:	21 95       	neg	r18
    1f14:	3f 4f       	sbci	r19, 0xFF	; 255
    1f16:	4f 4f       	sbci	r20, 0xFF	; 255
    1f18:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1a:	0e c0       	rjmp	.+28     	; 0x1f38 <__fixsfsi+0x9c>
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	09 c0       	rjmp	.+18     	; 0x1f38 <__fixsfsi+0x9c>
    1f26:	2f ef       	ldi	r18, 0xFF	; 255
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f ef       	ldi	r20, 0xFF	; 255
    1f2c:	5f e7       	ldi	r21, 0x7F	; 127
    1f2e:	04 c0       	rjmp	.+8      	; 0x1f38 <__fixsfsi+0x9c>
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	50 e8       	ldi	r21, 0x80	; 128
    1f38:	b9 01       	movw	r22, r18
    1f3a:	ca 01       	movw	r24, r20
    1f3c:	2c 96       	adiw	r28, 0x0c	; 12
    1f3e:	e2 e0       	ldi	r30, 0x02	; 2
    1f40:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__epilogue_restores__+0x20>

00001f44 <__floatunsisf>:
    1f44:	a8 e0       	ldi	r26, 0x08	; 8
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e8 ea       	ldi	r30, 0xA8	; 168
    1f4a:	ff e0       	ldi	r31, 0x0F	; 15
    1f4c:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__prologue_saves__+0x10>
    1f50:	7b 01       	movw	r14, r22
    1f52:	8c 01       	movw	r16, r24
    1f54:	61 15       	cp	r22, r1
    1f56:	71 05       	cpc	r23, r1
    1f58:	81 05       	cpc	r24, r1
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	19 f4       	brne	.+6      	; 0x1f64 <__floatunsisf+0x20>
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	60 c0       	rjmp	.+192    	; 0x2024 <__floatunsisf+0xe0>
    1f64:	83 e0       	ldi	r24, 0x03	; 3
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	8e e1       	ldi	r24, 0x1E	; 30
    1f6a:	c8 2e       	mov	r12, r24
    1f6c:	d1 2c       	mov	r13, r1
    1f6e:	dc 82       	std	Y+4, r13	; 0x04
    1f70:	cb 82       	std	Y+3, r12	; 0x03
    1f72:	ed 82       	std	Y+5, r14	; 0x05
    1f74:	fe 82       	std	Y+6, r15	; 0x06
    1f76:	0f 83       	std	Y+7, r16	; 0x07
    1f78:	18 87       	std	Y+8, r17	; 0x08
    1f7a:	c8 01       	movw	r24, r16
    1f7c:	b7 01       	movw	r22, r14
    1f7e:	0e 94 1b 10 	call	0x2036	; 0x2036 <__clzsi2>
    1f82:	fc 01       	movw	r30, r24
    1f84:	31 97       	sbiw	r30, 0x01	; 1
    1f86:	f7 ff       	sbrs	r31, 7
    1f88:	3b c0       	rjmp	.+118    	; 0x2000 <__floatunsisf+0xbc>
    1f8a:	22 27       	eor	r18, r18
    1f8c:	33 27       	eor	r19, r19
    1f8e:	2e 1b       	sub	r18, r30
    1f90:	3f 0b       	sbc	r19, r31
    1f92:	57 01       	movw	r10, r14
    1f94:	68 01       	movw	r12, r16
    1f96:	02 2e       	mov	r0, r18
    1f98:	04 c0       	rjmp	.+8      	; 0x1fa2 <__floatunsisf+0x5e>
    1f9a:	d6 94       	lsr	r13
    1f9c:	c7 94       	ror	r12
    1f9e:	b7 94       	ror	r11
    1fa0:	a7 94       	ror	r10
    1fa2:	0a 94       	dec	r0
    1fa4:	d2 f7       	brpl	.-12     	; 0x1f9a <__floatunsisf+0x56>
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e0       	ldi	r26, 0x00	; 0
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <__floatunsisf+0x7c>
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	aa 1f       	adc	r26, r26
    1fbe:	bb 1f       	adc	r27, r27
    1fc0:	2a 95       	dec	r18
    1fc2:	d2 f7       	brpl	.-12     	; 0x1fb8 <__floatunsisf+0x74>
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	a1 09       	sbc	r26, r1
    1fc8:	b1 09       	sbc	r27, r1
    1fca:	8e 21       	and	r24, r14
    1fcc:	9f 21       	and	r25, r15
    1fce:	a0 23       	and	r26, r16
    1fd0:	b1 23       	and	r27, r17
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	a1 05       	cpc	r26, r1
    1fd6:	b1 05       	cpc	r27, r1
    1fd8:	21 f0       	breq	.+8      	; 0x1fe2 <__floatunsisf+0x9e>
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	4a 29       	or	r20, r10
    1fe4:	5b 29       	or	r21, r11
    1fe6:	6c 29       	or	r22, r12
    1fe8:	7d 29       	or	r23, r13
    1fea:	4d 83       	std	Y+5, r20	; 0x05
    1fec:	5e 83       	std	Y+6, r21	; 0x06
    1fee:	6f 83       	std	Y+7, r22	; 0x07
    1ff0:	78 87       	std	Y+8, r23	; 0x08
    1ff2:	8e e1       	ldi	r24, 0x1E	; 30
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	8e 1b       	sub	r24, r30
    1ff8:	9f 0b       	sbc	r25, r31
    1ffa:	9c 83       	std	Y+4, r25	; 0x04
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
    1ffe:	12 c0       	rjmp	.+36     	; 0x2024 <__floatunsisf+0xe0>
    2000:	30 97       	sbiw	r30, 0x00	; 0
    2002:	81 f0       	breq	.+32     	; 0x2024 <__floatunsisf+0xe0>
    2004:	0e 2e       	mov	r0, r30
    2006:	04 c0       	rjmp	.+8      	; 0x2010 <__floatunsisf+0xcc>
    2008:	ee 0c       	add	r14, r14
    200a:	ff 1c       	adc	r15, r15
    200c:	00 1f       	adc	r16, r16
    200e:	11 1f       	adc	r17, r17
    2010:	0a 94       	dec	r0
    2012:	d2 f7       	brpl	.-12     	; 0x2008 <__floatunsisf+0xc4>
    2014:	ed 82       	std	Y+5, r14	; 0x05
    2016:	fe 82       	std	Y+6, r15	; 0x06
    2018:	0f 83       	std	Y+7, r16	; 0x07
    201a:	18 87       	std	Y+8, r17	; 0x08
    201c:	ce 1a       	sub	r12, r30
    201e:	df 0a       	sbc	r13, r31
    2020:	dc 82       	std	Y+4, r13	; 0x04
    2022:	cb 82       	std	Y+3, r12	; 0x03
    2024:	1a 82       	std	Y+2, r1	; 0x02
    2026:	ce 01       	movw	r24, r28
    2028:	01 96       	adiw	r24, 0x01	; 1
    202a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__pack_f>
    202e:	28 96       	adiw	r28, 0x08	; 8
    2030:	ea e0       	ldi	r30, 0x0A	; 10
    2032:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__epilogue_restores__+0x10>

00002036 <__clzsi2>:
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	7b 01       	movw	r14, r22
    2040:	8c 01       	movw	r16, r24
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	e8 16       	cp	r14, r24
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	f8 06       	cpc	r15, r24
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	08 07       	cpc	r16, r24
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	18 07       	cpc	r17, r24
    2052:	88 f4       	brcc	.+34     	; 0x2076 <__clzsi2+0x40>
    2054:	8f ef       	ldi	r24, 0xFF	; 255
    2056:	e8 16       	cp	r14, r24
    2058:	f1 04       	cpc	r15, r1
    205a:	01 05       	cpc	r16, r1
    205c:	11 05       	cpc	r17, r1
    205e:	31 f0       	breq	.+12     	; 0x206c <__clzsi2+0x36>
    2060:	28 f0       	brcs	.+10     	; 0x206c <__clzsi2+0x36>
    2062:	88 e0       	ldi	r24, 0x08	; 8
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 e0       	ldi	r26, 0x00	; 0
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	17 c0       	rjmp	.+46     	; 0x209a <__clzsi2+0x64>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e0       	ldi	r26, 0x00	; 0
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	12 c0       	rjmp	.+36     	; 0x209a <__clzsi2+0x64>
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	e8 16       	cp	r14, r24
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	f8 06       	cpc	r15, r24
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	08 07       	cpc	r16, r24
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	18 07       	cpc	r17, r24
    2086:	28 f0       	brcs	.+10     	; 0x2092 <__clzsi2+0x5c>
    2088:	88 e1       	ldi	r24, 0x18	; 24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	04 c0       	rjmp	.+8      	; 0x209a <__clzsi2+0x64>
    2092:	80 e1       	ldi	r24, 0x10	; 16
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e0       	ldi	r26, 0x00	; 0
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	20 e2       	ldi	r18, 0x20	; 32
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	28 1b       	sub	r18, r24
    20a4:	39 0b       	sbc	r19, r25
    20a6:	4a 0b       	sbc	r20, r26
    20a8:	5b 0b       	sbc	r21, r27
    20aa:	04 c0       	rjmp	.+8      	; 0x20b4 <__clzsi2+0x7e>
    20ac:	16 95       	lsr	r17
    20ae:	07 95       	ror	r16
    20b0:	f7 94       	ror	r15
    20b2:	e7 94       	ror	r14
    20b4:	8a 95       	dec	r24
    20b6:	d2 f7       	brpl	.-12     	; 0x20ac <__clzsi2+0x76>
    20b8:	f7 01       	movw	r30, r14
    20ba:	e8 5f       	subi	r30, 0xF8	; 248
    20bc:	fd 4f       	sbci	r31, 0xFD	; 253
    20be:	80 81       	ld	r24, Z
    20c0:	28 1b       	sub	r18, r24
    20c2:	31 09       	sbc	r19, r1
    20c4:	41 09       	sbc	r20, r1
    20c6:	51 09       	sbc	r21, r1
    20c8:	c9 01       	movw	r24, r18
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	ff 90       	pop	r15
    20d0:	ef 90       	pop	r14
    20d2:	08 95       	ret

000020d4 <__pack_f>:
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	fc 01       	movw	r30, r24
    20e0:	e4 80       	ldd	r14, Z+4	; 0x04
    20e2:	f5 80       	ldd	r15, Z+5	; 0x05
    20e4:	06 81       	ldd	r16, Z+6	; 0x06
    20e6:	17 81       	ldd	r17, Z+7	; 0x07
    20e8:	d1 80       	ldd	r13, Z+1	; 0x01
    20ea:	80 81       	ld	r24, Z
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	48 f4       	brcc	.+18     	; 0x2102 <__pack_f+0x2e>
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a0 e1       	ldi	r26, 0x10	; 16
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e8 2a       	or	r14, r24
    20fa:	f9 2a       	or	r15, r25
    20fc:	0a 2b       	or	r16, r26
    20fe:	1b 2b       	or	r17, r27
    2100:	a5 c0       	rjmp	.+330    	; 0x224c <__stack+0x4d>
    2102:	84 30       	cpi	r24, 0x04	; 4
    2104:	09 f4       	brne	.+2      	; 0x2108 <__pack_f+0x34>
    2106:	9f c0       	rjmp	.+318    	; 0x2246 <__stack+0x47>
    2108:	82 30       	cpi	r24, 0x02	; 2
    210a:	21 f4       	brne	.+8      	; 0x2114 <__pack_f+0x40>
    210c:	ee 24       	eor	r14, r14
    210e:	ff 24       	eor	r15, r15
    2110:	87 01       	movw	r16, r14
    2112:	05 c0       	rjmp	.+10     	; 0x211e <__pack_f+0x4a>
    2114:	e1 14       	cp	r14, r1
    2116:	f1 04       	cpc	r15, r1
    2118:	01 05       	cpc	r16, r1
    211a:	11 05       	cpc	r17, r1
    211c:	19 f4       	brne	.+6      	; 0x2124 <__pack_f+0x50>
    211e:	e0 e0       	ldi	r30, 0x00	; 0
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	96 c0       	rjmp	.+300    	; 0x2250 <__stack+0x51>
    2124:	62 81       	ldd	r22, Z+2	; 0x02
    2126:	73 81       	ldd	r23, Z+3	; 0x03
    2128:	9f ef       	ldi	r25, 0xFF	; 255
    212a:	62 38       	cpi	r22, 0x82	; 130
    212c:	79 07       	cpc	r23, r25
    212e:	0c f0       	brlt	.+2      	; 0x2132 <__pack_f+0x5e>
    2130:	5b c0       	rjmp	.+182    	; 0x21e8 <__pack_f+0x114>
    2132:	22 e8       	ldi	r18, 0x82	; 130
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	26 1b       	sub	r18, r22
    2138:	37 0b       	sbc	r19, r23
    213a:	2a 31       	cpi	r18, 0x1A	; 26
    213c:	31 05       	cpc	r19, r1
    213e:	2c f0       	brlt	.+10     	; 0x214a <__pack_f+0x76>
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	2a c0       	rjmp	.+84     	; 0x219e <__pack_f+0xca>
    214a:	b8 01       	movw	r22, r16
    214c:	a7 01       	movw	r20, r14
    214e:	02 2e       	mov	r0, r18
    2150:	04 c0       	rjmp	.+8      	; 0x215a <__pack_f+0x86>
    2152:	76 95       	lsr	r23
    2154:	67 95       	ror	r22
    2156:	57 95       	ror	r21
    2158:	47 95       	ror	r20
    215a:	0a 94       	dec	r0
    215c:	d2 f7       	brpl	.-12     	; 0x2152 <__pack_f+0x7e>
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a0 e0       	ldi	r26, 0x00	; 0
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <__pack_f+0x9c>
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	aa 1f       	adc	r26, r26
    216e:	bb 1f       	adc	r27, r27
    2170:	2a 95       	dec	r18
    2172:	d2 f7       	brpl	.-12     	; 0x2168 <__pack_f+0x94>
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	a1 09       	sbc	r26, r1
    2178:	b1 09       	sbc	r27, r1
    217a:	8e 21       	and	r24, r14
    217c:	9f 21       	and	r25, r15
    217e:	a0 23       	and	r26, r16
    2180:	b1 23       	and	r27, r17
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	a1 05       	cpc	r26, r1
    2186:	b1 05       	cpc	r27, r1
    2188:	21 f0       	breq	.+8      	; 0x2192 <__pack_f+0xbe>
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a0 e0       	ldi	r26, 0x00	; 0
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	9a 01       	movw	r18, r20
    2194:	ab 01       	movw	r20, r22
    2196:	28 2b       	or	r18, r24
    2198:	39 2b       	or	r19, r25
    219a:	4a 2b       	or	r20, r26
    219c:	5b 2b       	or	r21, r27
    219e:	da 01       	movw	r26, r20
    21a0:	c9 01       	movw	r24, r18
    21a2:	8f 77       	andi	r24, 0x7F	; 127
    21a4:	90 70       	andi	r25, 0x00	; 0
    21a6:	a0 70       	andi	r26, 0x00	; 0
    21a8:	b0 70       	andi	r27, 0x00	; 0
    21aa:	80 34       	cpi	r24, 0x40	; 64
    21ac:	91 05       	cpc	r25, r1
    21ae:	a1 05       	cpc	r26, r1
    21b0:	b1 05       	cpc	r27, r1
    21b2:	39 f4       	brne	.+14     	; 0x21c2 <__pack_f+0xee>
    21b4:	27 ff       	sbrs	r18, 7
    21b6:	09 c0       	rjmp	.+18     	; 0x21ca <__pack_f+0xf6>
    21b8:	20 5c       	subi	r18, 0xC0	; 192
    21ba:	3f 4f       	sbci	r19, 0xFF	; 255
    21bc:	4f 4f       	sbci	r20, 0xFF	; 255
    21be:	5f 4f       	sbci	r21, 0xFF	; 255
    21c0:	04 c0       	rjmp	.+8      	; 0x21ca <__pack_f+0xf6>
    21c2:	21 5c       	subi	r18, 0xC1	; 193
    21c4:	3f 4f       	sbci	r19, 0xFF	; 255
    21c6:	4f 4f       	sbci	r20, 0xFF	; 255
    21c8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ca:	e0 e0       	ldi	r30, 0x00	; 0
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	20 30       	cpi	r18, 0x00	; 0
    21d0:	a0 e0       	ldi	r26, 0x00	; 0
    21d2:	3a 07       	cpc	r19, r26
    21d4:	a0 e0       	ldi	r26, 0x00	; 0
    21d6:	4a 07       	cpc	r20, r26
    21d8:	a0 e4       	ldi	r26, 0x40	; 64
    21da:	5a 07       	cpc	r21, r26
    21dc:	10 f0       	brcs	.+4      	; 0x21e2 <__pack_f+0x10e>
    21de:	e1 e0       	ldi	r30, 0x01	; 1
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	79 01       	movw	r14, r18
    21e4:	8a 01       	movw	r16, r20
    21e6:	27 c0       	rjmp	.+78     	; 0x2236 <__stack+0x37>
    21e8:	60 38       	cpi	r22, 0x80	; 128
    21ea:	71 05       	cpc	r23, r1
    21ec:	64 f5       	brge	.+88     	; 0x2246 <__stack+0x47>
    21ee:	fb 01       	movw	r30, r22
    21f0:	e1 58       	subi	r30, 0x81	; 129
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	d8 01       	movw	r26, r16
    21f6:	c7 01       	movw	r24, r14
    21f8:	8f 77       	andi	r24, 0x7F	; 127
    21fa:	90 70       	andi	r25, 0x00	; 0
    21fc:	a0 70       	andi	r26, 0x00	; 0
    21fe:	b0 70       	andi	r27, 0x00	; 0
    2200:	80 34       	cpi	r24, 0x40	; 64
    2202:	91 05       	cpc	r25, r1
    2204:	a1 05       	cpc	r26, r1
    2206:	b1 05       	cpc	r27, r1
    2208:	39 f4       	brne	.+14     	; 0x2218 <__stack+0x19>
    220a:	e7 fe       	sbrs	r14, 7
    220c:	0d c0       	rjmp	.+26     	; 0x2228 <__stack+0x29>
    220e:	80 e4       	ldi	r24, 0x40	; 64
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	a0 e0       	ldi	r26, 0x00	; 0
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	04 c0       	rjmp	.+8      	; 0x2220 <__stack+0x21>
    2218:	8f e3       	ldi	r24, 0x3F	; 63
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 e0       	ldi	r26, 0x00	; 0
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e8 0e       	add	r14, r24
    2222:	f9 1e       	adc	r15, r25
    2224:	0a 1f       	adc	r16, r26
    2226:	1b 1f       	adc	r17, r27
    2228:	17 ff       	sbrs	r17, 7
    222a:	05 c0       	rjmp	.+10     	; 0x2236 <__stack+0x37>
    222c:	16 95       	lsr	r17
    222e:	07 95       	ror	r16
    2230:	f7 94       	ror	r15
    2232:	e7 94       	ror	r14
    2234:	31 96       	adiw	r30, 0x01	; 1
    2236:	87 e0       	ldi	r24, 0x07	; 7
    2238:	16 95       	lsr	r17
    223a:	07 95       	ror	r16
    223c:	f7 94       	ror	r15
    223e:	e7 94       	ror	r14
    2240:	8a 95       	dec	r24
    2242:	d1 f7       	brne	.-12     	; 0x2238 <__stack+0x39>
    2244:	05 c0       	rjmp	.+10     	; 0x2250 <__stack+0x51>
    2246:	ee 24       	eor	r14, r14
    2248:	ff 24       	eor	r15, r15
    224a:	87 01       	movw	r16, r14
    224c:	ef ef       	ldi	r30, 0xFF	; 255
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	6e 2f       	mov	r22, r30
    2252:	67 95       	ror	r22
    2254:	66 27       	eor	r22, r22
    2256:	67 95       	ror	r22
    2258:	90 2f       	mov	r25, r16
    225a:	9f 77       	andi	r25, 0x7F	; 127
    225c:	d7 94       	ror	r13
    225e:	dd 24       	eor	r13, r13
    2260:	d7 94       	ror	r13
    2262:	8e 2f       	mov	r24, r30
    2264:	86 95       	lsr	r24
    2266:	49 2f       	mov	r20, r25
    2268:	46 2b       	or	r20, r22
    226a:	58 2f       	mov	r21, r24
    226c:	5d 29       	or	r21, r13
    226e:	b7 01       	movw	r22, r14
    2270:	ca 01       	movw	r24, r20
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	ff 90       	pop	r15
    2278:	ef 90       	pop	r14
    227a:	df 90       	pop	r13
    227c:	08 95       	ret

0000227e <__unpack_f>:
    227e:	fc 01       	movw	r30, r24
    2280:	db 01       	movw	r26, r22
    2282:	40 81       	ld	r20, Z
    2284:	51 81       	ldd	r21, Z+1	; 0x01
    2286:	22 81       	ldd	r18, Z+2	; 0x02
    2288:	62 2f       	mov	r22, r18
    228a:	6f 77       	andi	r22, 0x7F	; 127
    228c:	70 e0       	ldi	r23, 0x00	; 0
    228e:	22 1f       	adc	r18, r18
    2290:	22 27       	eor	r18, r18
    2292:	22 1f       	adc	r18, r18
    2294:	93 81       	ldd	r25, Z+3	; 0x03
    2296:	89 2f       	mov	r24, r25
    2298:	88 0f       	add	r24, r24
    229a:	82 2b       	or	r24, r18
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	99 1f       	adc	r25, r25
    22a2:	99 27       	eor	r25, r25
    22a4:	99 1f       	adc	r25, r25
    22a6:	11 96       	adiw	r26, 0x01	; 1
    22a8:	9c 93       	st	X, r25
    22aa:	11 97       	sbiw	r26, 0x01	; 1
    22ac:	21 15       	cp	r18, r1
    22ae:	31 05       	cpc	r19, r1
    22b0:	a9 f5       	brne	.+106    	; 0x231c <__unpack_f+0x9e>
    22b2:	41 15       	cp	r20, r1
    22b4:	51 05       	cpc	r21, r1
    22b6:	61 05       	cpc	r22, r1
    22b8:	71 05       	cpc	r23, r1
    22ba:	11 f4       	brne	.+4      	; 0x22c0 <__unpack_f+0x42>
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	37 c0       	rjmp	.+110    	; 0x232e <__unpack_f+0xb0>
    22c0:	82 e8       	ldi	r24, 0x82	; 130
    22c2:	9f ef       	ldi	r25, 0xFF	; 255
    22c4:	13 96       	adiw	r26, 0x03	; 3
    22c6:	9c 93       	st	X, r25
    22c8:	8e 93       	st	-X, r24
    22ca:	12 97       	sbiw	r26, 0x02	; 2
    22cc:	9a 01       	movw	r18, r20
    22ce:	ab 01       	movw	r20, r22
    22d0:	67 e0       	ldi	r22, 0x07	; 7
    22d2:	22 0f       	add	r18, r18
    22d4:	33 1f       	adc	r19, r19
    22d6:	44 1f       	adc	r20, r20
    22d8:	55 1f       	adc	r21, r21
    22da:	6a 95       	dec	r22
    22dc:	d1 f7       	brne	.-12     	; 0x22d2 <__unpack_f+0x54>
    22de:	83 e0       	ldi	r24, 0x03	; 3
    22e0:	8c 93       	st	X, r24
    22e2:	0d c0       	rjmp	.+26     	; 0x22fe <__unpack_f+0x80>
    22e4:	22 0f       	add	r18, r18
    22e6:	33 1f       	adc	r19, r19
    22e8:	44 1f       	adc	r20, r20
    22ea:	55 1f       	adc	r21, r21
    22ec:	12 96       	adiw	r26, 0x02	; 2
    22ee:	8d 91       	ld	r24, X+
    22f0:	9c 91       	ld	r25, X
    22f2:	13 97       	sbiw	r26, 0x03	; 3
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	13 96       	adiw	r26, 0x03	; 3
    22f8:	9c 93       	st	X, r25
    22fa:	8e 93       	st	-X, r24
    22fc:	12 97       	sbiw	r26, 0x02	; 2
    22fe:	20 30       	cpi	r18, 0x00	; 0
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	38 07       	cpc	r19, r24
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	48 07       	cpc	r20, r24
    2308:	80 e4       	ldi	r24, 0x40	; 64
    230a:	58 07       	cpc	r21, r24
    230c:	58 f3       	brcs	.-42     	; 0x22e4 <__unpack_f+0x66>
    230e:	14 96       	adiw	r26, 0x04	; 4
    2310:	2d 93       	st	X+, r18
    2312:	3d 93       	st	X+, r19
    2314:	4d 93       	st	X+, r20
    2316:	5c 93       	st	X, r21
    2318:	17 97       	sbiw	r26, 0x07	; 7
    231a:	08 95       	ret
    231c:	2f 3f       	cpi	r18, 0xFF	; 255
    231e:	31 05       	cpc	r19, r1
    2320:	79 f4       	brne	.+30     	; 0x2340 <__unpack_f+0xc2>
    2322:	41 15       	cp	r20, r1
    2324:	51 05       	cpc	r21, r1
    2326:	61 05       	cpc	r22, r1
    2328:	71 05       	cpc	r23, r1
    232a:	19 f4       	brne	.+6      	; 0x2332 <__unpack_f+0xb4>
    232c:	84 e0       	ldi	r24, 0x04	; 4
    232e:	8c 93       	st	X, r24
    2330:	08 95       	ret
    2332:	64 ff       	sbrs	r22, 4
    2334:	03 c0       	rjmp	.+6      	; 0x233c <__unpack_f+0xbe>
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	8c 93       	st	X, r24
    233a:	12 c0       	rjmp	.+36     	; 0x2360 <__unpack_f+0xe2>
    233c:	1c 92       	st	X, r1
    233e:	10 c0       	rjmp	.+32     	; 0x2360 <__unpack_f+0xe2>
    2340:	2f 57       	subi	r18, 0x7F	; 127
    2342:	30 40       	sbci	r19, 0x00	; 0
    2344:	13 96       	adiw	r26, 0x03	; 3
    2346:	3c 93       	st	X, r19
    2348:	2e 93       	st	-X, r18
    234a:	12 97       	sbiw	r26, 0x02	; 2
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	8c 93       	st	X, r24
    2350:	87 e0       	ldi	r24, 0x07	; 7
    2352:	44 0f       	add	r20, r20
    2354:	55 1f       	adc	r21, r21
    2356:	66 1f       	adc	r22, r22
    2358:	77 1f       	adc	r23, r23
    235a:	8a 95       	dec	r24
    235c:	d1 f7       	brne	.-12     	; 0x2352 <__unpack_f+0xd4>
    235e:	70 64       	ori	r23, 0x40	; 64
    2360:	14 96       	adiw	r26, 0x04	; 4
    2362:	4d 93       	st	X+, r20
    2364:	5d 93       	st	X+, r21
    2366:	6d 93       	st	X+, r22
    2368:	7c 93       	st	X, r23
    236a:	17 97       	sbiw	r26, 0x07	; 7
    236c:	08 95       	ret

0000236e <__fpcmp_parts_f>:
    236e:	1f 93       	push	r17
    2370:	dc 01       	movw	r26, r24
    2372:	fb 01       	movw	r30, r22
    2374:	9c 91       	ld	r25, X
    2376:	92 30       	cpi	r25, 0x02	; 2
    2378:	08 f4       	brcc	.+2      	; 0x237c <__fpcmp_parts_f+0xe>
    237a:	47 c0       	rjmp	.+142    	; 0x240a <__fpcmp_parts_f+0x9c>
    237c:	80 81       	ld	r24, Z
    237e:	82 30       	cpi	r24, 0x02	; 2
    2380:	08 f4       	brcc	.+2      	; 0x2384 <__fpcmp_parts_f+0x16>
    2382:	43 c0       	rjmp	.+134    	; 0x240a <__fpcmp_parts_f+0x9c>
    2384:	94 30       	cpi	r25, 0x04	; 4
    2386:	51 f4       	brne	.+20     	; 0x239c <__fpcmp_parts_f+0x2e>
    2388:	11 96       	adiw	r26, 0x01	; 1
    238a:	1c 91       	ld	r17, X
    238c:	84 30       	cpi	r24, 0x04	; 4
    238e:	99 f5       	brne	.+102    	; 0x23f6 <__fpcmp_parts_f+0x88>
    2390:	81 81       	ldd	r24, Z+1	; 0x01
    2392:	68 2f       	mov	r22, r24
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	61 1b       	sub	r22, r17
    2398:	71 09       	sbc	r23, r1
    239a:	3f c0       	rjmp	.+126    	; 0x241a <__fpcmp_parts_f+0xac>
    239c:	84 30       	cpi	r24, 0x04	; 4
    239e:	21 f0       	breq	.+8      	; 0x23a8 <__fpcmp_parts_f+0x3a>
    23a0:	92 30       	cpi	r25, 0x02	; 2
    23a2:	31 f4       	brne	.+12     	; 0x23b0 <__fpcmp_parts_f+0x42>
    23a4:	82 30       	cpi	r24, 0x02	; 2
    23a6:	b9 f1       	breq	.+110    	; 0x2416 <__fpcmp_parts_f+0xa8>
    23a8:	81 81       	ldd	r24, Z+1	; 0x01
    23aa:	88 23       	and	r24, r24
    23ac:	89 f1       	breq	.+98     	; 0x2410 <__fpcmp_parts_f+0xa2>
    23ae:	2d c0       	rjmp	.+90     	; 0x240a <__fpcmp_parts_f+0x9c>
    23b0:	11 96       	adiw	r26, 0x01	; 1
    23b2:	1c 91       	ld	r17, X
    23b4:	11 97       	sbiw	r26, 0x01	; 1
    23b6:	82 30       	cpi	r24, 0x02	; 2
    23b8:	f1 f0       	breq	.+60     	; 0x23f6 <__fpcmp_parts_f+0x88>
    23ba:	81 81       	ldd	r24, Z+1	; 0x01
    23bc:	18 17       	cp	r17, r24
    23be:	d9 f4       	brne	.+54     	; 0x23f6 <__fpcmp_parts_f+0x88>
    23c0:	12 96       	adiw	r26, 0x02	; 2
    23c2:	2d 91       	ld	r18, X+
    23c4:	3c 91       	ld	r19, X
    23c6:	13 97       	sbiw	r26, 0x03	; 3
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	93 81       	ldd	r25, Z+3	; 0x03
    23cc:	82 17       	cp	r24, r18
    23ce:	93 07       	cpc	r25, r19
    23d0:	94 f0       	brlt	.+36     	; 0x23f6 <__fpcmp_parts_f+0x88>
    23d2:	28 17       	cp	r18, r24
    23d4:	39 07       	cpc	r19, r25
    23d6:	bc f0       	brlt	.+46     	; 0x2406 <__fpcmp_parts_f+0x98>
    23d8:	14 96       	adiw	r26, 0x04	; 4
    23da:	8d 91       	ld	r24, X+
    23dc:	9d 91       	ld	r25, X+
    23de:	0d 90       	ld	r0, X+
    23e0:	bc 91       	ld	r27, X
    23e2:	a0 2d       	mov	r26, r0
    23e4:	24 81       	ldd	r18, Z+4	; 0x04
    23e6:	35 81       	ldd	r19, Z+5	; 0x05
    23e8:	46 81       	ldd	r20, Z+6	; 0x06
    23ea:	57 81       	ldd	r21, Z+7	; 0x07
    23ec:	28 17       	cp	r18, r24
    23ee:	39 07       	cpc	r19, r25
    23f0:	4a 07       	cpc	r20, r26
    23f2:	5b 07       	cpc	r21, r27
    23f4:	18 f4       	brcc	.+6      	; 0x23fc <__fpcmp_parts_f+0x8e>
    23f6:	11 23       	and	r17, r17
    23f8:	41 f0       	breq	.+16     	; 0x240a <__fpcmp_parts_f+0x9c>
    23fa:	0a c0       	rjmp	.+20     	; 0x2410 <__fpcmp_parts_f+0xa2>
    23fc:	82 17       	cp	r24, r18
    23fe:	93 07       	cpc	r25, r19
    2400:	a4 07       	cpc	r26, r20
    2402:	b5 07       	cpc	r27, r21
    2404:	40 f4       	brcc	.+16     	; 0x2416 <__fpcmp_parts_f+0xa8>
    2406:	11 23       	and	r17, r17
    2408:	19 f0       	breq	.+6      	; 0x2410 <__fpcmp_parts_f+0xa2>
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	05 c0       	rjmp	.+10     	; 0x241a <__fpcmp_parts_f+0xac>
    2410:	6f ef       	ldi	r22, 0xFF	; 255
    2412:	7f ef       	ldi	r23, 0xFF	; 255
    2414:	02 c0       	rjmp	.+4      	; 0x241a <__fpcmp_parts_f+0xac>
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	cb 01       	movw	r24, r22
    241c:	1f 91       	pop	r17
    241e:	08 95       	ret

00002420 <__prologue_saves__>:
    2420:	2f 92       	push	r2
    2422:	3f 92       	push	r3
    2424:	4f 92       	push	r4
    2426:	5f 92       	push	r5
    2428:	6f 92       	push	r6
    242a:	7f 92       	push	r7
    242c:	8f 92       	push	r8
    242e:	9f 92       	push	r9
    2430:	af 92       	push	r10
    2432:	bf 92       	push	r11
    2434:	cf 92       	push	r12
    2436:	df 92       	push	r13
    2438:	ef 92       	push	r14
    243a:	ff 92       	push	r15
    243c:	0f 93       	push	r16
    243e:	1f 93       	push	r17
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	ca 1b       	sub	r28, r26
    244a:	db 0b       	sbc	r29, r27
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	19 94       	eijmp

00002458 <__epilogue_restores__>:
    2458:	2a 88       	ldd	r2, Y+18	; 0x12
    245a:	39 88       	ldd	r3, Y+17	; 0x11
    245c:	48 88       	ldd	r4, Y+16	; 0x10
    245e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2460:	6e 84       	ldd	r6, Y+14	; 0x0e
    2462:	7d 84       	ldd	r7, Y+13	; 0x0d
    2464:	8c 84       	ldd	r8, Y+12	; 0x0c
    2466:	9b 84       	ldd	r9, Y+11	; 0x0b
    2468:	aa 84       	ldd	r10, Y+10	; 0x0a
    246a:	b9 84       	ldd	r11, Y+9	; 0x09
    246c:	c8 84       	ldd	r12, Y+8	; 0x08
    246e:	df 80       	ldd	r13, Y+7	; 0x07
    2470:	ee 80       	ldd	r14, Y+6	; 0x06
    2472:	fd 80       	ldd	r15, Y+5	; 0x05
    2474:	0c 81       	ldd	r16, Y+4	; 0x04
    2476:	1b 81       	ldd	r17, Y+3	; 0x03
    2478:	aa 81       	ldd	r26, Y+2	; 0x02
    247a:	b9 81       	ldd	r27, Y+1	; 0x01
    247c:	ce 0f       	add	r28, r30
    247e:	d1 1d       	adc	r29, r1
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	ed 01       	movw	r28, r26
    248c:	08 95       	ret

0000248e <_exit>:
    248e:	f8 94       	cli

00002490 <__stop_program>:
    2490:	ff cf       	rjmp	.-2      	; 0x2490 <__stop_program>
